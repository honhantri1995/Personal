/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OmniSci_H
#define OmniSci_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "omnisci_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class OmniSciIf {
 public:
  virtual ~OmniSciIf() {}
  virtual void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) = 0;
  virtual void krb5_connect(TKrb5Session& _return, const std::string& inputToken, const std::string& dbname) = 0;
  virtual void disconnect(const TSessionId& session) = 0;
  virtual void switch_database(const TSessionId& session, const std::string& dbname) = 0;
  virtual void clone_session(TSessionId& _return, const TSessionId& session) = 0;
  virtual void get_server_status(TServerStatus& _return, const TSessionId& session) = 0;
  virtual void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) = 0;
  virtual void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) = 0;
  virtual void get_tables(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_tables_for_database(std::vector<std::string> & _return, const TSessionId& session, const std::string& database_name) = 0;
  virtual void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_views(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) = 0;
  virtual void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) = 0;
  virtual void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_internal_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) = 0;
  virtual void get_users(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) = 0;
  virtual void get_version(std::string& _return) = 0;
  virtual void start_heap_profile(const TSessionId& session) = 0;
  virtual void stop_heap_profile(const TSessionId& session) = 0;
  virtual void get_heap_profile(std::string& _return, const TSessionId& session) = 0;
  virtual void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) = 0;
  virtual void clear_cpu_memory(const TSessionId& session) = 0;
  virtual void clear_gpu_memory(const TSessionId& session) = 0;
  virtual void set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) = 0;
  virtual void invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) = 0;
  virtual void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) = 0;
  virtual void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) = 0;
  virtual int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) = 0;
  virtual int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_table_epochs(std::vector<TTableEpochInfo> & _return, const TSessionId& session, const int32_t db_id, const int32_t table_id) = 0;
  virtual void set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs) = 0;
  virtual void get_session_info(TSessionInfo& _return, const TSessionId& session) = 0;
  virtual void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) = 0;
  virtual void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method) = 0;
  virtual void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) = 0;
  virtual void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) = 0;
  virtual void interrupt(const TSessionId& query_session, const TSessionId& interrupt_session) = 0;
  virtual void sql_validate(TRowDescriptor& _return, const TSessionId& session, const std::string& query) = 0;
  virtual void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) = 0;
  virtual void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) = 0;
  virtual void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) = 0;
  virtual void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) = 0;
  virtual int32_t create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression) = 0;
  virtual void get_custom_expressions(std::vector<TCustomExpression> & _return, const TSessionId& session) = 0;
  virtual void update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json) = 0;
  virtual void delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete) = 0;
  virtual void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) = 0;
  virtual int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) = 0;
  virtual void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) = 0;
  virtual void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) = 0;
  virtual void delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids) = 0;
  virtual void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) = 0;
  virtual void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) = 0;
  virtual void unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) = 0;
  virtual void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) = 0;
  virtual void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) = 0;
  virtual void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names) = 0;
  virtual void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names) = 0;
  virtual void load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups) = 0;
  virtual void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names) = 0;
  virtual void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names) = 0;
  virtual void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) = 0;
  virtual void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) = 0;
  virtual void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) = 0;
  virtual void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) = 0;
  virtual void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) = 0;
  virtual void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual int64_t query_get_outer_fragment_count(const TSessionId& session, const std::string& query) = 0;
  virtual void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) = 0;
  virtual void start_query(TPendingQuery& _return, const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices) = 0;
  virtual void execute_query_step(TStepResult& _return, const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str) = 0;
  virtual void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result) = 0;
  virtual void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) = 0;
  virtual void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) = 0;
  virtual void insert_data(const TSessionId& session, const TInsertData& insert_data) = 0;
  virtual void checkpoint(const TSessionId& session, const int32_t table_id) = 0;
  virtual void get_roles(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) = 0;
  virtual void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) = 0;
  virtual void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) = 0;
  virtual bool has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName) = 0;
  virtual bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) = 0;
  virtual void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) = 0;
  virtual void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) = 0;
  virtual void get_device_parameters(std::map<std::string, std::string> & _return, const TSessionId& session) = 0;
  virtual void register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map) = 0;
};

class OmniSciIfFactory {
 public:
  typedef OmniSciIf Handler;

  virtual ~OmniSciIfFactory() {}

  virtual OmniSciIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OmniSciIf* /* handler */) = 0;
  };

class OmniSciIfSingletonFactory : virtual public OmniSciIfFactory {
 public:
  OmniSciIfSingletonFactory(const ::std::shared_ptr<OmniSciIf>& iface) : iface_(iface) {}
  virtual ~OmniSciIfSingletonFactory() {}

  virtual OmniSciIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(OmniSciIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<OmniSciIf> iface_;
};

class OmniSciNull : virtual public OmniSciIf {
 public:
  virtual ~OmniSciNull() {}
  void connect(TSessionId& /* _return */, const std::string& /* user */, const std::string& /* passwd */, const std::string& /* dbname */) override {
    return;
  }
  void krb5_connect(TKrb5Session& /* _return */, const std::string& /* inputToken */, const std::string& /* dbname */) override {
    return;
  }
  void disconnect(const TSessionId& /* session */) override {
    return;
  }
  void switch_database(const TSessionId& /* session */, const std::string& /* dbname */) override {
    return;
  }
  void clone_session(TSessionId& /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_server_status(TServerStatus& /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_status(std::vector<TServerStatus> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_hardware_info(TClusterHardwareInfo& /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_tables(std::vector<std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_tables_for_database(std::vector<std::string> & /* _return */, const TSessionId& /* session */, const std::string& /* database_name */) override {
    return;
  }
  void get_physical_tables(std::vector<std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_views(std::vector<std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_tables_meta(std::vector<TTableMeta> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_table_details(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) override {
    return;
  }
  void get_table_details_for_database(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* database_name */) override {
    return;
  }
  void get_internal_table_details(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) override {
    return;
  }
  void get_internal_table_details_for_database(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* database_name */) override {
    return;
  }
  void get_users(std::vector<std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_databases(std::vector<TDBInfo> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_version(std::string& /* _return */) override {
    return;
  }
  void start_heap_profile(const TSessionId& /* session */) override {
    return;
  }
  void stop_heap_profile(const TSessionId& /* session */) override {
    return;
  }
  void get_heap_profile(std::string& /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_memory(std::vector<TNodeMemoryInfo> & /* _return */, const TSessionId& /* session */, const std::string& /* memory_level */) override {
    return;
  }
  void clear_cpu_memory(const TSessionId& /* session */) override {
    return;
  }
  void clear_gpu_memory(const TSessionId& /* session */) override {
    return;
  }
  void set_cur_session(const TSessionId& /* parent_session */, const TSessionId& /* leaf_session */, const std::string& /* start_time_str */, const std::string& /* label */) override {
    return;
  }
  void invalidate_cur_session(const TSessionId& /* parent_session */, const TSessionId& /* leaf_session */, const std::string& /* start_time_str */, const std::string& /* label */) override {
    return;
  }
  void set_table_epoch(const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */, const int32_t /* new_epoch */) override {
    return;
  }
  void set_table_epoch_by_name(const TSessionId& /* session */, const std::string& /* table_name */, const int32_t /* new_epoch */) override {
    return;
  }
  int32_t get_table_epoch(const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_table_epoch_by_name(const TSessionId& /* session */, const std::string& /* table_name */) override {
    int32_t _return = 0;
    return _return;
  }
  void get_table_epochs(std::vector<TTableEpochInfo> & /* _return */, const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */) override {
    return;
  }
  void set_table_epochs(const TSessionId& /* session */, const int32_t /* db_id */, const std::vector<TTableEpochInfo> & /* table_epochs */) override {
    return;
  }
  void get_session_info(TSessionInfo& /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void sql_execute(TQueryResult& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const bool /* column_format */, const std::string& /* nonce */, const int32_t /* first_n */, const int32_t /* at_most_n */) override {
    return;
  }
  void sql_execute_df(TDataFrame& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const  ::TDeviceType::type /* device_type */, const int32_t /* device_id */, const int32_t /* first_n */, const TArrowTransport::type /* transport_method */) override {
    return;
  }
  void sql_execute_gdf(TDataFrame& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const int32_t /* device_id */, const int32_t /* first_n */) override {
    return;
  }
  void deallocate_df(const TSessionId& /* session */, const TDataFrame& /* df */, const  ::TDeviceType::type /* device_type */, const int32_t /* device_id */) override {
    return;
  }
  void interrupt(const TSessionId& /* query_session */, const TSessionId& /* interrupt_session */) override {
    return;
  }
  void sql_validate(TRowDescriptor& /* _return */, const TSessionId& /* session */, const std::string& /* query */) override {
    return;
  }
  void get_completion_hints(std::vector< ::TCompletionHint> & /* _return */, const TSessionId& /* session */, const std::string& /* sql */, const int32_t /* cursor */) override {
    return;
  }
  void set_execution_mode(const TSessionId& /* session */, const TExecuteMode::type /* mode */) override {
    return;
  }
  void render_vega(TRenderResult& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const std::string& /* vega_json */, const int32_t /* compression_level */, const std::string& /* nonce */) override {
    return;
  }
  void get_result_row_for_pixel(TPixelTableRowResult& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const TPixel& /* pixel */, const std::map<std::string, std::vector<std::string> > & /* table_col_names */, const bool /* column_format */, const int32_t /* pixelRadius */, const std::string& /* nonce */) override {
    return;
  }
  int32_t create_custom_expression(const TSessionId& /* session */, const TCustomExpression& /* custom_expression */) override {
    int32_t _return = 0;
    return _return;
  }
  void get_custom_expressions(std::vector<TCustomExpression> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void update_custom_expression(const TSessionId& /* session */, const int32_t /* id */, const std::string& /* expression_json */) override {
    return;
  }
  void delete_custom_expressions(const TSessionId& /* session */, const std::vector<int32_t> & /* custom_expression_ids */, const bool /* do_soft_delete */) override {
    return;
  }
  void get_dashboard(TDashboard& /* _return */, const TSessionId& /* session */, const int32_t /* dashboard_id */) override {
    return;
  }
  void get_dashboards(std::vector<TDashboard> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  int32_t create_dashboard(const TSessionId& /* session */, const std::string& /* dashboard_name */, const std::string& /* dashboard_state */, const std::string& /* image_hash */, const std::string& /* dashboard_metadata */) override {
    int32_t _return = 0;
    return _return;
  }
  void replace_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::string& /* dashboard_name */, const std::string& /* dashboard_owner */, const std::string& /* dashboard_state */, const std::string& /* image_hash */, const std::string& /* dashboard_metadata */) override {
    return;
  }
  void delete_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */) override {
    return;
  }
  void share_dashboards(const TSessionId& /* session */, const std::vector<int32_t> & /* dashboard_ids */, const std::vector<std::string> & /* groups */, const TDashboardPermissions& /* permissions */) override {
    return;
  }
  void delete_dashboards(const TSessionId& /* session */, const std::vector<int32_t> & /* dashboard_ids */) override {
    return;
  }
  void share_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::vector<std::string> & /* groups */, const std::vector<std::string> & /* objects */, const TDashboardPermissions& /* permissions */, const bool /* grant_role */) override {
    return;
  }
  void unshare_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::vector<std::string> & /* groups */, const std::vector<std::string> & /* objects */, const TDashboardPermissions& /* permissions */) override {
    return;
  }
  void unshare_dashboards(const TSessionId& /* session */, const std::vector<int32_t> & /* dashboard_ids */, const std::vector<std::string> & /* groups */, const TDashboardPermissions& /* permissions */) override {
    return;
  }
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & /* _return */, const TSessionId& /* session */, const int32_t /* dashboard_id */) override {
    return;
  }
  void get_link_view(TFrontendView& /* _return */, const TSessionId& /* session */, const std::string& /* link */) override {
    return;
  }
  void create_link(std::string& /* _return */, const TSessionId& /* session */, const std::string& /* view_state */, const std::string& /* view_metadata */) override {
    return;
  }
  void load_table_binary(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TRow> & /* rows */, const std::vector<std::string> & /* column_names */) override {
    return;
  }
  void load_table_binary_columnar(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TColumn> & /* cols */, const std::vector<std::string> & /* column_names */) override {
    return;
  }
  void load_table_binary_columnar_polys(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TColumn> & /* cols */, const std::vector<std::string> & /* column_names */, const bool /* assign_render_groups */) override {
    return;
  }
  void load_table_binary_arrow(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* arrow_stream */, const bool /* use_column_names */) override {
    return;
  }
  void load_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TStringRow> & /* rows */, const std::vector<std::string> & /* column_names */) override {
    return;
  }
  void detect_column_types(TDetectResult& /* _return */, const TSessionId& /* session */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) override {
    return;
  }
  void create_table(const TSessionId& /* session */, const std::string& /* table_name */, const TRowDescriptor& /* row_desc */, const TFileType::type /* file_type */, const TCreateParams& /* create_params */) override {
    return;
  }
  void import_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) override {
    return;
  }
  void import_geo_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* file_name */, const TCopyParams& /* copy_params */, const TRowDescriptor& /* row_desc */, const TCreateParams& /* create_params */) override {
    return;
  }
  void import_table_status(TImportStatus& /* _return */, const TSessionId& /* session */, const std::string& /* import_id */) override {
    return;
  }
  void get_first_geo_file_in_archive(std::string& /* _return */, const TSessionId& /* session */, const std::string& /* archive_path */, const TCopyParams& /* copy_params */) override {
    return;
  }
  void get_all_files_in_archive(std::vector<std::string> & /* _return */, const TSessionId& /* session */, const std::string& /* archive_path */, const TCopyParams& /* copy_params */) override {
    return;
  }
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & /* _return */, const TSessionId& /* session */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) override {
    return;
  }
  int64_t query_get_outer_fragment_count(const TSessionId& /* session */, const std::string& /* query */) override {
    int64_t _return = 0;
    return _return;
  }
  void check_table_consistency(TTableMeta& /* _return */, const TSessionId& /* session */, const int32_t /* table_id */) override {
    return;
  }
  void start_query(TPendingQuery& /* _return */, const TSessionId& /* leaf_session */, const TSessionId& /* parent_session */, const std::string& /* query_ra */, const std::string& /* start_time_str */, const bool /* just_explain */, const std::vector<int64_t> & /* outer_fragment_indices */) override {
    return;
  }
  void execute_query_step(TStepResult& /* _return */, const TPendingQuery& /* pending_query */, const TSubqueryId /* subquery_id */, const std::string& /* start_time_str */) override {
    return;
  }
  void broadcast_serialized_rows(const  ::TSerializedRows& /* serialized_rows */, const TRowDescriptor& /* row_desc */, const TQueryId /* query_id */, const TSubqueryId /* subquery_id */, const bool /* is_final_subquery_result */) override {
    return;
  }
  void start_render_query(TPendingRenderQuery& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const int16_t /* node_idx */, const std::string& /* vega_json */) override {
    return;
  }
  void execute_next_render_step(TRenderStepResult& /* _return */, const TPendingRenderQuery& /* pending_render */, const TRenderAggDataMap& /* merged_data */) override {
    return;
  }
  void insert_data(const TSessionId& /* session */, const TInsertData& /* insert_data */) override {
    return;
  }
  void checkpoint(const TSessionId& /* session */, const int32_t /* table_id */) override {
    return;
  }
  void get_roles(std::vector<std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void get_db_objects_for_grantee(std::vector<TDBObject> & /* _return */, const TSessionId& /* session */, const std::string& /* roleName */) override {
    return;
  }
  void get_db_object_privs(std::vector<TDBObject> & /* _return */, const TSessionId& /* session */, const std::string& /* objectName */, const TDBObjectType::type /* type */) override {
    return;
  }
  void get_all_roles_for_user(std::vector<std::string> & /* _return */, const TSessionId& /* session */, const std::string& /* userName */) override {
    return;
  }
  bool has_role(const TSessionId& /* session */, const std::string& /* granteeName */, const std::string& /* roleName */) override {
    bool _return = false;
    return _return;
  }
  bool has_object_privilege(const TSessionId& /* session */, const std::string& /* granteeName */, const std::string& /* ObjectName */, const TDBObjectType::type /* objectType */, const TDBObjectPermissions& /* permissions */) override {
    bool _return = false;
    return _return;
  }
  void set_license_key(TLicenseInfo& /* _return */, const TSessionId& /* session */, const std::string& /* key */, const std::string& /* nonce */) override {
    return;
  }
  void get_license_claims(TLicenseInfo& /* _return */, const TSessionId& /* session */, const std::string& /* nonce */) override {
    return;
  }
  void get_device_parameters(std::map<std::string, std::string> & /* _return */, const TSessionId& /* session */) override {
    return;
  }
  void register_runtime_extension_functions(const TSessionId& /* session */, const std::vector< ::TUserDefinedFunction> & /* udfs */, const std::vector< ::TUserDefinedTableFunction> & /* udtfs */, const std::map<std::string, std::string> & /* device_ir_map */) override {
    return;
  }
};

typedef struct _OmniSci_connect_args__isset {
  _OmniSci_connect_args__isset() : user(false), passwd(false), dbname(false) {}
  bool user :1;
  bool passwd :1;
  bool dbname :1;
} _OmniSci_connect_args__isset;

class OmniSci_connect_args {
 public:

  OmniSci_connect_args(const OmniSci_connect_args&);
  OmniSci_connect_args& operator=(const OmniSci_connect_args&);
  OmniSci_connect_args() noexcept
                       : user(),
                         passwd(),
                         dbname() {
  }

  virtual ~OmniSci_connect_args() noexcept;
  std::string user;
  std::string passwd;
  std::string dbname;

  _OmniSci_connect_args__isset __isset;

  void __set_user(const std::string& val);

  void __set_passwd(const std::string& val);

  void __set_dbname(const std::string& val);

  bool operator == (const OmniSci_connect_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const OmniSci_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_connect_pargs {
 public:


  virtual ~OmniSci_connect_pargs() noexcept;
  const std::string* user;
  const std::string* passwd;
  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_connect_result__isset {
  _OmniSci_connect_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_connect_result__isset;

class OmniSci_connect_result {
 public:

  OmniSci_connect_result(const OmniSci_connect_result&);
  OmniSci_connect_result& operator=(const OmniSci_connect_result&);
  OmniSci_connect_result() noexcept
                         : success() {
  }

  virtual ~OmniSci_connect_result() noexcept;
  TSessionId success;
  TOmniSciException e;

  _OmniSci_connect_result__isset __isset;

  void __set_success(const TSessionId& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_connect_presult__isset {
  _OmniSci_connect_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_connect_presult__isset;

class OmniSci_connect_presult {
 public:


  virtual ~OmniSci_connect_presult() noexcept;
  TSessionId* success;
  TOmniSciException e;

  _OmniSci_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_krb5_connect_args__isset {
  _OmniSci_krb5_connect_args__isset() : inputToken(false), dbname(false) {}
  bool inputToken :1;
  bool dbname :1;
} _OmniSci_krb5_connect_args__isset;

class OmniSci_krb5_connect_args {
 public:

  OmniSci_krb5_connect_args(const OmniSci_krb5_connect_args&);
  OmniSci_krb5_connect_args& operator=(const OmniSci_krb5_connect_args&);
  OmniSci_krb5_connect_args() noexcept
                            : inputToken(),
                              dbname() {
  }

  virtual ~OmniSci_krb5_connect_args() noexcept;
  std::string inputToken;
  std::string dbname;

  _OmniSci_krb5_connect_args__isset __isset;

  void __set_inputToken(const std::string& val);

  void __set_dbname(const std::string& val);

  bool operator == (const OmniSci_krb5_connect_args & rhs) const
  {
    if (!(inputToken == rhs.inputToken))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const OmniSci_krb5_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_krb5_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_krb5_connect_pargs {
 public:


  virtual ~OmniSci_krb5_connect_pargs() noexcept;
  const std::string* inputToken;
  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_krb5_connect_result__isset {
  _OmniSci_krb5_connect_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_krb5_connect_result__isset;

class OmniSci_krb5_connect_result {
 public:

  OmniSci_krb5_connect_result(const OmniSci_krb5_connect_result&);
  OmniSci_krb5_connect_result& operator=(const OmniSci_krb5_connect_result&);
  OmniSci_krb5_connect_result() noexcept {
  }

  virtual ~OmniSci_krb5_connect_result() noexcept;
  TKrb5Session success;
  TOmniSciException e;

  _OmniSci_krb5_connect_result__isset __isset;

  void __set_success(const TKrb5Session& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_krb5_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_krb5_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_krb5_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_krb5_connect_presult__isset {
  _OmniSci_krb5_connect_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_krb5_connect_presult__isset;

class OmniSci_krb5_connect_presult {
 public:


  virtual ~OmniSci_krb5_connect_presult() noexcept;
  TKrb5Session* success;
  TOmniSciException e;

  _OmniSci_krb5_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_disconnect_args__isset {
  _OmniSci_disconnect_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_disconnect_args__isset;

class OmniSci_disconnect_args {
 public:

  OmniSci_disconnect_args(const OmniSci_disconnect_args&);
  OmniSci_disconnect_args& operator=(const OmniSci_disconnect_args&);
  OmniSci_disconnect_args() noexcept
                          : session() {
  }

  virtual ~OmniSci_disconnect_args() noexcept;
  TSessionId session;

  _OmniSci_disconnect_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_disconnect_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_disconnect_pargs {
 public:


  virtual ~OmniSci_disconnect_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_disconnect_result__isset {
  _OmniSci_disconnect_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_disconnect_result__isset;

class OmniSci_disconnect_result {
 public:

  OmniSci_disconnect_result(const OmniSci_disconnect_result&);
  OmniSci_disconnect_result& operator=(const OmniSci_disconnect_result&);
  OmniSci_disconnect_result() noexcept {
  }

  virtual ~OmniSci_disconnect_result() noexcept;
  TOmniSciException e;

  _OmniSci_disconnect_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_disconnect_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_disconnect_presult__isset {
  _OmniSci_disconnect_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_disconnect_presult__isset;

class OmniSci_disconnect_presult {
 public:


  virtual ~OmniSci_disconnect_presult() noexcept;
  TOmniSciException e;

  _OmniSci_disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_switch_database_args__isset {
  _OmniSci_switch_database_args__isset() : session(false), dbname(false) {}
  bool session :1;
  bool dbname :1;
} _OmniSci_switch_database_args__isset;

class OmniSci_switch_database_args {
 public:

  OmniSci_switch_database_args(const OmniSci_switch_database_args&);
  OmniSci_switch_database_args& operator=(const OmniSci_switch_database_args&);
  OmniSci_switch_database_args() noexcept
                               : session(),
                                 dbname() {
  }

  virtual ~OmniSci_switch_database_args() noexcept;
  TSessionId session;
  std::string dbname;

  _OmniSci_switch_database_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dbname(const std::string& val);

  bool operator == (const OmniSci_switch_database_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const OmniSci_switch_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_switch_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_switch_database_pargs {
 public:


  virtual ~OmniSci_switch_database_pargs() noexcept;
  const TSessionId* session;
  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_switch_database_result__isset {
  _OmniSci_switch_database_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_switch_database_result__isset;

class OmniSci_switch_database_result {
 public:

  OmniSci_switch_database_result(const OmniSci_switch_database_result&);
  OmniSci_switch_database_result& operator=(const OmniSci_switch_database_result&);
  OmniSci_switch_database_result() noexcept {
  }

  virtual ~OmniSci_switch_database_result() noexcept;
  TOmniSciException e;

  _OmniSci_switch_database_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_switch_database_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_switch_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_switch_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_switch_database_presult__isset {
  _OmniSci_switch_database_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_switch_database_presult__isset;

class OmniSci_switch_database_presult {
 public:


  virtual ~OmniSci_switch_database_presult() noexcept;
  TOmniSciException e;

  _OmniSci_switch_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_clone_session_args__isset {
  _OmniSci_clone_session_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_clone_session_args__isset;

class OmniSci_clone_session_args {
 public:

  OmniSci_clone_session_args(const OmniSci_clone_session_args&);
  OmniSci_clone_session_args& operator=(const OmniSci_clone_session_args&);
  OmniSci_clone_session_args() noexcept
                             : session() {
  }

  virtual ~OmniSci_clone_session_args() noexcept;
  TSessionId session;

  _OmniSci_clone_session_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_clone_session_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clone_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clone_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_clone_session_pargs {
 public:


  virtual ~OmniSci_clone_session_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clone_session_result__isset {
  _OmniSci_clone_session_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_clone_session_result__isset;

class OmniSci_clone_session_result {
 public:

  OmniSci_clone_session_result(const OmniSci_clone_session_result&);
  OmniSci_clone_session_result& operator=(const OmniSci_clone_session_result&);
  OmniSci_clone_session_result() noexcept
                               : success() {
  }

  virtual ~OmniSci_clone_session_result() noexcept;
  TSessionId success;
  TOmniSciException e;

  _OmniSci_clone_session_result__isset __isset;

  void __set_success(const TSessionId& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_clone_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clone_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clone_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clone_session_presult__isset {
  _OmniSci_clone_session_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_clone_session_presult__isset;

class OmniSci_clone_session_presult {
 public:


  virtual ~OmniSci_clone_session_presult() noexcept;
  TSessionId* success;
  TOmniSciException e;

  _OmniSci_clone_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_server_status_args__isset {
  _OmniSci_get_server_status_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_server_status_args__isset;

class OmniSci_get_server_status_args {
 public:

  OmniSci_get_server_status_args(const OmniSci_get_server_status_args&);
  OmniSci_get_server_status_args& operator=(const OmniSci_get_server_status_args&);
  OmniSci_get_server_status_args() noexcept
                                 : session() {
  }

  virtual ~OmniSci_get_server_status_args() noexcept;
  TSessionId session;

  _OmniSci_get_server_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_server_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_server_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_server_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_server_status_pargs {
 public:


  virtual ~OmniSci_get_server_status_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_server_status_result__isset {
  _OmniSci_get_server_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_server_status_result__isset;

class OmniSci_get_server_status_result {
 public:

  OmniSci_get_server_status_result(const OmniSci_get_server_status_result&);
  OmniSci_get_server_status_result& operator=(const OmniSci_get_server_status_result&);
  OmniSci_get_server_status_result() noexcept {
  }

  virtual ~OmniSci_get_server_status_result() noexcept;
  TServerStatus success;
  TOmniSciException e;

  _OmniSci_get_server_status_result__isset __isset;

  void __set_success(const TServerStatus& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_server_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_server_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_server_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_server_status_presult__isset {
  _OmniSci_get_server_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_server_status_presult__isset;

class OmniSci_get_server_status_presult {
 public:


  virtual ~OmniSci_get_server_status_presult() noexcept;
  TServerStatus* success;
  TOmniSciException e;

  _OmniSci_get_server_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_status_args__isset {
  _OmniSci_get_status_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_status_args__isset;

class OmniSci_get_status_args {
 public:

  OmniSci_get_status_args(const OmniSci_get_status_args&);
  OmniSci_get_status_args& operator=(const OmniSci_get_status_args&);
  OmniSci_get_status_args() noexcept
                          : session() {
  }

  virtual ~OmniSci_get_status_args() noexcept;
  TSessionId session;

  _OmniSci_get_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_status_pargs {
 public:


  virtual ~OmniSci_get_status_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_status_result__isset {
  _OmniSci_get_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_status_result__isset;

class OmniSci_get_status_result {
 public:

  OmniSci_get_status_result(const OmniSci_get_status_result&);
  OmniSci_get_status_result& operator=(const OmniSci_get_status_result&);
  OmniSci_get_status_result() noexcept {
  }

  virtual ~OmniSci_get_status_result() noexcept;
  std::vector<TServerStatus>  success;
  TOmniSciException e;

  _OmniSci_get_status_result__isset __isset;

  void __set_success(const std::vector<TServerStatus> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_status_presult__isset {
  _OmniSci_get_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_status_presult__isset;

class OmniSci_get_status_presult {
 public:


  virtual ~OmniSci_get_status_presult() noexcept;
  std::vector<TServerStatus> * success;
  TOmniSciException e;

  _OmniSci_get_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_hardware_info_args__isset {
  _OmniSci_get_hardware_info_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_hardware_info_args__isset;

class OmniSci_get_hardware_info_args {
 public:

  OmniSci_get_hardware_info_args(const OmniSci_get_hardware_info_args&);
  OmniSci_get_hardware_info_args& operator=(const OmniSci_get_hardware_info_args&);
  OmniSci_get_hardware_info_args() noexcept
                                 : session() {
  }

  virtual ~OmniSci_get_hardware_info_args() noexcept;
  TSessionId session;

  _OmniSci_get_hardware_info_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_hardware_info_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_hardware_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_hardware_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_hardware_info_pargs {
 public:


  virtual ~OmniSci_get_hardware_info_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_hardware_info_result__isset {
  _OmniSci_get_hardware_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_hardware_info_result__isset;

class OmniSci_get_hardware_info_result {
 public:

  OmniSci_get_hardware_info_result(const OmniSci_get_hardware_info_result&);
  OmniSci_get_hardware_info_result& operator=(const OmniSci_get_hardware_info_result&);
  OmniSci_get_hardware_info_result() noexcept {
  }

  virtual ~OmniSci_get_hardware_info_result() noexcept;
  TClusterHardwareInfo success;
  TOmniSciException e;

  _OmniSci_get_hardware_info_result__isset __isset;

  void __set_success(const TClusterHardwareInfo& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_hardware_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_hardware_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_hardware_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_hardware_info_presult__isset {
  _OmniSci_get_hardware_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_hardware_info_presult__isset;

class OmniSci_get_hardware_info_presult {
 public:


  virtual ~OmniSci_get_hardware_info_presult() noexcept;
  TClusterHardwareInfo* success;
  TOmniSciException e;

  _OmniSci_get_hardware_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_tables_args__isset {
  _OmniSci_get_tables_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_tables_args__isset;

class OmniSci_get_tables_args {
 public:

  OmniSci_get_tables_args(const OmniSci_get_tables_args&);
  OmniSci_get_tables_args& operator=(const OmniSci_get_tables_args&);
  OmniSci_get_tables_args() noexcept
                          : session() {
  }

  virtual ~OmniSci_get_tables_args() noexcept;
  TSessionId session;

  _OmniSci_get_tables_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_tables_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_tables_pargs {
 public:


  virtual ~OmniSci_get_tables_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_result__isset {
  _OmniSci_get_tables_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_result__isset;

class OmniSci_get_tables_result {
 public:

  OmniSci_get_tables_result(const OmniSci_get_tables_result&);
  OmniSci_get_tables_result& operator=(const OmniSci_get_tables_result&);
  OmniSci_get_tables_result() noexcept {
  }

  virtual ~OmniSci_get_tables_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_tables_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_presult__isset {
  _OmniSci_get_tables_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_presult__isset;

class OmniSci_get_tables_presult {
 public:


  virtual ~OmniSci_get_tables_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_tables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_tables_for_database_args__isset {
  _OmniSci_get_tables_for_database_args__isset() : session(false), database_name(false) {}
  bool session :1;
  bool database_name :1;
} _OmniSci_get_tables_for_database_args__isset;

class OmniSci_get_tables_for_database_args {
 public:

  OmniSci_get_tables_for_database_args(const OmniSci_get_tables_for_database_args&);
  OmniSci_get_tables_for_database_args& operator=(const OmniSci_get_tables_for_database_args&);
  OmniSci_get_tables_for_database_args() noexcept
                                       : session(),
                                         database_name() {
  }

  virtual ~OmniSci_get_tables_for_database_args() noexcept;
  TSessionId session;
  std::string database_name;

  _OmniSci_get_tables_for_database_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_database_name(const std::string& val);

  bool operator == (const OmniSci_get_tables_for_database_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(database_name == rhs.database_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_for_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_for_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_tables_for_database_pargs {
 public:


  virtual ~OmniSci_get_tables_for_database_pargs() noexcept;
  const TSessionId* session;
  const std::string* database_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_for_database_result__isset {
  _OmniSci_get_tables_for_database_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_for_database_result__isset;

class OmniSci_get_tables_for_database_result {
 public:

  OmniSci_get_tables_for_database_result(const OmniSci_get_tables_for_database_result&);
  OmniSci_get_tables_for_database_result& operator=(const OmniSci_get_tables_for_database_result&);
  OmniSci_get_tables_for_database_result() noexcept {
  }

  virtual ~OmniSci_get_tables_for_database_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_tables_for_database_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_tables_for_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_for_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_for_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_for_database_presult__isset {
  _OmniSci_get_tables_for_database_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_for_database_presult__isset;

class OmniSci_get_tables_for_database_presult {
 public:


  virtual ~OmniSci_get_tables_for_database_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_tables_for_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_physical_tables_args__isset {
  _OmniSci_get_physical_tables_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_physical_tables_args__isset;

class OmniSci_get_physical_tables_args {
 public:

  OmniSci_get_physical_tables_args(const OmniSci_get_physical_tables_args&);
  OmniSci_get_physical_tables_args& operator=(const OmniSci_get_physical_tables_args&);
  OmniSci_get_physical_tables_args() noexcept
                                   : session() {
  }

  virtual ~OmniSci_get_physical_tables_args() noexcept;
  TSessionId session;

  _OmniSci_get_physical_tables_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_physical_tables_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_physical_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_physical_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_physical_tables_pargs {
 public:


  virtual ~OmniSci_get_physical_tables_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_physical_tables_result__isset {
  _OmniSci_get_physical_tables_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_physical_tables_result__isset;

class OmniSci_get_physical_tables_result {
 public:

  OmniSci_get_physical_tables_result(const OmniSci_get_physical_tables_result&);
  OmniSci_get_physical_tables_result& operator=(const OmniSci_get_physical_tables_result&);
  OmniSci_get_physical_tables_result() noexcept {
  }

  virtual ~OmniSci_get_physical_tables_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_physical_tables_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_physical_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_physical_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_physical_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_physical_tables_presult__isset {
  _OmniSci_get_physical_tables_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_physical_tables_presult__isset;

class OmniSci_get_physical_tables_presult {
 public:


  virtual ~OmniSci_get_physical_tables_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_physical_tables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_views_args__isset {
  _OmniSci_get_views_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_views_args__isset;

class OmniSci_get_views_args {
 public:

  OmniSci_get_views_args(const OmniSci_get_views_args&);
  OmniSci_get_views_args& operator=(const OmniSci_get_views_args&);
  OmniSci_get_views_args() noexcept
                         : session() {
  }

  virtual ~OmniSci_get_views_args() noexcept;
  TSessionId session;

  _OmniSci_get_views_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_views_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_views_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_views_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_views_pargs {
 public:


  virtual ~OmniSci_get_views_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_views_result__isset {
  _OmniSci_get_views_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_views_result__isset;

class OmniSci_get_views_result {
 public:

  OmniSci_get_views_result(const OmniSci_get_views_result&);
  OmniSci_get_views_result& operator=(const OmniSci_get_views_result&);
  OmniSci_get_views_result() noexcept {
  }

  virtual ~OmniSci_get_views_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_views_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_views_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_views_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_views_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_views_presult__isset {
  _OmniSci_get_views_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_views_presult__isset;

class OmniSci_get_views_presult {
 public:


  virtual ~OmniSci_get_views_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_views_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_tables_meta_args__isset {
  _OmniSci_get_tables_meta_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_tables_meta_args__isset;

class OmniSci_get_tables_meta_args {
 public:

  OmniSci_get_tables_meta_args(const OmniSci_get_tables_meta_args&);
  OmniSci_get_tables_meta_args& operator=(const OmniSci_get_tables_meta_args&);
  OmniSci_get_tables_meta_args() noexcept
                               : session() {
  }

  virtual ~OmniSci_get_tables_meta_args() noexcept;
  TSessionId session;

  _OmniSci_get_tables_meta_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_tables_meta_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_meta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_meta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_tables_meta_pargs {
 public:


  virtual ~OmniSci_get_tables_meta_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_meta_result__isset {
  _OmniSci_get_tables_meta_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_meta_result__isset;

class OmniSci_get_tables_meta_result {
 public:

  OmniSci_get_tables_meta_result(const OmniSci_get_tables_meta_result&);
  OmniSci_get_tables_meta_result& operator=(const OmniSci_get_tables_meta_result&);
  OmniSci_get_tables_meta_result() noexcept {
  }

  virtual ~OmniSci_get_tables_meta_result() noexcept;
  std::vector<TTableMeta>  success;
  TOmniSciException e;

  _OmniSci_get_tables_meta_result__isset __isset;

  void __set_success(const std::vector<TTableMeta> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_tables_meta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_tables_meta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_tables_meta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_tables_meta_presult__isset {
  _OmniSci_get_tables_meta_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_tables_meta_presult__isset;

class OmniSci_get_tables_meta_presult {
 public:


  virtual ~OmniSci_get_tables_meta_presult() noexcept;
  std::vector<TTableMeta> * success;
  TOmniSciException e;

  _OmniSci_get_tables_meta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_table_details_args__isset {
  _OmniSci_get_table_details_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _OmniSci_get_table_details_args__isset;

class OmniSci_get_table_details_args {
 public:

  OmniSci_get_table_details_args(const OmniSci_get_table_details_args&);
  OmniSci_get_table_details_args& operator=(const OmniSci_get_table_details_args&);
  OmniSci_get_table_details_args() noexcept
                                 : session(),
                                   table_name() {
  }

  virtual ~OmniSci_get_table_details_args() noexcept;
  TSessionId session;
  std::string table_name;

  _OmniSci_get_table_details_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const OmniSci_get_table_details_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_details_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_details_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_table_details_pargs {
 public:


  virtual ~OmniSci_get_table_details_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_details_result__isset {
  _OmniSci_get_table_details_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_table_details_result__isset;

class OmniSci_get_table_details_result {
 public:

  OmniSci_get_table_details_result(const OmniSci_get_table_details_result&);
  OmniSci_get_table_details_result& operator=(const OmniSci_get_table_details_result&);
  OmniSci_get_table_details_result() noexcept {
  }

  virtual ~OmniSci_get_table_details_result() noexcept;
  TTableDetails success;
  TOmniSciException e;

  _OmniSci_get_table_details_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_table_details_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_details_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_details_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_details_presult__isset {
  _OmniSci_get_table_details_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_table_details_presult__isset;

class OmniSci_get_table_details_presult {
 public:


  virtual ~OmniSci_get_table_details_presult() noexcept;
  TTableDetails* success;
  TOmniSciException e;

  _OmniSci_get_table_details_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_table_details_for_database_args__isset {
  _OmniSci_get_table_details_for_database_args__isset() : session(false), table_name(false), database_name(false) {}
  bool session :1;
  bool table_name :1;
  bool database_name :1;
} _OmniSci_get_table_details_for_database_args__isset;

class OmniSci_get_table_details_for_database_args {
 public:

  OmniSci_get_table_details_for_database_args(const OmniSci_get_table_details_for_database_args&);
  OmniSci_get_table_details_for_database_args& operator=(const OmniSci_get_table_details_for_database_args&);
  OmniSci_get_table_details_for_database_args() noexcept
                                              : session(),
                                                table_name(),
                                                database_name() {
  }

  virtual ~OmniSci_get_table_details_for_database_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::string database_name;

  _OmniSci_get_table_details_for_database_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_database_name(const std::string& val);

  bool operator == (const OmniSci_get_table_details_for_database_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(database_name == rhs.database_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_details_for_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_details_for_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_table_details_for_database_pargs {
 public:


  virtual ~OmniSci_get_table_details_for_database_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::string* database_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_details_for_database_result__isset {
  _OmniSci_get_table_details_for_database_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_table_details_for_database_result__isset;

class OmniSci_get_table_details_for_database_result {
 public:

  OmniSci_get_table_details_for_database_result(const OmniSci_get_table_details_for_database_result&);
  OmniSci_get_table_details_for_database_result& operator=(const OmniSci_get_table_details_for_database_result&);
  OmniSci_get_table_details_for_database_result() noexcept {
  }

  virtual ~OmniSci_get_table_details_for_database_result() noexcept;
  TTableDetails success;
  TOmniSciException e;

  _OmniSci_get_table_details_for_database_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_table_details_for_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_details_for_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_details_for_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_details_for_database_presult__isset {
  _OmniSci_get_table_details_for_database_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_table_details_for_database_presult__isset;

class OmniSci_get_table_details_for_database_presult {
 public:


  virtual ~OmniSci_get_table_details_for_database_presult() noexcept;
  TTableDetails* success;
  TOmniSciException e;

  _OmniSci_get_table_details_for_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_internal_table_details_args__isset {
  _OmniSci_get_internal_table_details_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _OmniSci_get_internal_table_details_args__isset;

class OmniSci_get_internal_table_details_args {
 public:

  OmniSci_get_internal_table_details_args(const OmniSci_get_internal_table_details_args&);
  OmniSci_get_internal_table_details_args& operator=(const OmniSci_get_internal_table_details_args&);
  OmniSci_get_internal_table_details_args() noexcept
                                          : session(),
                                            table_name() {
  }

  virtual ~OmniSci_get_internal_table_details_args() noexcept;
  TSessionId session;
  std::string table_name;

  _OmniSci_get_internal_table_details_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const OmniSci_get_internal_table_details_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_internal_table_details_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_internal_table_details_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_internal_table_details_pargs {
 public:


  virtual ~OmniSci_get_internal_table_details_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_internal_table_details_result__isset {
  _OmniSci_get_internal_table_details_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_internal_table_details_result__isset;

class OmniSci_get_internal_table_details_result {
 public:

  OmniSci_get_internal_table_details_result(const OmniSci_get_internal_table_details_result&);
  OmniSci_get_internal_table_details_result& operator=(const OmniSci_get_internal_table_details_result&);
  OmniSci_get_internal_table_details_result() noexcept {
  }

  virtual ~OmniSci_get_internal_table_details_result() noexcept;
  TTableDetails success;
  TOmniSciException e;

  _OmniSci_get_internal_table_details_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_internal_table_details_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_internal_table_details_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_internal_table_details_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_internal_table_details_presult__isset {
  _OmniSci_get_internal_table_details_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_internal_table_details_presult__isset;

class OmniSci_get_internal_table_details_presult {
 public:


  virtual ~OmniSci_get_internal_table_details_presult() noexcept;
  TTableDetails* success;
  TOmniSciException e;

  _OmniSci_get_internal_table_details_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_internal_table_details_for_database_args__isset {
  _OmniSci_get_internal_table_details_for_database_args__isset() : session(false), table_name(false), database_name(false) {}
  bool session :1;
  bool table_name :1;
  bool database_name :1;
} _OmniSci_get_internal_table_details_for_database_args__isset;

class OmniSci_get_internal_table_details_for_database_args {
 public:

  OmniSci_get_internal_table_details_for_database_args(const OmniSci_get_internal_table_details_for_database_args&);
  OmniSci_get_internal_table_details_for_database_args& operator=(const OmniSci_get_internal_table_details_for_database_args&);
  OmniSci_get_internal_table_details_for_database_args() noexcept
                                                       : session(),
                                                         table_name(),
                                                         database_name() {
  }

  virtual ~OmniSci_get_internal_table_details_for_database_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::string database_name;

  _OmniSci_get_internal_table_details_for_database_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_database_name(const std::string& val);

  bool operator == (const OmniSci_get_internal_table_details_for_database_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(database_name == rhs.database_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_internal_table_details_for_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_internal_table_details_for_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_internal_table_details_for_database_pargs {
 public:


  virtual ~OmniSci_get_internal_table_details_for_database_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::string* database_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_internal_table_details_for_database_result__isset {
  _OmniSci_get_internal_table_details_for_database_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_internal_table_details_for_database_result__isset;

class OmniSci_get_internal_table_details_for_database_result {
 public:

  OmniSci_get_internal_table_details_for_database_result(const OmniSci_get_internal_table_details_for_database_result&);
  OmniSci_get_internal_table_details_for_database_result& operator=(const OmniSci_get_internal_table_details_for_database_result&);
  OmniSci_get_internal_table_details_for_database_result() noexcept {
  }

  virtual ~OmniSci_get_internal_table_details_for_database_result() noexcept;
  TTableDetails success;
  TOmniSciException e;

  _OmniSci_get_internal_table_details_for_database_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_internal_table_details_for_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_internal_table_details_for_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_internal_table_details_for_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_internal_table_details_for_database_presult__isset {
  _OmniSci_get_internal_table_details_for_database_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_internal_table_details_for_database_presult__isset;

class OmniSci_get_internal_table_details_for_database_presult {
 public:


  virtual ~OmniSci_get_internal_table_details_for_database_presult() noexcept;
  TTableDetails* success;
  TOmniSciException e;

  _OmniSci_get_internal_table_details_for_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_users_args__isset {
  _OmniSci_get_users_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_users_args__isset;

class OmniSci_get_users_args {
 public:

  OmniSci_get_users_args(const OmniSci_get_users_args&);
  OmniSci_get_users_args& operator=(const OmniSci_get_users_args&);
  OmniSci_get_users_args() noexcept
                         : session() {
  }

  virtual ~OmniSci_get_users_args() noexcept;
  TSessionId session;

  _OmniSci_get_users_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_users_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_users_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_users_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_users_pargs {
 public:


  virtual ~OmniSci_get_users_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_users_result__isset {
  _OmniSci_get_users_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_users_result__isset;

class OmniSci_get_users_result {
 public:

  OmniSci_get_users_result(const OmniSci_get_users_result&);
  OmniSci_get_users_result& operator=(const OmniSci_get_users_result&);
  OmniSci_get_users_result() noexcept {
  }

  virtual ~OmniSci_get_users_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_users_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_users_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_users_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_users_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_users_presult__isset {
  _OmniSci_get_users_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_users_presult__isset;

class OmniSci_get_users_presult {
 public:


  virtual ~OmniSci_get_users_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_users_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_databases_args__isset {
  _OmniSci_get_databases_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_databases_args__isset;

class OmniSci_get_databases_args {
 public:

  OmniSci_get_databases_args(const OmniSci_get_databases_args&);
  OmniSci_get_databases_args& operator=(const OmniSci_get_databases_args&);
  OmniSci_get_databases_args() noexcept
                             : session() {
  }

  virtual ~OmniSci_get_databases_args() noexcept;
  TSessionId session;

  _OmniSci_get_databases_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_databases_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_databases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_databases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_databases_pargs {
 public:


  virtual ~OmniSci_get_databases_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_databases_result__isset {
  _OmniSci_get_databases_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_databases_result__isset;

class OmniSci_get_databases_result {
 public:

  OmniSci_get_databases_result(const OmniSci_get_databases_result&);
  OmniSci_get_databases_result& operator=(const OmniSci_get_databases_result&);
  OmniSci_get_databases_result() noexcept {
  }

  virtual ~OmniSci_get_databases_result() noexcept;
  std::vector<TDBInfo>  success;
  TOmniSciException e;

  _OmniSci_get_databases_result__isset __isset;

  void __set_success(const std::vector<TDBInfo> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_databases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_databases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_databases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_databases_presult__isset {
  _OmniSci_get_databases_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_databases_presult__isset;

class OmniSci_get_databases_presult {
 public:


  virtual ~OmniSci_get_databases_presult() noexcept;
  std::vector<TDBInfo> * success;
  TOmniSciException e;

  _OmniSci_get_databases_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class OmniSci_get_version_args {
 public:

  OmniSci_get_version_args(const OmniSci_get_version_args&) noexcept;
  OmniSci_get_version_args& operator=(const OmniSci_get_version_args&) noexcept;
  OmniSci_get_version_args() noexcept {
  }

  virtual ~OmniSci_get_version_args() noexcept;

  bool operator == (const OmniSci_get_version_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OmniSci_get_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_version_pargs {
 public:


  virtual ~OmniSci_get_version_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_version_result__isset {
  _OmniSci_get_version_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_version_result__isset;

class OmniSci_get_version_result {
 public:

  OmniSci_get_version_result(const OmniSci_get_version_result&);
  OmniSci_get_version_result& operator=(const OmniSci_get_version_result&);
  OmniSci_get_version_result() noexcept
                             : success() {
  }

  virtual ~OmniSci_get_version_result() noexcept;
  std::string success;
  TOmniSciException e;

  _OmniSci_get_version_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_version_presult__isset {
  _OmniSci_get_version_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_version_presult__isset;

class OmniSci_get_version_presult {
 public:


  virtual ~OmniSci_get_version_presult() noexcept;
  std::string* success;
  TOmniSciException e;

  _OmniSci_get_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_start_heap_profile_args__isset {
  _OmniSci_start_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_start_heap_profile_args__isset;

class OmniSci_start_heap_profile_args {
 public:

  OmniSci_start_heap_profile_args(const OmniSci_start_heap_profile_args&);
  OmniSci_start_heap_profile_args& operator=(const OmniSci_start_heap_profile_args&);
  OmniSci_start_heap_profile_args() noexcept
                                  : session() {
  }

  virtual ~OmniSci_start_heap_profile_args() noexcept;
  TSessionId session;

  _OmniSci_start_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_start_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_start_heap_profile_pargs {
 public:


  virtual ~OmniSci_start_heap_profile_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_heap_profile_result__isset {
  _OmniSci_start_heap_profile_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_start_heap_profile_result__isset;

class OmniSci_start_heap_profile_result {
 public:

  OmniSci_start_heap_profile_result(const OmniSci_start_heap_profile_result&);
  OmniSci_start_heap_profile_result& operator=(const OmniSci_start_heap_profile_result&);
  OmniSci_start_heap_profile_result() noexcept {
  }

  virtual ~OmniSci_start_heap_profile_result() noexcept;
  TOmniSciException e;

  _OmniSci_start_heap_profile_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_start_heap_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_heap_profile_presult__isset {
  _OmniSci_start_heap_profile_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_start_heap_profile_presult__isset;

class OmniSci_start_heap_profile_presult {
 public:


  virtual ~OmniSci_start_heap_profile_presult() noexcept;
  TOmniSciException e;

  _OmniSci_start_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_stop_heap_profile_args__isset {
  _OmniSci_stop_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_stop_heap_profile_args__isset;

class OmniSci_stop_heap_profile_args {
 public:

  OmniSci_stop_heap_profile_args(const OmniSci_stop_heap_profile_args&);
  OmniSci_stop_heap_profile_args& operator=(const OmniSci_stop_heap_profile_args&);
  OmniSci_stop_heap_profile_args() noexcept
                                 : session() {
  }

  virtual ~OmniSci_stop_heap_profile_args() noexcept;
  TSessionId session;

  _OmniSci_stop_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_stop_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_stop_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_stop_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_stop_heap_profile_pargs {
 public:


  virtual ~OmniSci_stop_heap_profile_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_stop_heap_profile_result__isset {
  _OmniSci_stop_heap_profile_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_stop_heap_profile_result__isset;

class OmniSci_stop_heap_profile_result {
 public:

  OmniSci_stop_heap_profile_result(const OmniSci_stop_heap_profile_result&);
  OmniSci_stop_heap_profile_result& operator=(const OmniSci_stop_heap_profile_result&);
  OmniSci_stop_heap_profile_result() noexcept {
  }

  virtual ~OmniSci_stop_heap_profile_result() noexcept;
  TOmniSciException e;

  _OmniSci_stop_heap_profile_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_stop_heap_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_stop_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_stop_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_stop_heap_profile_presult__isset {
  _OmniSci_stop_heap_profile_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_stop_heap_profile_presult__isset;

class OmniSci_stop_heap_profile_presult {
 public:


  virtual ~OmniSci_stop_heap_profile_presult() noexcept;
  TOmniSciException e;

  _OmniSci_stop_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_heap_profile_args__isset {
  _OmniSci_get_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_heap_profile_args__isset;

class OmniSci_get_heap_profile_args {
 public:

  OmniSci_get_heap_profile_args(const OmniSci_get_heap_profile_args&);
  OmniSci_get_heap_profile_args& operator=(const OmniSci_get_heap_profile_args&);
  OmniSci_get_heap_profile_args() noexcept
                                : session() {
  }

  virtual ~OmniSci_get_heap_profile_args() noexcept;
  TSessionId session;

  _OmniSci_get_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_heap_profile_pargs {
 public:


  virtual ~OmniSci_get_heap_profile_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_heap_profile_result__isset {
  _OmniSci_get_heap_profile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_heap_profile_result__isset;

class OmniSci_get_heap_profile_result {
 public:

  OmniSci_get_heap_profile_result(const OmniSci_get_heap_profile_result&);
  OmniSci_get_heap_profile_result& operator=(const OmniSci_get_heap_profile_result&);
  OmniSci_get_heap_profile_result() noexcept
                                  : success() {
  }

  virtual ~OmniSci_get_heap_profile_result() noexcept;
  std::string success;
  TOmniSciException e;

  _OmniSci_get_heap_profile_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_heap_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_heap_profile_presult__isset {
  _OmniSci_get_heap_profile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_heap_profile_presult__isset;

class OmniSci_get_heap_profile_presult {
 public:


  virtual ~OmniSci_get_heap_profile_presult() noexcept;
  std::string* success;
  TOmniSciException e;

  _OmniSci_get_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_memory_args__isset {
  _OmniSci_get_memory_args__isset() : session(false), memory_level(false) {}
  bool session :1;
  bool memory_level :1;
} _OmniSci_get_memory_args__isset;

class OmniSci_get_memory_args {
 public:

  OmniSci_get_memory_args(const OmniSci_get_memory_args&);
  OmniSci_get_memory_args& operator=(const OmniSci_get_memory_args&);
  OmniSci_get_memory_args() noexcept
                          : session(),
                            memory_level() {
  }

  virtual ~OmniSci_get_memory_args() noexcept;
  TSessionId session;
  std::string memory_level;

  _OmniSci_get_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_memory_level(const std::string& val);

  bool operator == (const OmniSci_get_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(memory_level == rhs.memory_level))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_memory_pargs {
 public:


  virtual ~OmniSci_get_memory_pargs() noexcept;
  const TSessionId* session;
  const std::string* memory_level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_memory_result__isset {
  _OmniSci_get_memory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_memory_result__isset;

class OmniSci_get_memory_result {
 public:

  OmniSci_get_memory_result(const OmniSci_get_memory_result&);
  OmniSci_get_memory_result& operator=(const OmniSci_get_memory_result&);
  OmniSci_get_memory_result() noexcept {
  }

  virtual ~OmniSci_get_memory_result() noexcept;
  std::vector<TNodeMemoryInfo>  success;
  TOmniSciException e;

  _OmniSci_get_memory_result__isset __isset;

  void __set_success(const std::vector<TNodeMemoryInfo> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_memory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_memory_presult__isset {
  _OmniSci_get_memory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_memory_presult__isset;

class OmniSci_get_memory_presult {
 public:


  virtual ~OmniSci_get_memory_presult() noexcept;
  std::vector<TNodeMemoryInfo> * success;
  TOmniSciException e;

  _OmniSci_get_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_clear_cpu_memory_args__isset {
  _OmniSci_clear_cpu_memory_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_clear_cpu_memory_args__isset;

class OmniSci_clear_cpu_memory_args {
 public:

  OmniSci_clear_cpu_memory_args(const OmniSci_clear_cpu_memory_args&);
  OmniSci_clear_cpu_memory_args& operator=(const OmniSci_clear_cpu_memory_args&);
  OmniSci_clear_cpu_memory_args() noexcept
                                : session() {
  }

  virtual ~OmniSci_clear_cpu_memory_args() noexcept;
  TSessionId session;

  _OmniSci_clear_cpu_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_clear_cpu_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clear_cpu_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clear_cpu_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_clear_cpu_memory_pargs {
 public:


  virtual ~OmniSci_clear_cpu_memory_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clear_cpu_memory_result__isset {
  _OmniSci_clear_cpu_memory_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_clear_cpu_memory_result__isset;

class OmniSci_clear_cpu_memory_result {
 public:

  OmniSci_clear_cpu_memory_result(const OmniSci_clear_cpu_memory_result&);
  OmniSci_clear_cpu_memory_result& operator=(const OmniSci_clear_cpu_memory_result&);
  OmniSci_clear_cpu_memory_result() noexcept {
  }

  virtual ~OmniSci_clear_cpu_memory_result() noexcept;
  TOmniSciException e;

  _OmniSci_clear_cpu_memory_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_clear_cpu_memory_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clear_cpu_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clear_cpu_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clear_cpu_memory_presult__isset {
  _OmniSci_clear_cpu_memory_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_clear_cpu_memory_presult__isset;

class OmniSci_clear_cpu_memory_presult {
 public:


  virtual ~OmniSci_clear_cpu_memory_presult() noexcept;
  TOmniSciException e;

  _OmniSci_clear_cpu_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_clear_gpu_memory_args__isset {
  _OmniSci_clear_gpu_memory_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_clear_gpu_memory_args__isset;

class OmniSci_clear_gpu_memory_args {
 public:

  OmniSci_clear_gpu_memory_args(const OmniSci_clear_gpu_memory_args&);
  OmniSci_clear_gpu_memory_args& operator=(const OmniSci_clear_gpu_memory_args&);
  OmniSci_clear_gpu_memory_args() noexcept
                                : session() {
  }

  virtual ~OmniSci_clear_gpu_memory_args() noexcept;
  TSessionId session;

  _OmniSci_clear_gpu_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_clear_gpu_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clear_gpu_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clear_gpu_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_clear_gpu_memory_pargs {
 public:


  virtual ~OmniSci_clear_gpu_memory_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clear_gpu_memory_result__isset {
  _OmniSci_clear_gpu_memory_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_clear_gpu_memory_result__isset;

class OmniSci_clear_gpu_memory_result {
 public:

  OmniSci_clear_gpu_memory_result(const OmniSci_clear_gpu_memory_result&);
  OmniSci_clear_gpu_memory_result& operator=(const OmniSci_clear_gpu_memory_result&);
  OmniSci_clear_gpu_memory_result() noexcept {
  }

  virtual ~OmniSci_clear_gpu_memory_result() noexcept;
  TOmniSciException e;

  _OmniSci_clear_gpu_memory_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_clear_gpu_memory_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_clear_gpu_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_clear_gpu_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_clear_gpu_memory_presult__isset {
  _OmniSci_clear_gpu_memory_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_clear_gpu_memory_presult__isset;

class OmniSci_clear_gpu_memory_presult {
 public:


  virtual ~OmniSci_clear_gpu_memory_presult() noexcept;
  TOmniSciException e;

  _OmniSci_clear_gpu_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_cur_session_args__isset {
  _OmniSci_set_cur_session_args__isset() : parent_session(false), leaf_session(false), start_time_str(false), label(false) {}
  bool parent_session :1;
  bool leaf_session :1;
  bool start_time_str :1;
  bool label :1;
} _OmniSci_set_cur_session_args__isset;

class OmniSci_set_cur_session_args {
 public:

  OmniSci_set_cur_session_args(const OmniSci_set_cur_session_args&);
  OmniSci_set_cur_session_args& operator=(const OmniSci_set_cur_session_args&);
  OmniSci_set_cur_session_args() noexcept
                               : parent_session(),
                                 leaf_session(),
                                 start_time_str(),
                                 label() {
  }

  virtual ~OmniSci_set_cur_session_args() noexcept;
  TSessionId parent_session;
  TSessionId leaf_session;
  std::string start_time_str;
  std::string label;

  _OmniSci_set_cur_session_args__isset __isset;

  void __set_parent_session(const TSessionId& val);

  void __set_leaf_session(const TSessionId& val);

  void __set_start_time_str(const std::string& val);

  void __set_label(const std::string& val);

  bool operator == (const OmniSci_set_cur_session_args & rhs) const
  {
    if (!(parent_session == rhs.parent_session))
      return false;
    if (!(leaf_session == rhs.leaf_session))
      return false;
    if (!(start_time_str == rhs.start_time_str))
      return false;
    if (!(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_cur_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_cur_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_cur_session_pargs {
 public:


  virtual ~OmniSci_set_cur_session_pargs() noexcept;
  const TSessionId* parent_session;
  const TSessionId* leaf_session;
  const std::string* start_time_str;
  const std::string* label;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_cur_session_result__isset {
  _OmniSci_set_cur_session_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_cur_session_result__isset;

class OmniSci_set_cur_session_result {
 public:

  OmniSci_set_cur_session_result(const OmniSci_set_cur_session_result&);
  OmniSci_set_cur_session_result& operator=(const OmniSci_set_cur_session_result&);
  OmniSci_set_cur_session_result() noexcept {
  }

  virtual ~OmniSci_set_cur_session_result() noexcept;
  TOmniSciException e;

  _OmniSci_set_cur_session_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_set_cur_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_cur_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_cur_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_cur_session_presult__isset {
  _OmniSci_set_cur_session_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_cur_session_presult__isset;

class OmniSci_set_cur_session_presult {
 public:


  virtual ~OmniSci_set_cur_session_presult() noexcept;
  TOmniSciException e;

  _OmniSci_set_cur_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_invalidate_cur_session_args__isset {
  _OmniSci_invalidate_cur_session_args__isset() : parent_session(false), leaf_session(false), start_time_str(false), label(false) {}
  bool parent_session :1;
  bool leaf_session :1;
  bool start_time_str :1;
  bool label :1;
} _OmniSci_invalidate_cur_session_args__isset;

class OmniSci_invalidate_cur_session_args {
 public:

  OmniSci_invalidate_cur_session_args(const OmniSci_invalidate_cur_session_args&);
  OmniSci_invalidate_cur_session_args& operator=(const OmniSci_invalidate_cur_session_args&);
  OmniSci_invalidate_cur_session_args() noexcept
                                      : parent_session(),
                                        leaf_session(),
                                        start_time_str(),
                                        label() {
  }

  virtual ~OmniSci_invalidate_cur_session_args() noexcept;
  TSessionId parent_session;
  TSessionId leaf_session;
  std::string start_time_str;
  std::string label;

  _OmniSci_invalidate_cur_session_args__isset __isset;

  void __set_parent_session(const TSessionId& val);

  void __set_leaf_session(const TSessionId& val);

  void __set_start_time_str(const std::string& val);

  void __set_label(const std::string& val);

  bool operator == (const OmniSci_invalidate_cur_session_args & rhs) const
  {
    if (!(parent_session == rhs.parent_session))
      return false;
    if (!(leaf_session == rhs.leaf_session))
      return false;
    if (!(start_time_str == rhs.start_time_str))
      return false;
    if (!(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const OmniSci_invalidate_cur_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_invalidate_cur_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_invalidate_cur_session_pargs {
 public:


  virtual ~OmniSci_invalidate_cur_session_pargs() noexcept;
  const TSessionId* parent_session;
  const TSessionId* leaf_session;
  const std::string* start_time_str;
  const std::string* label;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_invalidate_cur_session_result__isset {
  _OmniSci_invalidate_cur_session_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_invalidate_cur_session_result__isset;

class OmniSci_invalidate_cur_session_result {
 public:

  OmniSci_invalidate_cur_session_result(const OmniSci_invalidate_cur_session_result&);
  OmniSci_invalidate_cur_session_result& operator=(const OmniSci_invalidate_cur_session_result&);
  OmniSci_invalidate_cur_session_result() noexcept {
  }

  virtual ~OmniSci_invalidate_cur_session_result() noexcept;
  TOmniSciException e;

  _OmniSci_invalidate_cur_session_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_invalidate_cur_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_invalidate_cur_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_invalidate_cur_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_invalidate_cur_session_presult__isset {
  _OmniSci_invalidate_cur_session_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_invalidate_cur_session_presult__isset;

class OmniSci_invalidate_cur_session_presult {
 public:


  virtual ~OmniSci_invalidate_cur_session_presult() noexcept;
  TOmniSciException e;

  _OmniSci_invalidate_cur_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_table_epoch_args__isset {
  _OmniSci_set_table_epoch_args__isset() : session(false), db_id(false), table_id(false), new_epoch(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
  bool new_epoch :1;
} _OmniSci_set_table_epoch_args__isset;

class OmniSci_set_table_epoch_args {
 public:

  OmniSci_set_table_epoch_args(const OmniSci_set_table_epoch_args&);
  OmniSci_set_table_epoch_args& operator=(const OmniSci_set_table_epoch_args&);
  OmniSci_set_table_epoch_args() noexcept
                               : session(),
                                 db_id(0),
                                 table_id(0),
                                 new_epoch(0) {
  }

  virtual ~OmniSci_set_table_epoch_args() noexcept;
  TSessionId session;
  int32_t db_id;
  int32_t table_id;
  int32_t new_epoch;

  _OmniSci_set_table_epoch_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  void __set_new_epoch(const int32_t val);

  bool operator == (const OmniSci_set_table_epoch_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    if (!(new_epoch == rhs.new_epoch))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_table_epoch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epoch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_table_epoch_pargs {
 public:


  virtual ~OmniSci_set_table_epoch_pargs() noexcept;
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;
  const int32_t* new_epoch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_table_epoch_result__isset {
  _OmniSci_set_table_epoch_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_table_epoch_result__isset;

class OmniSci_set_table_epoch_result {
 public:

  OmniSci_set_table_epoch_result(const OmniSci_set_table_epoch_result&);
  OmniSci_set_table_epoch_result& operator=(const OmniSci_set_table_epoch_result&);
  OmniSci_set_table_epoch_result() noexcept {
  }

  virtual ~OmniSci_set_table_epoch_result() noexcept;
  TOmniSciException e;

  _OmniSci_set_table_epoch_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_set_table_epoch_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_table_epoch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epoch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_table_epoch_presult__isset {
  _OmniSci_set_table_epoch_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_table_epoch_presult__isset;

class OmniSci_set_table_epoch_presult {
 public:


  virtual ~OmniSci_set_table_epoch_presult() noexcept;
  TOmniSciException e;

  _OmniSci_set_table_epoch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_table_epoch_by_name_args__isset {
  _OmniSci_set_table_epoch_by_name_args__isset() : session(false), table_name(false), new_epoch(false) {}
  bool session :1;
  bool table_name :1;
  bool new_epoch :1;
} _OmniSci_set_table_epoch_by_name_args__isset;

class OmniSci_set_table_epoch_by_name_args {
 public:

  OmniSci_set_table_epoch_by_name_args(const OmniSci_set_table_epoch_by_name_args&);
  OmniSci_set_table_epoch_by_name_args& operator=(const OmniSci_set_table_epoch_by_name_args&);
  OmniSci_set_table_epoch_by_name_args() noexcept
                                       : session(),
                                         table_name(),
                                         new_epoch(0) {
  }

  virtual ~OmniSci_set_table_epoch_by_name_args() noexcept;
  TSessionId session;
  std::string table_name;
  int32_t new_epoch;

  _OmniSci_set_table_epoch_by_name_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_new_epoch(const int32_t val);

  bool operator == (const OmniSci_set_table_epoch_by_name_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(new_epoch == rhs.new_epoch))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_table_epoch_by_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epoch_by_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_table_epoch_by_name_pargs {
 public:


  virtual ~OmniSci_set_table_epoch_by_name_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const int32_t* new_epoch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_table_epoch_by_name_result__isset {
  _OmniSci_set_table_epoch_by_name_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_table_epoch_by_name_result__isset;

class OmniSci_set_table_epoch_by_name_result {
 public:

  OmniSci_set_table_epoch_by_name_result(const OmniSci_set_table_epoch_by_name_result&);
  OmniSci_set_table_epoch_by_name_result& operator=(const OmniSci_set_table_epoch_by_name_result&);
  OmniSci_set_table_epoch_by_name_result() noexcept {
  }

  virtual ~OmniSci_set_table_epoch_by_name_result() noexcept;
  TOmniSciException e;

  _OmniSci_set_table_epoch_by_name_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_set_table_epoch_by_name_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_table_epoch_by_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epoch_by_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_table_epoch_by_name_presult__isset {
  _OmniSci_set_table_epoch_by_name_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_table_epoch_by_name_presult__isset;

class OmniSci_set_table_epoch_by_name_presult {
 public:


  virtual ~OmniSci_set_table_epoch_by_name_presult() noexcept;
  TOmniSciException e;

  _OmniSci_set_table_epoch_by_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_table_epoch_args__isset {
  _OmniSci_get_table_epoch_args__isset() : session(false), db_id(false), table_id(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
} _OmniSci_get_table_epoch_args__isset;

class OmniSci_get_table_epoch_args {
 public:

  OmniSci_get_table_epoch_args(const OmniSci_get_table_epoch_args&);
  OmniSci_get_table_epoch_args& operator=(const OmniSci_get_table_epoch_args&);
  OmniSci_get_table_epoch_args() noexcept
                               : session(),
                                 db_id(0),
                                 table_id(0) {
  }

  virtual ~OmniSci_get_table_epoch_args() noexcept;
  TSessionId session;
  int32_t db_id;
  int32_t table_id;

  _OmniSci_get_table_epoch_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  bool operator == (const OmniSci_get_table_epoch_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epoch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epoch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_table_epoch_pargs {
 public:


  virtual ~OmniSci_get_table_epoch_pargs() noexcept;
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epoch_result__isset {
  _OmniSci_get_table_epoch_result__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epoch_result__isset;

class OmniSci_get_table_epoch_result {
 public:

  OmniSci_get_table_epoch_result(const OmniSci_get_table_epoch_result&) noexcept;
  OmniSci_get_table_epoch_result& operator=(const OmniSci_get_table_epoch_result&) noexcept;
  OmniSci_get_table_epoch_result() noexcept
                                 : success(0) {
  }

  virtual ~OmniSci_get_table_epoch_result() noexcept;
  int32_t success;

  _OmniSci_get_table_epoch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const OmniSci_get_table_epoch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epoch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epoch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epoch_presult__isset {
  _OmniSci_get_table_epoch_presult__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epoch_presult__isset;

class OmniSci_get_table_epoch_presult {
 public:


  virtual ~OmniSci_get_table_epoch_presult() noexcept;
  int32_t* success;

  _OmniSci_get_table_epoch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_table_epoch_by_name_args__isset {
  _OmniSci_get_table_epoch_by_name_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _OmniSci_get_table_epoch_by_name_args__isset;

class OmniSci_get_table_epoch_by_name_args {
 public:

  OmniSci_get_table_epoch_by_name_args(const OmniSci_get_table_epoch_by_name_args&);
  OmniSci_get_table_epoch_by_name_args& operator=(const OmniSci_get_table_epoch_by_name_args&);
  OmniSci_get_table_epoch_by_name_args() noexcept
                                       : session(),
                                         table_name() {
  }

  virtual ~OmniSci_get_table_epoch_by_name_args() noexcept;
  TSessionId session;
  std::string table_name;

  _OmniSci_get_table_epoch_by_name_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const OmniSci_get_table_epoch_by_name_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epoch_by_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epoch_by_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_table_epoch_by_name_pargs {
 public:


  virtual ~OmniSci_get_table_epoch_by_name_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epoch_by_name_result__isset {
  _OmniSci_get_table_epoch_by_name_result__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epoch_by_name_result__isset;

class OmniSci_get_table_epoch_by_name_result {
 public:

  OmniSci_get_table_epoch_by_name_result(const OmniSci_get_table_epoch_by_name_result&) noexcept;
  OmniSci_get_table_epoch_by_name_result& operator=(const OmniSci_get_table_epoch_by_name_result&) noexcept;
  OmniSci_get_table_epoch_by_name_result() noexcept
                                         : success(0) {
  }

  virtual ~OmniSci_get_table_epoch_by_name_result() noexcept;
  int32_t success;

  _OmniSci_get_table_epoch_by_name_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const OmniSci_get_table_epoch_by_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epoch_by_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epoch_by_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epoch_by_name_presult__isset {
  _OmniSci_get_table_epoch_by_name_presult__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epoch_by_name_presult__isset;

class OmniSci_get_table_epoch_by_name_presult {
 public:


  virtual ~OmniSci_get_table_epoch_by_name_presult() noexcept;
  int32_t* success;

  _OmniSci_get_table_epoch_by_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_table_epochs_args__isset {
  _OmniSci_get_table_epochs_args__isset() : session(false), db_id(false), table_id(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
} _OmniSci_get_table_epochs_args__isset;

class OmniSci_get_table_epochs_args {
 public:

  OmniSci_get_table_epochs_args(const OmniSci_get_table_epochs_args&);
  OmniSci_get_table_epochs_args& operator=(const OmniSci_get_table_epochs_args&);
  OmniSci_get_table_epochs_args() noexcept
                                : session(),
                                  db_id(0),
                                  table_id(0) {
  }

  virtual ~OmniSci_get_table_epochs_args() noexcept;
  TSessionId session;
  int32_t db_id;
  int32_t table_id;

  _OmniSci_get_table_epochs_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  bool operator == (const OmniSci_get_table_epochs_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epochs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epochs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_table_epochs_pargs {
 public:


  virtual ~OmniSci_get_table_epochs_pargs() noexcept;
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epochs_result__isset {
  _OmniSci_get_table_epochs_result__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epochs_result__isset;

class OmniSci_get_table_epochs_result {
 public:

  OmniSci_get_table_epochs_result(const OmniSci_get_table_epochs_result&);
  OmniSci_get_table_epochs_result& operator=(const OmniSci_get_table_epochs_result&);
  OmniSci_get_table_epochs_result() noexcept {
  }

  virtual ~OmniSci_get_table_epochs_result() noexcept;
  std::vector<TTableEpochInfo>  success;

  _OmniSci_get_table_epochs_result__isset __isset;

  void __set_success(const std::vector<TTableEpochInfo> & val);

  bool operator == (const OmniSci_get_table_epochs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_table_epochs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_table_epochs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_table_epochs_presult__isset {
  _OmniSci_get_table_epochs_presult__isset() : success(false) {}
  bool success :1;
} _OmniSci_get_table_epochs_presult__isset;

class OmniSci_get_table_epochs_presult {
 public:


  virtual ~OmniSci_get_table_epochs_presult() noexcept;
  std::vector<TTableEpochInfo> * success;

  _OmniSci_get_table_epochs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_table_epochs_args__isset {
  _OmniSci_set_table_epochs_args__isset() : session(false), db_id(false), table_epochs(false) {}
  bool session :1;
  bool db_id :1;
  bool table_epochs :1;
} _OmniSci_set_table_epochs_args__isset;

class OmniSci_set_table_epochs_args {
 public:

  OmniSci_set_table_epochs_args(const OmniSci_set_table_epochs_args&);
  OmniSci_set_table_epochs_args& operator=(const OmniSci_set_table_epochs_args&);
  OmniSci_set_table_epochs_args() noexcept
                                : session(),
                                  db_id(0) {
  }

  virtual ~OmniSci_set_table_epochs_args() noexcept;
  TSessionId session;
  int32_t db_id;
  std::vector<TTableEpochInfo>  table_epochs;

  _OmniSci_set_table_epochs_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_epochs(const std::vector<TTableEpochInfo> & val);

  bool operator == (const OmniSci_set_table_epochs_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_epochs == rhs.table_epochs))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_table_epochs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epochs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_table_epochs_pargs {
 public:


  virtual ~OmniSci_set_table_epochs_pargs() noexcept;
  const TSessionId* session;
  const int32_t* db_id;
  const std::vector<TTableEpochInfo> * table_epochs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_table_epochs_result {
 public:

  OmniSci_set_table_epochs_result(const OmniSci_set_table_epochs_result&) noexcept;
  OmniSci_set_table_epochs_result& operator=(const OmniSci_set_table_epochs_result&) noexcept;
  OmniSci_set_table_epochs_result() noexcept {
  }

  virtual ~OmniSci_set_table_epochs_result() noexcept;

  bool operator == (const OmniSci_set_table_epochs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OmniSci_set_table_epochs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_table_epochs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_table_epochs_presult {
 public:


  virtual ~OmniSci_set_table_epochs_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_session_info_args__isset {
  _OmniSci_get_session_info_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_session_info_args__isset;

class OmniSci_get_session_info_args {
 public:

  OmniSci_get_session_info_args(const OmniSci_get_session_info_args&);
  OmniSci_get_session_info_args& operator=(const OmniSci_get_session_info_args&);
  OmniSci_get_session_info_args() noexcept
                                : session() {
  }

  virtual ~OmniSci_get_session_info_args() noexcept;
  TSessionId session;

  _OmniSci_get_session_info_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_session_info_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_session_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_session_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_session_info_pargs {
 public:


  virtual ~OmniSci_get_session_info_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_session_info_result__isset {
  _OmniSci_get_session_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_session_info_result__isset;

class OmniSci_get_session_info_result {
 public:

  OmniSci_get_session_info_result(const OmniSci_get_session_info_result&);
  OmniSci_get_session_info_result& operator=(const OmniSci_get_session_info_result&);
  OmniSci_get_session_info_result() noexcept {
  }

  virtual ~OmniSci_get_session_info_result() noexcept;
  TSessionInfo success;
  TOmniSciException e;

  _OmniSci_get_session_info_result__isset __isset;

  void __set_success(const TSessionInfo& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_session_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_session_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_session_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_session_info_presult__isset {
  _OmniSci_get_session_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_session_info_presult__isset;

class OmniSci_get_session_info_presult {
 public:


  virtual ~OmniSci_get_session_info_presult() noexcept;
  TSessionInfo* success;
  TOmniSciException e;

  _OmniSci_get_session_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_sql_execute_args__isset {
  _OmniSci_sql_execute_args__isset() : session(false), query(false), column_format(false), nonce(false), first_n(true), at_most_n(true) {}
  bool session :1;
  bool query :1;
  bool column_format :1;
  bool nonce :1;
  bool first_n :1;
  bool at_most_n :1;
} _OmniSci_sql_execute_args__isset;

class OmniSci_sql_execute_args {
 public:

  OmniSci_sql_execute_args(const OmniSci_sql_execute_args&);
  OmniSci_sql_execute_args& operator=(const OmniSci_sql_execute_args&);
  OmniSci_sql_execute_args() noexcept
                           : session(),
                             query(),
                             column_format(0),
                             nonce(),
                             first_n(-1),
                             at_most_n(-1) {
  }

  virtual ~OmniSci_sql_execute_args() noexcept;
  TSessionId session;
  std::string query;
  bool column_format;
  std::string nonce;
  int32_t first_n;
  int32_t at_most_n;

  _OmniSci_sql_execute_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_column_format(const bool val);

  void __set_nonce(const std::string& val);

  void __set_first_n(const int32_t val);

  void __set_at_most_n(const int32_t val);

  bool operator == (const OmniSci_sql_execute_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(column_format == rhs.column_format))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    if (!(at_most_n == rhs.at_most_n))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_sql_execute_pargs {
 public:


  virtual ~OmniSci_sql_execute_pargs() noexcept;
  const TSessionId* session;
  const std::string* query;
  const bool* column_format;
  const std::string* nonce;
  const int32_t* first_n;
  const int32_t* at_most_n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_result__isset {
  _OmniSci_sql_execute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_result__isset;

class OmniSci_sql_execute_result {
 public:

  OmniSci_sql_execute_result(const OmniSci_sql_execute_result&);
  OmniSci_sql_execute_result& operator=(const OmniSci_sql_execute_result&);
  OmniSci_sql_execute_result() noexcept {
  }

  virtual ~OmniSci_sql_execute_result() noexcept;
  TQueryResult success;
  TOmniSciException e;

  _OmniSci_sql_execute_result__isset __isset;

  void __set_success(const TQueryResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_sql_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_presult__isset {
  _OmniSci_sql_execute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_presult__isset;

class OmniSci_sql_execute_presult {
 public:


  virtual ~OmniSci_sql_execute_presult() noexcept;
  TQueryResult* success;
  TOmniSciException e;

  _OmniSci_sql_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_sql_execute_df_args__isset {
  _OmniSci_sql_execute_df_args__isset() : session(false), query(false), device_type(false), device_id(true), first_n(true), transport_method(false) {}
  bool session :1;
  bool query :1;
  bool device_type :1;
  bool device_id :1;
  bool first_n :1;
  bool transport_method :1;
} _OmniSci_sql_execute_df_args__isset;

class OmniSci_sql_execute_df_args {
 public:

  OmniSci_sql_execute_df_args(const OmniSci_sql_execute_df_args&);
  OmniSci_sql_execute_df_args& operator=(const OmniSci_sql_execute_df_args&);
  OmniSci_sql_execute_df_args() noexcept
                              : session(),
                                query(),
                                device_type(static_cast< ::TDeviceType::type>(0)),
                                device_id(0),
                                first_n(-1),
                                transport_method(static_cast<TArrowTransport::type>(0)) {
  }

  virtual ~OmniSci_sql_execute_df_args() noexcept;
  TSessionId session;
  std::string query;
  /**
   * 
   * @see com.omnisci.thrift.server.TDeviceType
   */
   ::TDeviceType::type device_type;
  int32_t device_id;
  int32_t first_n;
  /**
   * 
   * @see TArrowTransport
   */
  TArrowTransport::type transport_method;

  _OmniSci_sql_execute_df_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_device_type(const  ::TDeviceType::type val);

  void __set_device_id(const int32_t val);

  void __set_first_n(const int32_t val);

  void __set_transport_method(const TArrowTransport::type val);

  bool operator == (const OmniSci_sql_execute_df_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    if (!(transport_method == rhs.transport_method))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_df_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_df_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_sql_execute_df_pargs {
 public:


  virtual ~OmniSci_sql_execute_df_pargs() noexcept;
  const TSessionId* session;
  const std::string* query;
  /**
   * 
   * @see com.omnisci.thrift.server.TDeviceType
   */
  const  ::TDeviceType::type* device_type;
  const int32_t* device_id;
  const int32_t* first_n;
  /**
   * 
   * @see TArrowTransport
   */
  const TArrowTransport::type* transport_method;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_df_result__isset {
  _OmniSci_sql_execute_df_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_df_result__isset;

class OmniSci_sql_execute_df_result {
 public:

  OmniSci_sql_execute_df_result(const OmniSci_sql_execute_df_result&);
  OmniSci_sql_execute_df_result& operator=(const OmniSci_sql_execute_df_result&);
  OmniSci_sql_execute_df_result() noexcept {
  }

  virtual ~OmniSci_sql_execute_df_result() noexcept;
  TDataFrame success;
  TOmniSciException e;

  _OmniSci_sql_execute_df_result__isset __isset;

  void __set_success(const TDataFrame& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_sql_execute_df_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_df_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_df_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_df_presult__isset {
  _OmniSci_sql_execute_df_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_df_presult__isset;

class OmniSci_sql_execute_df_presult {
 public:


  virtual ~OmniSci_sql_execute_df_presult() noexcept;
  TDataFrame* success;
  TOmniSciException e;

  _OmniSci_sql_execute_df_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_sql_execute_gdf_args__isset {
  _OmniSci_sql_execute_gdf_args__isset() : session(false), query(false), device_id(true), first_n(true) {}
  bool session :1;
  bool query :1;
  bool device_id :1;
  bool first_n :1;
} _OmniSci_sql_execute_gdf_args__isset;

class OmniSci_sql_execute_gdf_args {
 public:

  OmniSci_sql_execute_gdf_args(const OmniSci_sql_execute_gdf_args&);
  OmniSci_sql_execute_gdf_args& operator=(const OmniSci_sql_execute_gdf_args&);
  OmniSci_sql_execute_gdf_args() noexcept
                               : session(),
                                 query(),
                                 device_id(0),
                                 first_n(-1) {
  }

  virtual ~OmniSci_sql_execute_gdf_args() noexcept;
  TSessionId session;
  std::string query;
  int32_t device_id;
  int32_t first_n;

  _OmniSci_sql_execute_gdf_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_device_id(const int32_t val);

  void __set_first_n(const int32_t val);

  bool operator == (const OmniSci_sql_execute_gdf_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_gdf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_gdf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_sql_execute_gdf_pargs {
 public:


  virtual ~OmniSci_sql_execute_gdf_pargs() noexcept;
  const TSessionId* session;
  const std::string* query;
  const int32_t* device_id;
  const int32_t* first_n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_gdf_result__isset {
  _OmniSci_sql_execute_gdf_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_gdf_result__isset;

class OmniSci_sql_execute_gdf_result {
 public:

  OmniSci_sql_execute_gdf_result(const OmniSci_sql_execute_gdf_result&);
  OmniSci_sql_execute_gdf_result& operator=(const OmniSci_sql_execute_gdf_result&);
  OmniSci_sql_execute_gdf_result() noexcept {
  }

  virtual ~OmniSci_sql_execute_gdf_result() noexcept;
  TDataFrame success;
  TOmniSciException e;

  _OmniSci_sql_execute_gdf_result__isset __isset;

  void __set_success(const TDataFrame& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_sql_execute_gdf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_execute_gdf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_execute_gdf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_execute_gdf_presult__isset {
  _OmniSci_sql_execute_gdf_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_execute_gdf_presult__isset;

class OmniSci_sql_execute_gdf_presult {
 public:


  virtual ~OmniSci_sql_execute_gdf_presult() noexcept;
  TDataFrame* success;
  TOmniSciException e;

  _OmniSci_sql_execute_gdf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_deallocate_df_args__isset {
  _OmniSci_deallocate_df_args__isset() : session(false), df(false), device_type(false), device_id(true) {}
  bool session :1;
  bool df :1;
  bool device_type :1;
  bool device_id :1;
} _OmniSci_deallocate_df_args__isset;

class OmniSci_deallocate_df_args {
 public:

  OmniSci_deallocate_df_args(const OmniSci_deallocate_df_args&);
  OmniSci_deallocate_df_args& operator=(const OmniSci_deallocate_df_args&);
  OmniSci_deallocate_df_args() noexcept
                             : session(),
                               device_type(static_cast< ::TDeviceType::type>(0)),
                               device_id(0) {
  }

  virtual ~OmniSci_deallocate_df_args() noexcept;
  TSessionId session;
  TDataFrame df;
  /**
   * 
   * @see com.omnisci.thrift.server.TDeviceType
   */
   ::TDeviceType::type device_type;
  int32_t device_id;

  _OmniSci_deallocate_df_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_df(const TDataFrame& val);

  void __set_device_type(const  ::TDeviceType::type val);

  void __set_device_id(const int32_t val);

  bool operator == (const OmniSci_deallocate_df_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(df == rhs.df))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_deallocate_df_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_deallocate_df_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_deallocate_df_pargs {
 public:


  virtual ~OmniSci_deallocate_df_pargs() noexcept;
  const TSessionId* session;
  const TDataFrame* df;
  /**
   * 
   * @see com.omnisci.thrift.server.TDeviceType
   */
  const  ::TDeviceType::type* device_type;
  const int32_t* device_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_deallocate_df_result__isset {
  _OmniSci_deallocate_df_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_deallocate_df_result__isset;

class OmniSci_deallocate_df_result {
 public:

  OmniSci_deallocate_df_result(const OmniSci_deallocate_df_result&);
  OmniSci_deallocate_df_result& operator=(const OmniSci_deallocate_df_result&);
  OmniSci_deallocate_df_result() noexcept {
  }

  virtual ~OmniSci_deallocate_df_result() noexcept;
  TOmniSciException e;

  _OmniSci_deallocate_df_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_deallocate_df_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_deallocate_df_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_deallocate_df_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_deallocate_df_presult__isset {
  _OmniSci_deallocate_df_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_deallocate_df_presult__isset;

class OmniSci_deallocate_df_presult {
 public:


  virtual ~OmniSci_deallocate_df_presult() noexcept;
  TOmniSciException e;

  _OmniSci_deallocate_df_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_interrupt_args__isset {
  _OmniSci_interrupt_args__isset() : query_session(false), interrupt_session(false) {}
  bool query_session :1;
  bool interrupt_session :1;
} _OmniSci_interrupt_args__isset;

class OmniSci_interrupt_args {
 public:

  OmniSci_interrupt_args(const OmniSci_interrupt_args&);
  OmniSci_interrupt_args& operator=(const OmniSci_interrupt_args&);
  OmniSci_interrupt_args() noexcept
                         : query_session(),
                           interrupt_session() {
  }

  virtual ~OmniSci_interrupt_args() noexcept;
  TSessionId query_session;
  TSessionId interrupt_session;

  _OmniSci_interrupt_args__isset __isset;

  void __set_query_session(const TSessionId& val);

  void __set_interrupt_session(const TSessionId& val);

  bool operator == (const OmniSci_interrupt_args & rhs) const
  {
    if (!(query_session == rhs.query_session))
      return false;
    if (!(interrupt_session == rhs.interrupt_session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_interrupt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_interrupt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_interrupt_pargs {
 public:


  virtual ~OmniSci_interrupt_pargs() noexcept;
  const TSessionId* query_session;
  const TSessionId* interrupt_session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_interrupt_result__isset {
  _OmniSci_interrupt_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_interrupt_result__isset;

class OmniSci_interrupt_result {
 public:

  OmniSci_interrupt_result(const OmniSci_interrupt_result&);
  OmniSci_interrupt_result& operator=(const OmniSci_interrupt_result&);
  OmniSci_interrupt_result() noexcept {
  }

  virtual ~OmniSci_interrupt_result() noexcept;
  TOmniSciException e;

  _OmniSci_interrupt_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_interrupt_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_interrupt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_interrupt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_interrupt_presult__isset {
  _OmniSci_interrupt_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_interrupt_presult__isset;

class OmniSci_interrupt_presult {
 public:


  virtual ~OmniSci_interrupt_presult() noexcept;
  TOmniSciException e;

  _OmniSci_interrupt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_sql_validate_args__isset {
  _OmniSci_sql_validate_args__isset() : session(false), query(false) {}
  bool session :1;
  bool query :1;
} _OmniSci_sql_validate_args__isset;

class OmniSci_sql_validate_args {
 public:

  OmniSci_sql_validate_args(const OmniSci_sql_validate_args&);
  OmniSci_sql_validate_args& operator=(const OmniSci_sql_validate_args&);
  OmniSci_sql_validate_args() noexcept
                            : session(),
                              query() {
  }

  virtual ~OmniSci_sql_validate_args() noexcept;
  TSessionId session;
  std::string query;

  _OmniSci_sql_validate_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  bool operator == (const OmniSci_sql_validate_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_validate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_validate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_sql_validate_pargs {
 public:


  virtual ~OmniSci_sql_validate_pargs() noexcept;
  const TSessionId* session;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_validate_result__isset {
  _OmniSci_sql_validate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_validate_result__isset;

class OmniSci_sql_validate_result {
 public:

  OmniSci_sql_validate_result(const OmniSci_sql_validate_result&);
  OmniSci_sql_validate_result& operator=(const OmniSci_sql_validate_result&);
  OmniSci_sql_validate_result() noexcept {
  }

  virtual ~OmniSci_sql_validate_result() noexcept;
  TRowDescriptor success;
  TOmniSciException e;

  _OmniSci_sql_validate_result__isset __isset;

  void __set_success(const TRowDescriptor& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_sql_validate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_sql_validate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_sql_validate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_sql_validate_presult__isset {
  _OmniSci_sql_validate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_sql_validate_presult__isset;

class OmniSci_sql_validate_presult {
 public:


  virtual ~OmniSci_sql_validate_presult() noexcept;
  TRowDescriptor* success;
  TOmniSciException e;

  _OmniSci_sql_validate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_completion_hints_args__isset {
  _OmniSci_get_completion_hints_args__isset() : session(false), sql(false), cursor(false) {}
  bool session :1;
  bool sql :1;
  bool cursor :1;
} _OmniSci_get_completion_hints_args__isset;

class OmniSci_get_completion_hints_args {
 public:

  OmniSci_get_completion_hints_args(const OmniSci_get_completion_hints_args&);
  OmniSci_get_completion_hints_args& operator=(const OmniSci_get_completion_hints_args&);
  OmniSci_get_completion_hints_args() noexcept
                                    : session(),
                                      sql(),
                                      cursor(0) {
  }

  virtual ~OmniSci_get_completion_hints_args() noexcept;
  TSessionId session;
  std::string sql;
  int32_t cursor;

  _OmniSci_get_completion_hints_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_sql(const std::string& val);

  void __set_cursor(const int32_t val);

  bool operator == (const OmniSci_get_completion_hints_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(cursor == rhs.cursor))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_completion_hints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_completion_hints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_completion_hints_pargs {
 public:


  virtual ~OmniSci_get_completion_hints_pargs() noexcept;
  const TSessionId* session;
  const std::string* sql;
  const int32_t* cursor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_completion_hints_result__isset {
  _OmniSci_get_completion_hints_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_completion_hints_result__isset;

class OmniSci_get_completion_hints_result {
 public:

  OmniSci_get_completion_hints_result(const OmniSci_get_completion_hints_result&);
  OmniSci_get_completion_hints_result& operator=(const OmniSci_get_completion_hints_result&);
  OmniSci_get_completion_hints_result() noexcept {
  }

  virtual ~OmniSci_get_completion_hints_result() noexcept;
  std::vector< ::TCompletionHint>  success;
  TOmniSciException e;

  _OmniSci_get_completion_hints_result__isset __isset;

  void __set_success(const std::vector< ::TCompletionHint> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_completion_hints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_completion_hints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_completion_hints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_completion_hints_presult__isset {
  _OmniSci_get_completion_hints_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_completion_hints_presult__isset;

class OmniSci_get_completion_hints_presult {
 public:


  virtual ~OmniSci_get_completion_hints_presult() noexcept;
  std::vector< ::TCompletionHint> * success;
  TOmniSciException e;

  _OmniSci_get_completion_hints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_execution_mode_args__isset {
  _OmniSci_set_execution_mode_args__isset() : session(false), mode(false) {}
  bool session :1;
  bool mode :1;
} _OmniSci_set_execution_mode_args__isset;

class OmniSci_set_execution_mode_args {
 public:

  OmniSci_set_execution_mode_args(const OmniSci_set_execution_mode_args&);
  OmniSci_set_execution_mode_args& operator=(const OmniSci_set_execution_mode_args&);
  OmniSci_set_execution_mode_args() noexcept
                                  : session(),
                                    mode(static_cast<TExecuteMode::type>(0)) {
  }

  virtual ~OmniSci_set_execution_mode_args() noexcept;
  TSessionId session;
  /**
   * 
   * @see TExecuteMode
   */
  TExecuteMode::type mode;

  _OmniSci_set_execution_mode_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_mode(const TExecuteMode::type val);

  bool operator == (const OmniSci_set_execution_mode_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_execution_mode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_execution_mode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_execution_mode_pargs {
 public:


  virtual ~OmniSci_set_execution_mode_pargs() noexcept;
  const TSessionId* session;
  /**
   * 
   * @see TExecuteMode
   */
  const TExecuteMode::type* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_execution_mode_result__isset {
  _OmniSci_set_execution_mode_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_execution_mode_result__isset;

class OmniSci_set_execution_mode_result {
 public:

  OmniSci_set_execution_mode_result(const OmniSci_set_execution_mode_result&);
  OmniSci_set_execution_mode_result& operator=(const OmniSci_set_execution_mode_result&);
  OmniSci_set_execution_mode_result() noexcept {
  }

  virtual ~OmniSci_set_execution_mode_result() noexcept;
  TOmniSciException e;

  _OmniSci_set_execution_mode_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_set_execution_mode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_execution_mode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_execution_mode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_execution_mode_presult__isset {
  _OmniSci_set_execution_mode_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_set_execution_mode_presult__isset;

class OmniSci_set_execution_mode_presult {
 public:


  virtual ~OmniSci_set_execution_mode_presult() noexcept;
  TOmniSciException e;

  _OmniSci_set_execution_mode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_render_vega_args__isset {
  _OmniSci_render_vega_args__isset() : session(false), widget_id(false), vega_json(false), compression_level(false), nonce(false) {}
  bool session :1;
  bool widget_id :1;
  bool vega_json :1;
  bool compression_level :1;
  bool nonce :1;
} _OmniSci_render_vega_args__isset;

class OmniSci_render_vega_args {
 public:

  OmniSci_render_vega_args(const OmniSci_render_vega_args&);
  OmniSci_render_vega_args& operator=(const OmniSci_render_vega_args&);
  OmniSci_render_vega_args() noexcept
                           : session(),
                             widget_id(0),
                             vega_json(),
                             compression_level(0),
                             nonce() {
  }

  virtual ~OmniSci_render_vega_args() noexcept;
  TSessionId session;
  int64_t widget_id;
  std::string vega_json;
  int32_t compression_level;
  std::string nonce;

  _OmniSci_render_vega_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_vega_json(const std::string& val);

  void __set_compression_level(const int32_t val);

  void __set_nonce(const std::string& val);

  bool operator == (const OmniSci_render_vega_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(vega_json == rhs.vega_json))
      return false;
    if (!(compression_level == rhs.compression_level))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const OmniSci_render_vega_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_render_vega_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_render_vega_pargs {
 public:


  virtual ~OmniSci_render_vega_pargs() noexcept;
  const TSessionId* session;
  const int64_t* widget_id;
  const std::string* vega_json;
  const int32_t* compression_level;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_render_vega_result__isset {
  _OmniSci_render_vega_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_render_vega_result__isset;

class OmniSci_render_vega_result {
 public:

  OmniSci_render_vega_result(const OmniSci_render_vega_result&);
  OmniSci_render_vega_result& operator=(const OmniSci_render_vega_result&);
  OmniSci_render_vega_result() noexcept {
  }

  virtual ~OmniSci_render_vega_result() noexcept;
  TRenderResult success;
  TOmniSciException e;

  _OmniSci_render_vega_result__isset __isset;

  void __set_success(const TRenderResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_render_vega_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_render_vega_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_render_vega_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_render_vega_presult__isset {
  _OmniSci_render_vega_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_render_vega_presult__isset;

class OmniSci_render_vega_presult {
 public:


  virtual ~OmniSci_render_vega_presult() noexcept;
  TRenderResult* success;
  TOmniSciException e;

  _OmniSci_render_vega_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_result_row_for_pixel_args__isset {
  _OmniSci_get_result_row_for_pixel_args__isset() : session(false), widget_id(false), pixel(false), table_col_names(false), column_format(false), pixelRadius(false), nonce(false) {}
  bool session :1;
  bool widget_id :1;
  bool pixel :1;
  bool table_col_names :1;
  bool column_format :1;
  bool pixelRadius :1;
  bool nonce :1;
} _OmniSci_get_result_row_for_pixel_args__isset;

class OmniSci_get_result_row_for_pixel_args {
 public:

  OmniSci_get_result_row_for_pixel_args(const OmniSci_get_result_row_for_pixel_args&);
  OmniSci_get_result_row_for_pixel_args& operator=(const OmniSci_get_result_row_for_pixel_args&);
  OmniSci_get_result_row_for_pixel_args() noexcept
                                        : session(),
                                          widget_id(0),
                                          column_format(0),
                                          pixelRadius(0),
                                          nonce() {
  }

  virtual ~OmniSci_get_result_row_for_pixel_args() noexcept;
  TSessionId session;
  int64_t widget_id;
  TPixel pixel;
  std::map<std::string, std::vector<std::string> >  table_col_names;
  bool column_format;
  int32_t pixelRadius;
  std::string nonce;

  _OmniSci_get_result_row_for_pixel_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_pixel(const TPixel& val);

  void __set_table_col_names(const std::map<std::string, std::vector<std::string> > & val);

  void __set_column_format(const bool val);

  void __set_pixelRadius(const int32_t val);

  void __set_nonce(const std::string& val);

  bool operator == (const OmniSci_get_result_row_for_pixel_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(pixel == rhs.pixel))
      return false;
    if (!(table_col_names == rhs.table_col_names))
      return false;
    if (!(column_format == rhs.column_format))
      return false;
    if (!(pixelRadius == rhs.pixelRadius))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_result_row_for_pixel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_result_row_for_pixel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_result_row_for_pixel_pargs {
 public:


  virtual ~OmniSci_get_result_row_for_pixel_pargs() noexcept;
  const TSessionId* session;
  const int64_t* widget_id;
  const TPixel* pixel;
  const std::map<std::string, std::vector<std::string> > * table_col_names;
  const bool* column_format;
  const int32_t* pixelRadius;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_result_row_for_pixel_result__isset {
  _OmniSci_get_result_row_for_pixel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_result_row_for_pixel_result__isset;

class OmniSci_get_result_row_for_pixel_result {
 public:

  OmniSci_get_result_row_for_pixel_result(const OmniSci_get_result_row_for_pixel_result&);
  OmniSci_get_result_row_for_pixel_result& operator=(const OmniSci_get_result_row_for_pixel_result&);
  OmniSci_get_result_row_for_pixel_result() noexcept {
  }

  virtual ~OmniSci_get_result_row_for_pixel_result() noexcept;
  TPixelTableRowResult success;
  TOmniSciException e;

  _OmniSci_get_result_row_for_pixel_result__isset __isset;

  void __set_success(const TPixelTableRowResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_result_row_for_pixel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_result_row_for_pixel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_result_row_for_pixel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_result_row_for_pixel_presult__isset {
  _OmniSci_get_result_row_for_pixel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_result_row_for_pixel_presult__isset;

class OmniSci_get_result_row_for_pixel_presult {
 public:


  virtual ~OmniSci_get_result_row_for_pixel_presult() noexcept;
  TPixelTableRowResult* success;
  TOmniSciException e;

  _OmniSci_get_result_row_for_pixel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_create_custom_expression_args__isset {
  _OmniSci_create_custom_expression_args__isset() : session(false), custom_expression(false) {}
  bool session :1;
  bool custom_expression :1;
} _OmniSci_create_custom_expression_args__isset;

class OmniSci_create_custom_expression_args {
 public:

  OmniSci_create_custom_expression_args(const OmniSci_create_custom_expression_args&);
  OmniSci_create_custom_expression_args& operator=(const OmniSci_create_custom_expression_args&);
  OmniSci_create_custom_expression_args() noexcept
                                        : session() {
  }

  virtual ~OmniSci_create_custom_expression_args() noexcept;
  TSessionId session;
  TCustomExpression custom_expression;

  _OmniSci_create_custom_expression_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_custom_expression(const TCustomExpression& val);

  bool operator == (const OmniSci_create_custom_expression_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(custom_expression == rhs.custom_expression))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_custom_expression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_custom_expression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_create_custom_expression_pargs {
 public:


  virtual ~OmniSci_create_custom_expression_pargs() noexcept;
  const TSessionId* session;
  const TCustomExpression* custom_expression;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_custom_expression_result__isset {
  _OmniSci_create_custom_expression_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_custom_expression_result__isset;

class OmniSci_create_custom_expression_result {
 public:

  OmniSci_create_custom_expression_result(const OmniSci_create_custom_expression_result&);
  OmniSci_create_custom_expression_result& operator=(const OmniSci_create_custom_expression_result&);
  OmniSci_create_custom_expression_result() noexcept
                                          : success(0) {
  }

  virtual ~OmniSci_create_custom_expression_result() noexcept;
  int32_t success;
  TOmniSciException e;

  _OmniSci_create_custom_expression_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_create_custom_expression_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_custom_expression_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_custom_expression_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_custom_expression_presult__isset {
  _OmniSci_create_custom_expression_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_custom_expression_presult__isset;

class OmniSci_create_custom_expression_presult {
 public:


  virtual ~OmniSci_create_custom_expression_presult() noexcept;
  int32_t* success;
  TOmniSciException e;

  _OmniSci_create_custom_expression_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_custom_expressions_args__isset {
  _OmniSci_get_custom_expressions_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_custom_expressions_args__isset;

class OmniSci_get_custom_expressions_args {
 public:

  OmniSci_get_custom_expressions_args(const OmniSci_get_custom_expressions_args&);
  OmniSci_get_custom_expressions_args& operator=(const OmniSci_get_custom_expressions_args&);
  OmniSci_get_custom_expressions_args() noexcept
                                      : session() {
  }

  virtual ~OmniSci_get_custom_expressions_args() noexcept;
  TSessionId session;

  _OmniSci_get_custom_expressions_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_custom_expressions_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_custom_expressions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_custom_expressions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_custom_expressions_pargs {
 public:


  virtual ~OmniSci_get_custom_expressions_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_custom_expressions_result__isset {
  _OmniSci_get_custom_expressions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_custom_expressions_result__isset;

class OmniSci_get_custom_expressions_result {
 public:

  OmniSci_get_custom_expressions_result(const OmniSci_get_custom_expressions_result&);
  OmniSci_get_custom_expressions_result& operator=(const OmniSci_get_custom_expressions_result&);
  OmniSci_get_custom_expressions_result() noexcept {
  }

  virtual ~OmniSci_get_custom_expressions_result() noexcept;
  std::vector<TCustomExpression>  success;
  TOmniSciException e;

  _OmniSci_get_custom_expressions_result__isset __isset;

  void __set_success(const std::vector<TCustomExpression> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_custom_expressions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_custom_expressions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_custom_expressions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_custom_expressions_presult__isset {
  _OmniSci_get_custom_expressions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_custom_expressions_presult__isset;

class OmniSci_get_custom_expressions_presult {
 public:


  virtual ~OmniSci_get_custom_expressions_presult() noexcept;
  std::vector<TCustomExpression> * success;
  TOmniSciException e;

  _OmniSci_get_custom_expressions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_update_custom_expression_args__isset {
  _OmniSci_update_custom_expression_args__isset() : session(false), id(false), expression_json(false) {}
  bool session :1;
  bool id :1;
  bool expression_json :1;
} _OmniSci_update_custom_expression_args__isset;

class OmniSci_update_custom_expression_args {
 public:

  OmniSci_update_custom_expression_args(const OmniSci_update_custom_expression_args&);
  OmniSci_update_custom_expression_args& operator=(const OmniSci_update_custom_expression_args&);
  OmniSci_update_custom_expression_args() noexcept
                                        : session(),
                                          id(0),
                                          expression_json() {
  }

  virtual ~OmniSci_update_custom_expression_args() noexcept;
  TSessionId session;
  int32_t id;
  std::string expression_json;

  _OmniSci_update_custom_expression_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_id(const int32_t val);

  void __set_expression_json(const std::string& val);

  bool operator == (const OmniSci_update_custom_expression_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(expression_json == rhs.expression_json))
      return false;
    return true;
  }
  bool operator != (const OmniSci_update_custom_expression_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_update_custom_expression_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_update_custom_expression_pargs {
 public:


  virtual ~OmniSci_update_custom_expression_pargs() noexcept;
  const TSessionId* session;
  const int32_t* id;
  const std::string* expression_json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_update_custom_expression_result__isset {
  _OmniSci_update_custom_expression_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_update_custom_expression_result__isset;

class OmniSci_update_custom_expression_result {
 public:

  OmniSci_update_custom_expression_result(const OmniSci_update_custom_expression_result&);
  OmniSci_update_custom_expression_result& operator=(const OmniSci_update_custom_expression_result&);
  OmniSci_update_custom_expression_result() noexcept {
  }

  virtual ~OmniSci_update_custom_expression_result() noexcept;
  TOmniSciException e;

  _OmniSci_update_custom_expression_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_update_custom_expression_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_update_custom_expression_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_update_custom_expression_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_update_custom_expression_presult__isset {
  _OmniSci_update_custom_expression_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_update_custom_expression_presult__isset;

class OmniSci_update_custom_expression_presult {
 public:


  virtual ~OmniSci_update_custom_expression_presult() noexcept;
  TOmniSciException e;

  _OmniSci_update_custom_expression_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_delete_custom_expressions_args__isset {
  _OmniSci_delete_custom_expressions_args__isset() : session(false), custom_expression_ids(false), do_soft_delete(false) {}
  bool session :1;
  bool custom_expression_ids :1;
  bool do_soft_delete :1;
} _OmniSci_delete_custom_expressions_args__isset;

class OmniSci_delete_custom_expressions_args {
 public:

  OmniSci_delete_custom_expressions_args(const OmniSci_delete_custom_expressions_args&);
  OmniSci_delete_custom_expressions_args& operator=(const OmniSci_delete_custom_expressions_args&);
  OmniSci_delete_custom_expressions_args() noexcept
                                         : session(),
                                           do_soft_delete(0) {
  }

  virtual ~OmniSci_delete_custom_expressions_args() noexcept;
  TSessionId session;
  std::vector<int32_t>  custom_expression_ids;
  bool do_soft_delete;

  _OmniSci_delete_custom_expressions_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_custom_expression_ids(const std::vector<int32_t> & val);

  void __set_do_soft_delete(const bool val);

  bool operator == (const OmniSci_delete_custom_expressions_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(custom_expression_ids == rhs.custom_expression_ids))
      return false;
    if (!(do_soft_delete == rhs.do_soft_delete))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_custom_expressions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_custom_expressions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_delete_custom_expressions_pargs {
 public:


  virtual ~OmniSci_delete_custom_expressions_pargs() noexcept;
  const TSessionId* session;
  const std::vector<int32_t> * custom_expression_ids;
  const bool* do_soft_delete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_custom_expressions_result__isset {
  _OmniSci_delete_custom_expressions_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_custom_expressions_result__isset;

class OmniSci_delete_custom_expressions_result {
 public:

  OmniSci_delete_custom_expressions_result(const OmniSci_delete_custom_expressions_result&);
  OmniSci_delete_custom_expressions_result& operator=(const OmniSci_delete_custom_expressions_result&);
  OmniSci_delete_custom_expressions_result() noexcept {
  }

  virtual ~OmniSci_delete_custom_expressions_result() noexcept;
  TOmniSciException e;

  _OmniSci_delete_custom_expressions_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_delete_custom_expressions_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_custom_expressions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_custom_expressions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_custom_expressions_presult__isset {
  _OmniSci_delete_custom_expressions_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_custom_expressions_presult__isset;

class OmniSci_delete_custom_expressions_presult {
 public:


  virtual ~OmniSci_delete_custom_expressions_presult() noexcept;
  TOmniSciException e;

  _OmniSci_delete_custom_expressions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_dashboard_args__isset {
  _OmniSci_get_dashboard_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _OmniSci_get_dashboard_args__isset;

class OmniSci_get_dashboard_args {
 public:

  OmniSci_get_dashboard_args(const OmniSci_get_dashboard_args&);
  OmniSci_get_dashboard_args& operator=(const OmniSci_get_dashboard_args&);
  OmniSci_get_dashboard_args() noexcept
                             : session(),
                               dashboard_id(0) {
  }

  virtual ~OmniSci_get_dashboard_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;

  _OmniSci_get_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const OmniSci_get_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_dashboard_pargs {
 public:


  virtual ~OmniSci_get_dashboard_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboard_result__isset {
  _OmniSci_get_dashboard_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboard_result__isset;

class OmniSci_get_dashboard_result {
 public:

  OmniSci_get_dashboard_result(const OmniSci_get_dashboard_result&);
  OmniSci_get_dashboard_result& operator=(const OmniSci_get_dashboard_result&);
  OmniSci_get_dashboard_result() noexcept {
  }

  virtual ~OmniSci_get_dashboard_result() noexcept;
  TDashboard success;
  TOmniSciException e;

  _OmniSci_get_dashboard_result__isset __isset;

  void __set_success(const TDashboard& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_dashboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboard_presult__isset {
  _OmniSci_get_dashboard_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboard_presult__isset;

class OmniSci_get_dashboard_presult {
 public:


  virtual ~OmniSci_get_dashboard_presult() noexcept;
  TDashboard* success;
  TOmniSciException e;

  _OmniSci_get_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_dashboards_args__isset {
  _OmniSci_get_dashboards_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_dashboards_args__isset;

class OmniSci_get_dashboards_args {
 public:

  OmniSci_get_dashboards_args(const OmniSci_get_dashboards_args&);
  OmniSci_get_dashboards_args& operator=(const OmniSci_get_dashboards_args&);
  OmniSci_get_dashboards_args() noexcept
                              : session() {
  }

  virtual ~OmniSci_get_dashboards_args() noexcept;
  TSessionId session;

  _OmniSci_get_dashboards_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_dashboards_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_dashboards_pargs {
 public:


  virtual ~OmniSci_get_dashboards_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboards_result__isset {
  _OmniSci_get_dashboards_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboards_result__isset;

class OmniSci_get_dashboards_result {
 public:

  OmniSci_get_dashboards_result(const OmniSci_get_dashboards_result&);
  OmniSci_get_dashboards_result& operator=(const OmniSci_get_dashboards_result&);
  OmniSci_get_dashboards_result() noexcept {
  }

  virtual ~OmniSci_get_dashboards_result() noexcept;
  std::vector<TDashboard>  success;
  TOmniSciException e;

  _OmniSci_get_dashboards_result__isset __isset;

  void __set_success(const std::vector<TDashboard> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_dashboards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboards_presult__isset {
  _OmniSci_get_dashboards_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboards_presult__isset;

class OmniSci_get_dashboards_presult {
 public:


  virtual ~OmniSci_get_dashboards_presult() noexcept;
  std::vector<TDashboard> * success;
  TOmniSciException e;

  _OmniSci_get_dashboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_create_dashboard_args__isset {
  _OmniSci_create_dashboard_args__isset() : session(false), dashboard_name(false), dashboard_state(false), image_hash(false), dashboard_metadata(false) {}
  bool session :1;
  bool dashboard_name :1;
  bool dashboard_state :1;
  bool image_hash :1;
  bool dashboard_metadata :1;
} _OmniSci_create_dashboard_args__isset;

class OmniSci_create_dashboard_args {
 public:

  OmniSci_create_dashboard_args(const OmniSci_create_dashboard_args&);
  OmniSci_create_dashboard_args& operator=(const OmniSci_create_dashboard_args&);
  OmniSci_create_dashboard_args() noexcept
                                : session(),
                                  dashboard_name(),
                                  dashboard_state(),
                                  image_hash(),
                                  dashboard_metadata() {
  }

  virtual ~OmniSci_create_dashboard_args() noexcept;
  TSessionId session;
  std::string dashboard_name;
  std::string dashboard_state;
  std::string image_hash;
  std::string dashboard_metadata;

  _OmniSci_create_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_name(const std::string& val);

  void __set_dashboard_state(const std::string& val);

  void __set_image_hash(const std::string& val);

  void __set_dashboard_metadata(const std::string& val);

  bool operator == (const OmniSci_create_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_name == rhs.dashboard_name))
      return false;
    if (!(dashboard_state == rhs.dashboard_state))
      return false;
    if (!(image_hash == rhs.image_hash))
      return false;
    if (!(dashboard_metadata == rhs.dashboard_metadata))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_create_dashboard_pargs {
 public:


  virtual ~OmniSci_create_dashboard_pargs() noexcept;
  const TSessionId* session;
  const std::string* dashboard_name;
  const std::string* dashboard_state;
  const std::string* image_hash;
  const std::string* dashboard_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_dashboard_result__isset {
  _OmniSci_create_dashboard_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_dashboard_result__isset;

class OmniSci_create_dashboard_result {
 public:

  OmniSci_create_dashboard_result(const OmniSci_create_dashboard_result&);
  OmniSci_create_dashboard_result& operator=(const OmniSci_create_dashboard_result&);
  OmniSci_create_dashboard_result() noexcept
                                  : success(0) {
  }

  virtual ~OmniSci_create_dashboard_result() noexcept;
  int32_t success;
  TOmniSciException e;

  _OmniSci_create_dashboard_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_create_dashboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_dashboard_presult__isset {
  _OmniSci_create_dashboard_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_dashboard_presult__isset;

class OmniSci_create_dashboard_presult {
 public:


  virtual ~OmniSci_create_dashboard_presult() noexcept;
  int32_t* success;
  TOmniSciException e;

  _OmniSci_create_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_replace_dashboard_args__isset {
  _OmniSci_replace_dashboard_args__isset() : session(false), dashboard_id(false), dashboard_name(false), dashboard_owner(false), dashboard_state(false), image_hash(false), dashboard_metadata(false) {}
  bool session :1;
  bool dashboard_id :1;
  bool dashboard_name :1;
  bool dashboard_owner :1;
  bool dashboard_state :1;
  bool image_hash :1;
  bool dashboard_metadata :1;
} _OmniSci_replace_dashboard_args__isset;

class OmniSci_replace_dashboard_args {
 public:

  OmniSci_replace_dashboard_args(const OmniSci_replace_dashboard_args&);
  OmniSci_replace_dashboard_args& operator=(const OmniSci_replace_dashboard_args&);
  OmniSci_replace_dashboard_args() noexcept
                                 : session(),
                                   dashboard_id(0),
                                   dashboard_name(),
                                   dashboard_owner(),
                                   dashboard_state(),
                                   image_hash(),
                                   dashboard_metadata() {
  }

  virtual ~OmniSci_replace_dashboard_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;
  std::string dashboard_name;
  std::string dashboard_owner;
  std::string dashboard_state;
  std::string image_hash;
  std::string dashboard_metadata;

  _OmniSci_replace_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_dashboard_name(const std::string& val);

  void __set_dashboard_owner(const std::string& val);

  void __set_dashboard_state(const std::string& val);

  void __set_image_hash(const std::string& val);

  void __set_dashboard_metadata(const std::string& val);

  bool operator == (const OmniSci_replace_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(dashboard_name == rhs.dashboard_name))
      return false;
    if (!(dashboard_owner == rhs.dashboard_owner))
      return false;
    if (!(dashboard_state == rhs.dashboard_state))
      return false;
    if (!(image_hash == rhs.image_hash))
      return false;
    if (!(dashboard_metadata == rhs.dashboard_metadata))
      return false;
    return true;
  }
  bool operator != (const OmniSci_replace_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_replace_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_replace_dashboard_pargs {
 public:


  virtual ~OmniSci_replace_dashboard_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::string* dashboard_name;
  const std::string* dashboard_owner;
  const std::string* dashboard_state;
  const std::string* image_hash;
  const std::string* dashboard_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_replace_dashboard_result__isset {
  _OmniSci_replace_dashboard_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_replace_dashboard_result__isset;

class OmniSci_replace_dashboard_result {
 public:

  OmniSci_replace_dashboard_result(const OmniSci_replace_dashboard_result&);
  OmniSci_replace_dashboard_result& operator=(const OmniSci_replace_dashboard_result&);
  OmniSci_replace_dashboard_result() noexcept {
  }

  virtual ~OmniSci_replace_dashboard_result() noexcept;
  TOmniSciException e;

  _OmniSci_replace_dashboard_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_replace_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_replace_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_replace_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_replace_dashboard_presult__isset {
  _OmniSci_replace_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_replace_dashboard_presult__isset;

class OmniSci_replace_dashboard_presult {
 public:


  virtual ~OmniSci_replace_dashboard_presult() noexcept;
  TOmniSciException e;

  _OmniSci_replace_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_delete_dashboard_args__isset {
  _OmniSci_delete_dashboard_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _OmniSci_delete_dashboard_args__isset;

class OmniSci_delete_dashboard_args {
 public:

  OmniSci_delete_dashboard_args(const OmniSci_delete_dashboard_args&);
  OmniSci_delete_dashboard_args& operator=(const OmniSci_delete_dashboard_args&);
  OmniSci_delete_dashboard_args() noexcept
                                : session(),
                                  dashboard_id(0) {
  }

  virtual ~OmniSci_delete_dashboard_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;

  _OmniSci_delete_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const OmniSci_delete_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_delete_dashboard_pargs {
 public:


  virtual ~OmniSci_delete_dashboard_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_dashboard_result__isset {
  _OmniSci_delete_dashboard_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_dashboard_result__isset;

class OmniSci_delete_dashboard_result {
 public:

  OmniSci_delete_dashboard_result(const OmniSci_delete_dashboard_result&);
  OmniSci_delete_dashboard_result& operator=(const OmniSci_delete_dashboard_result&);
  OmniSci_delete_dashboard_result() noexcept {
  }

  virtual ~OmniSci_delete_dashboard_result() noexcept;
  TOmniSciException e;

  _OmniSci_delete_dashboard_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_delete_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_dashboard_presult__isset {
  _OmniSci_delete_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_dashboard_presult__isset;

class OmniSci_delete_dashboard_presult {
 public:


  virtual ~OmniSci_delete_dashboard_presult() noexcept;
  TOmniSciException e;

  _OmniSci_delete_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_share_dashboards_args__isset {
  _OmniSci_share_dashboards_args__isset() : session(false), dashboard_ids(false), groups(false), permissions(false) {}
  bool session :1;
  bool dashboard_ids :1;
  bool groups :1;
  bool permissions :1;
} _OmniSci_share_dashboards_args__isset;

class OmniSci_share_dashboards_args {
 public:

  OmniSci_share_dashboards_args(const OmniSci_share_dashboards_args&);
  OmniSci_share_dashboards_args& operator=(const OmniSci_share_dashboards_args&);
  OmniSci_share_dashboards_args() noexcept
                                : session() {
  }

  virtual ~OmniSci_share_dashboards_args() noexcept;
  TSessionId session;
  std::vector<int32_t>  dashboard_ids;
  std::vector<std::string>  groups;
  TDashboardPermissions permissions;

  _OmniSci_share_dashboards_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_ids(const std::vector<int32_t> & val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  bool operator == (const OmniSci_share_dashboards_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_ids == rhs.dashboard_ids))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const OmniSci_share_dashboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_share_dashboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_share_dashboards_pargs {
 public:


  virtual ~OmniSci_share_dashboards_pargs() noexcept;
  const TSessionId* session;
  const std::vector<int32_t> * dashboard_ids;
  const std::vector<std::string> * groups;
  const TDashboardPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_share_dashboards_result__isset {
  _OmniSci_share_dashboards_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_share_dashboards_result__isset;

class OmniSci_share_dashboards_result {
 public:

  OmniSci_share_dashboards_result(const OmniSci_share_dashboards_result&);
  OmniSci_share_dashboards_result& operator=(const OmniSci_share_dashboards_result&);
  OmniSci_share_dashboards_result() noexcept {
  }

  virtual ~OmniSci_share_dashboards_result() noexcept;
  TOmniSciException e;

  _OmniSci_share_dashboards_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_share_dashboards_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_share_dashboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_share_dashboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_share_dashboards_presult__isset {
  _OmniSci_share_dashboards_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_share_dashboards_presult__isset;

class OmniSci_share_dashboards_presult {
 public:


  virtual ~OmniSci_share_dashboards_presult() noexcept;
  TOmniSciException e;

  _OmniSci_share_dashboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_delete_dashboards_args__isset {
  _OmniSci_delete_dashboards_args__isset() : session(false), dashboard_ids(false) {}
  bool session :1;
  bool dashboard_ids :1;
} _OmniSci_delete_dashboards_args__isset;

class OmniSci_delete_dashboards_args {
 public:

  OmniSci_delete_dashboards_args(const OmniSci_delete_dashboards_args&);
  OmniSci_delete_dashboards_args& operator=(const OmniSci_delete_dashboards_args&);
  OmniSci_delete_dashboards_args() noexcept
                                 : session() {
  }

  virtual ~OmniSci_delete_dashboards_args() noexcept;
  TSessionId session;
  std::vector<int32_t>  dashboard_ids;

  _OmniSci_delete_dashboards_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_ids(const std::vector<int32_t> & val);

  bool operator == (const OmniSci_delete_dashboards_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_ids == rhs.dashboard_ids))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_dashboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_dashboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_delete_dashboards_pargs {
 public:


  virtual ~OmniSci_delete_dashboards_pargs() noexcept;
  const TSessionId* session;
  const std::vector<int32_t> * dashboard_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_dashboards_result__isset {
  _OmniSci_delete_dashboards_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_dashboards_result__isset;

class OmniSci_delete_dashboards_result {
 public:

  OmniSci_delete_dashboards_result(const OmniSci_delete_dashboards_result&);
  OmniSci_delete_dashboards_result& operator=(const OmniSci_delete_dashboards_result&);
  OmniSci_delete_dashboards_result() noexcept {
  }

  virtual ~OmniSci_delete_dashboards_result() noexcept;
  TOmniSciException e;

  _OmniSci_delete_dashboards_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_delete_dashboards_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_delete_dashboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_delete_dashboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_delete_dashboards_presult__isset {
  _OmniSci_delete_dashboards_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_delete_dashboards_presult__isset;

class OmniSci_delete_dashboards_presult {
 public:


  virtual ~OmniSci_delete_dashboards_presult() noexcept;
  TOmniSciException e;

  _OmniSci_delete_dashboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_share_dashboard_args__isset {
  _OmniSci_share_dashboard_args__isset() : session(false), dashboard_id(false), groups(false), objects(false), permissions(false), grant_role(true) {}
  bool session :1;
  bool dashboard_id :1;
  bool groups :1;
  bool objects :1;
  bool permissions :1;
  bool grant_role :1;
} _OmniSci_share_dashboard_args__isset;

class OmniSci_share_dashboard_args {
 public:

  OmniSci_share_dashboard_args(const OmniSci_share_dashboard_args&);
  OmniSci_share_dashboard_args& operator=(const OmniSci_share_dashboard_args&);
  OmniSci_share_dashboard_args() noexcept
                               : session(),
                                 dashboard_id(0),
                                 grant_role(false) {
  }

  virtual ~OmniSci_share_dashboard_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;
  std::vector<std::string>  groups;
  std::vector<std::string>  objects;
  TDashboardPermissions permissions;
  bool grant_role;

  _OmniSci_share_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_objects(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  void __set_grant_role(const bool val);

  bool operator == (const OmniSci_share_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(objects == rhs.objects))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    if (!(grant_role == rhs.grant_role))
      return false;
    return true;
  }
  bool operator != (const OmniSci_share_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_share_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_share_dashboard_pargs {
 public:


  virtual ~OmniSci_share_dashboard_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::vector<std::string> * groups;
  const std::vector<std::string> * objects;
  const TDashboardPermissions* permissions;
  const bool* grant_role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_share_dashboard_result__isset {
  _OmniSci_share_dashboard_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_share_dashboard_result__isset;

class OmniSci_share_dashboard_result {
 public:

  OmniSci_share_dashboard_result(const OmniSci_share_dashboard_result&);
  OmniSci_share_dashboard_result& operator=(const OmniSci_share_dashboard_result&);
  OmniSci_share_dashboard_result() noexcept {
  }

  virtual ~OmniSci_share_dashboard_result() noexcept;
  TOmniSciException e;

  _OmniSci_share_dashboard_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_share_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_share_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_share_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_share_dashboard_presult__isset {
  _OmniSci_share_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_share_dashboard_presult__isset;

class OmniSci_share_dashboard_presult {
 public:


  virtual ~OmniSci_share_dashboard_presult() noexcept;
  TOmniSciException e;

  _OmniSci_share_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_unshare_dashboard_args__isset {
  _OmniSci_unshare_dashboard_args__isset() : session(false), dashboard_id(false), groups(false), objects(false), permissions(false) {}
  bool session :1;
  bool dashboard_id :1;
  bool groups :1;
  bool objects :1;
  bool permissions :1;
} _OmniSci_unshare_dashboard_args__isset;

class OmniSci_unshare_dashboard_args {
 public:

  OmniSci_unshare_dashboard_args(const OmniSci_unshare_dashboard_args&);
  OmniSci_unshare_dashboard_args& operator=(const OmniSci_unshare_dashboard_args&);
  OmniSci_unshare_dashboard_args() noexcept
                                 : session(),
                                   dashboard_id(0) {
  }

  virtual ~OmniSci_unshare_dashboard_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;
  std::vector<std::string>  groups;
  std::vector<std::string>  objects;
  TDashboardPermissions permissions;

  _OmniSci_unshare_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_objects(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  bool operator == (const OmniSci_unshare_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(objects == rhs.objects))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const OmniSci_unshare_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_unshare_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_unshare_dashboard_pargs {
 public:


  virtual ~OmniSci_unshare_dashboard_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::vector<std::string> * groups;
  const std::vector<std::string> * objects;
  const TDashboardPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_unshare_dashboard_result__isset {
  _OmniSci_unshare_dashboard_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_unshare_dashboard_result__isset;

class OmniSci_unshare_dashboard_result {
 public:

  OmniSci_unshare_dashboard_result(const OmniSci_unshare_dashboard_result&);
  OmniSci_unshare_dashboard_result& operator=(const OmniSci_unshare_dashboard_result&);
  OmniSci_unshare_dashboard_result() noexcept {
  }

  virtual ~OmniSci_unshare_dashboard_result() noexcept;
  TOmniSciException e;

  _OmniSci_unshare_dashboard_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_unshare_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_unshare_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_unshare_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_unshare_dashboard_presult__isset {
  _OmniSci_unshare_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_unshare_dashboard_presult__isset;

class OmniSci_unshare_dashboard_presult {
 public:


  virtual ~OmniSci_unshare_dashboard_presult() noexcept;
  TOmniSciException e;

  _OmniSci_unshare_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_unshare_dashboards_args__isset {
  _OmniSci_unshare_dashboards_args__isset() : session(false), dashboard_ids(false), groups(false), permissions(false) {}
  bool session :1;
  bool dashboard_ids :1;
  bool groups :1;
  bool permissions :1;
} _OmniSci_unshare_dashboards_args__isset;

class OmniSci_unshare_dashboards_args {
 public:

  OmniSci_unshare_dashboards_args(const OmniSci_unshare_dashboards_args&);
  OmniSci_unshare_dashboards_args& operator=(const OmniSci_unshare_dashboards_args&);
  OmniSci_unshare_dashboards_args() noexcept
                                  : session() {
  }

  virtual ~OmniSci_unshare_dashboards_args() noexcept;
  TSessionId session;
  std::vector<int32_t>  dashboard_ids;
  std::vector<std::string>  groups;
  TDashboardPermissions permissions;

  _OmniSci_unshare_dashboards_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_ids(const std::vector<int32_t> & val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  bool operator == (const OmniSci_unshare_dashboards_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_ids == rhs.dashboard_ids))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const OmniSci_unshare_dashboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_unshare_dashboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_unshare_dashboards_pargs {
 public:


  virtual ~OmniSci_unshare_dashboards_pargs() noexcept;
  const TSessionId* session;
  const std::vector<int32_t> * dashboard_ids;
  const std::vector<std::string> * groups;
  const TDashboardPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_unshare_dashboards_result__isset {
  _OmniSci_unshare_dashboards_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_unshare_dashboards_result__isset;

class OmniSci_unshare_dashboards_result {
 public:

  OmniSci_unshare_dashboards_result(const OmniSci_unshare_dashboards_result&);
  OmniSci_unshare_dashboards_result& operator=(const OmniSci_unshare_dashboards_result&);
  OmniSci_unshare_dashboards_result() noexcept {
  }

  virtual ~OmniSci_unshare_dashboards_result() noexcept;
  TOmniSciException e;

  _OmniSci_unshare_dashboards_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_unshare_dashboards_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_unshare_dashboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_unshare_dashboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_unshare_dashboards_presult__isset {
  _OmniSci_unshare_dashboards_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_unshare_dashboards_presult__isset;

class OmniSci_unshare_dashboards_presult {
 public:


  virtual ~OmniSci_unshare_dashboards_presult() noexcept;
  TOmniSciException e;

  _OmniSci_unshare_dashboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_dashboard_grantees_args__isset {
  _OmniSci_get_dashboard_grantees_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _OmniSci_get_dashboard_grantees_args__isset;

class OmniSci_get_dashboard_grantees_args {
 public:

  OmniSci_get_dashboard_grantees_args(const OmniSci_get_dashboard_grantees_args&);
  OmniSci_get_dashboard_grantees_args& operator=(const OmniSci_get_dashboard_grantees_args&);
  OmniSci_get_dashboard_grantees_args() noexcept
                                      : session(),
                                        dashboard_id(0) {
  }

  virtual ~OmniSci_get_dashboard_grantees_args() noexcept;
  TSessionId session;
  int32_t dashboard_id;

  _OmniSci_get_dashboard_grantees_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const OmniSci_get_dashboard_grantees_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboard_grantees_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboard_grantees_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_dashboard_grantees_pargs {
 public:


  virtual ~OmniSci_get_dashboard_grantees_pargs() noexcept;
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboard_grantees_result__isset {
  _OmniSci_get_dashboard_grantees_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboard_grantees_result__isset;

class OmniSci_get_dashboard_grantees_result {
 public:

  OmniSci_get_dashboard_grantees_result(const OmniSci_get_dashboard_grantees_result&);
  OmniSci_get_dashboard_grantees_result& operator=(const OmniSci_get_dashboard_grantees_result&);
  OmniSci_get_dashboard_grantees_result() noexcept {
  }

  virtual ~OmniSci_get_dashboard_grantees_result() noexcept;
  std::vector<TDashboardGrantees>  success;
  TOmniSciException e;

  _OmniSci_get_dashboard_grantees_result__isset __isset;

  void __set_success(const std::vector<TDashboardGrantees> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_dashboard_grantees_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_dashboard_grantees_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_dashboard_grantees_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_dashboard_grantees_presult__isset {
  _OmniSci_get_dashboard_grantees_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_dashboard_grantees_presult__isset;

class OmniSci_get_dashboard_grantees_presult {
 public:


  virtual ~OmniSci_get_dashboard_grantees_presult() noexcept;
  std::vector<TDashboardGrantees> * success;
  TOmniSciException e;

  _OmniSci_get_dashboard_grantees_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_link_view_args__isset {
  _OmniSci_get_link_view_args__isset() : session(false), link(false) {}
  bool session :1;
  bool link :1;
} _OmniSci_get_link_view_args__isset;

class OmniSci_get_link_view_args {
 public:

  OmniSci_get_link_view_args(const OmniSci_get_link_view_args&);
  OmniSci_get_link_view_args& operator=(const OmniSci_get_link_view_args&);
  OmniSci_get_link_view_args() noexcept
                             : session(),
                               link() {
  }

  virtual ~OmniSci_get_link_view_args() noexcept;
  TSessionId session;
  std::string link;

  _OmniSci_get_link_view_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_link(const std::string& val);

  bool operator == (const OmniSci_get_link_view_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(link == rhs.link))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_link_view_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_link_view_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_link_view_pargs {
 public:


  virtual ~OmniSci_get_link_view_pargs() noexcept;
  const TSessionId* session;
  const std::string* link;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_link_view_result__isset {
  _OmniSci_get_link_view_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_link_view_result__isset;

class OmniSci_get_link_view_result {
 public:

  OmniSci_get_link_view_result(const OmniSci_get_link_view_result&);
  OmniSci_get_link_view_result& operator=(const OmniSci_get_link_view_result&);
  OmniSci_get_link_view_result() noexcept {
  }

  virtual ~OmniSci_get_link_view_result() noexcept;
  TFrontendView success;
  TOmniSciException e;

  _OmniSci_get_link_view_result__isset __isset;

  void __set_success(const TFrontendView& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_link_view_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_link_view_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_link_view_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_link_view_presult__isset {
  _OmniSci_get_link_view_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_link_view_presult__isset;

class OmniSci_get_link_view_presult {
 public:


  virtual ~OmniSci_get_link_view_presult() noexcept;
  TFrontendView* success;
  TOmniSciException e;

  _OmniSci_get_link_view_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_create_link_args__isset {
  _OmniSci_create_link_args__isset() : session(false), view_state(false), view_metadata(false) {}
  bool session :1;
  bool view_state :1;
  bool view_metadata :1;
} _OmniSci_create_link_args__isset;

class OmniSci_create_link_args {
 public:

  OmniSci_create_link_args(const OmniSci_create_link_args&);
  OmniSci_create_link_args& operator=(const OmniSci_create_link_args&);
  OmniSci_create_link_args() noexcept
                           : session(),
                             view_state(),
                             view_metadata() {
  }

  virtual ~OmniSci_create_link_args() noexcept;
  TSessionId session;
  std::string view_state;
  std::string view_metadata;

  _OmniSci_create_link_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_view_state(const std::string& val);

  void __set_view_metadata(const std::string& val);

  bool operator == (const OmniSci_create_link_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(view_state == rhs.view_state))
      return false;
    if (!(view_metadata == rhs.view_metadata))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_create_link_pargs {
 public:


  virtual ~OmniSci_create_link_pargs() noexcept;
  const TSessionId* session;
  const std::string* view_state;
  const std::string* view_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_link_result__isset {
  _OmniSci_create_link_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_link_result__isset;

class OmniSci_create_link_result {
 public:

  OmniSci_create_link_result(const OmniSci_create_link_result&);
  OmniSci_create_link_result& operator=(const OmniSci_create_link_result&);
  OmniSci_create_link_result() noexcept
                             : success() {
  }

  virtual ~OmniSci_create_link_result() noexcept;
  std::string success;
  TOmniSciException e;

  _OmniSci_create_link_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_create_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_link_presult__isset {
  _OmniSci_create_link_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_create_link_presult__isset;

class OmniSci_create_link_presult {
 public:


  virtual ~OmniSci_create_link_presult() noexcept;
  std::string* success;
  TOmniSciException e;

  _OmniSci_create_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_load_table_binary_args__isset {
  _OmniSci_load_table_binary_args__isset() : session(false), table_name(false), rows(false), column_names(true) {}
  bool session :1;
  bool table_name :1;
  bool rows :1;
  bool column_names :1;
} _OmniSci_load_table_binary_args__isset;

class OmniSci_load_table_binary_args {
 public:

  OmniSci_load_table_binary_args(const OmniSci_load_table_binary_args&);
  OmniSci_load_table_binary_args& operator=(const OmniSci_load_table_binary_args&);
  OmniSci_load_table_binary_args() noexcept
                                 : session(),
                                   table_name() {

  }

  virtual ~OmniSci_load_table_binary_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::vector<TRow>  rows;
  std::vector<std::string>  column_names;

  _OmniSci_load_table_binary_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_rows(const std::vector<TRow> & val);

  void __set_column_names(const std::vector<std::string> & val);

  bool operator == (const OmniSci_load_table_binary_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(rows == rhs.rows))
      return false;
    if (!(column_names == rhs.column_names))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_load_table_binary_pargs {
 public:


  virtual ~OmniSci_load_table_binary_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TRow> * rows;
  const std::vector<std::string> * column_names;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_result__isset {
  _OmniSci_load_table_binary_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_result__isset;

class OmniSci_load_table_binary_result {
 public:

  OmniSci_load_table_binary_result(const OmniSci_load_table_binary_result&);
  OmniSci_load_table_binary_result& operator=(const OmniSci_load_table_binary_result&);
  OmniSci_load_table_binary_result() noexcept {
  }

  virtual ~OmniSci_load_table_binary_result() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_load_table_binary_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_presult__isset {
  _OmniSci_load_table_binary_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_presult__isset;

class OmniSci_load_table_binary_presult {
 public:


  virtual ~OmniSci_load_table_binary_presult() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_load_table_binary_columnar_args__isset {
  _OmniSci_load_table_binary_columnar_args__isset() : session(false), table_name(false), cols(false), column_names(true) {}
  bool session :1;
  bool table_name :1;
  bool cols :1;
  bool column_names :1;
} _OmniSci_load_table_binary_columnar_args__isset;

class OmniSci_load_table_binary_columnar_args {
 public:

  OmniSci_load_table_binary_columnar_args(const OmniSci_load_table_binary_columnar_args&);
  OmniSci_load_table_binary_columnar_args& operator=(const OmniSci_load_table_binary_columnar_args&);
  OmniSci_load_table_binary_columnar_args() noexcept
                                          : session(),
                                            table_name() {

  }

  virtual ~OmniSci_load_table_binary_columnar_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::vector<TColumn>  cols;
  std::vector<std::string>  column_names;

  _OmniSci_load_table_binary_columnar_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_cols(const std::vector<TColumn> & val);

  void __set_column_names(const std::vector<std::string> & val);

  bool operator == (const OmniSci_load_table_binary_columnar_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(column_names == rhs.column_names))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_columnar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_columnar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_load_table_binary_columnar_pargs {
 public:


  virtual ~OmniSci_load_table_binary_columnar_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TColumn> * cols;
  const std::vector<std::string> * column_names;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_columnar_result__isset {
  _OmniSci_load_table_binary_columnar_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_columnar_result__isset;

class OmniSci_load_table_binary_columnar_result {
 public:

  OmniSci_load_table_binary_columnar_result(const OmniSci_load_table_binary_columnar_result&);
  OmniSci_load_table_binary_columnar_result& operator=(const OmniSci_load_table_binary_columnar_result&);
  OmniSci_load_table_binary_columnar_result() noexcept {
  }

  virtual ~OmniSci_load_table_binary_columnar_result() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_columnar_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_load_table_binary_columnar_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_columnar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_columnar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_columnar_presult__isset {
  _OmniSci_load_table_binary_columnar_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_columnar_presult__isset;

class OmniSci_load_table_binary_columnar_presult {
 public:


  virtual ~OmniSci_load_table_binary_columnar_presult() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_columnar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_load_table_binary_columnar_polys_args__isset {
  _OmniSci_load_table_binary_columnar_polys_args__isset() : session(false), table_name(false), cols(false), column_names(true), assign_render_groups(true) {}
  bool session :1;
  bool table_name :1;
  bool cols :1;
  bool column_names :1;
  bool assign_render_groups :1;
} _OmniSci_load_table_binary_columnar_polys_args__isset;

class OmniSci_load_table_binary_columnar_polys_args {
 public:

  OmniSci_load_table_binary_columnar_polys_args(const OmniSci_load_table_binary_columnar_polys_args&);
  OmniSci_load_table_binary_columnar_polys_args& operator=(const OmniSci_load_table_binary_columnar_polys_args&);
  OmniSci_load_table_binary_columnar_polys_args() noexcept
                                                : session(),
                                                  table_name(),
                                                  assign_render_groups(true) {

  }

  virtual ~OmniSci_load_table_binary_columnar_polys_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::vector<TColumn>  cols;
  std::vector<std::string>  column_names;
  bool assign_render_groups;

  _OmniSci_load_table_binary_columnar_polys_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_cols(const std::vector<TColumn> & val);

  void __set_column_names(const std::vector<std::string> & val);

  void __set_assign_render_groups(const bool val);

  bool operator == (const OmniSci_load_table_binary_columnar_polys_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(cols == rhs.cols))
      return false;
    if (!(column_names == rhs.column_names))
      return false;
    if (!(assign_render_groups == rhs.assign_render_groups))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_columnar_polys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_columnar_polys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_load_table_binary_columnar_polys_pargs {
 public:


  virtual ~OmniSci_load_table_binary_columnar_polys_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TColumn> * cols;
  const std::vector<std::string> * column_names;
  const bool* assign_render_groups;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_columnar_polys_result__isset {
  _OmniSci_load_table_binary_columnar_polys_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_columnar_polys_result__isset;

class OmniSci_load_table_binary_columnar_polys_result {
 public:

  OmniSci_load_table_binary_columnar_polys_result(const OmniSci_load_table_binary_columnar_polys_result&);
  OmniSci_load_table_binary_columnar_polys_result& operator=(const OmniSci_load_table_binary_columnar_polys_result&);
  OmniSci_load_table_binary_columnar_polys_result() noexcept {
  }

  virtual ~OmniSci_load_table_binary_columnar_polys_result() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_columnar_polys_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_load_table_binary_columnar_polys_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_columnar_polys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_columnar_polys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_columnar_polys_presult__isset {
  _OmniSci_load_table_binary_columnar_polys_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_columnar_polys_presult__isset;

class OmniSci_load_table_binary_columnar_polys_presult {
 public:


  virtual ~OmniSci_load_table_binary_columnar_polys_presult() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_columnar_polys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_load_table_binary_arrow_args__isset {
  _OmniSci_load_table_binary_arrow_args__isset() : session(false), table_name(false), arrow_stream(false), use_column_names(true) {}
  bool session :1;
  bool table_name :1;
  bool arrow_stream :1;
  bool use_column_names :1;
} _OmniSci_load_table_binary_arrow_args__isset;

class OmniSci_load_table_binary_arrow_args {
 public:

  OmniSci_load_table_binary_arrow_args(const OmniSci_load_table_binary_arrow_args&);
  OmniSci_load_table_binary_arrow_args& operator=(const OmniSci_load_table_binary_arrow_args&);
  OmniSci_load_table_binary_arrow_args() noexcept
                                       : session(),
                                         table_name(),
                                         arrow_stream(),
                                         use_column_names(false) {
  }

  virtual ~OmniSci_load_table_binary_arrow_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::string arrow_stream;
  bool use_column_names;

  _OmniSci_load_table_binary_arrow_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_arrow_stream(const std::string& val);

  void __set_use_column_names(const bool val);

  bool operator == (const OmniSci_load_table_binary_arrow_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(arrow_stream == rhs.arrow_stream))
      return false;
    if (!(use_column_names == rhs.use_column_names))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_arrow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_arrow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_load_table_binary_arrow_pargs {
 public:


  virtual ~OmniSci_load_table_binary_arrow_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::string* arrow_stream;
  const bool* use_column_names;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_arrow_result__isset {
  _OmniSci_load_table_binary_arrow_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_arrow_result__isset;

class OmniSci_load_table_binary_arrow_result {
 public:

  OmniSci_load_table_binary_arrow_result(const OmniSci_load_table_binary_arrow_result&);
  OmniSci_load_table_binary_arrow_result& operator=(const OmniSci_load_table_binary_arrow_result&);
  OmniSci_load_table_binary_arrow_result() noexcept {
  }

  virtual ~OmniSci_load_table_binary_arrow_result() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_arrow_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_load_table_binary_arrow_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_binary_arrow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_binary_arrow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_binary_arrow_presult__isset {
  _OmniSci_load_table_binary_arrow_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_binary_arrow_presult__isset;

class OmniSci_load_table_binary_arrow_presult {
 public:


  virtual ~OmniSci_load_table_binary_arrow_presult() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_binary_arrow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_load_table_args__isset {
  _OmniSci_load_table_args__isset() : session(false), table_name(false), rows(false), column_names(true) {}
  bool session :1;
  bool table_name :1;
  bool rows :1;
  bool column_names :1;
} _OmniSci_load_table_args__isset;

class OmniSci_load_table_args {
 public:

  OmniSci_load_table_args(const OmniSci_load_table_args&);
  OmniSci_load_table_args& operator=(const OmniSci_load_table_args&);
  OmniSci_load_table_args() noexcept
                          : session(),
                            table_name() {

  }

  virtual ~OmniSci_load_table_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::vector<TStringRow>  rows;
  std::vector<std::string>  column_names;

  _OmniSci_load_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_rows(const std::vector<TStringRow> & val);

  void __set_column_names(const std::vector<std::string> & val);

  bool operator == (const OmniSci_load_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(rows == rhs.rows))
      return false;
    if (!(column_names == rhs.column_names))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_load_table_pargs {
 public:


  virtual ~OmniSci_load_table_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TStringRow> * rows;
  const std::vector<std::string> * column_names;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_result__isset {
  _OmniSci_load_table_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_result__isset;

class OmniSci_load_table_result {
 public:

  OmniSci_load_table_result(const OmniSci_load_table_result&);
  OmniSci_load_table_result& operator=(const OmniSci_load_table_result&);
  OmniSci_load_table_result() noexcept {
  }

  virtual ~OmniSci_load_table_result() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_load_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_load_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_load_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_load_table_presult__isset {
  _OmniSci_load_table_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_load_table_presult__isset;

class OmniSci_load_table_presult {
 public:


  virtual ~OmniSci_load_table_presult() noexcept;
  TOmniSciException e;

  _OmniSci_load_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_detect_column_types_args__isset {
  _OmniSci_detect_column_types_args__isset() : session(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool file_name :1;
  bool copy_params :1;
} _OmniSci_detect_column_types_args__isset;

class OmniSci_detect_column_types_args {
 public:

  OmniSci_detect_column_types_args(const OmniSci_detect_column_types_args&);
  OmniSci_detect_column_types_args& operator=(const OmniSci_detect_column_types_args&);
  OmniSci_detect_column_types_args() noexcept
                                   : session(),
                                     file_name() {
  }

  virtual ~OmniSci_detect_column_types_args() noexcept;
  TSessionId session;
  std::string file_name;
  TCopyParams copy_params;

  _OmniSci_detect_column_types_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const OmniSci_detect_column_types_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_detect_column_types_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_detect_column_types_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_detect_column_types_pargs {
 public:


  virtual ~OmniSci_detect_column_types_pargs() noexcept;
  const TSessionId* session;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_detect_column_types_result__isset {
  _OmniSci_detect_column_types_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_detect_column_types_result__isset;

class OmniSci_detect_column_types_result {
 public:

  OmniSci_detect_column_types_result(const OmniSci_detect_column_types_result&);
  OmniSci_detect_column_types_result& operator=(const OmniSci_detect_column_types_result&);
  OmniSci_detect_column_types_result() noexcept {
  }

  virtual ~OmniSci_detect_column_types_result() noexcept;
  TDetectResult success;
  TOmniSciException e;

  _OmniSci_detect_column_types_result__isset __isset;

  void __set_success(const TDetectResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_detect_column_types_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_detect_column_types_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_detect_column_types_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_detect_column_types_presult__isset {
  _OmniSci_detect_column_types_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_detect_column_types_presult__isset;

class OmniSci_detect_column_types_presult {
 public:


  virtual ~OmniSci_detect_column_types_presult() noexcept;
  TDetectResult* success;
  TOmniSciException e;

  _OmniSci_detect_column_types_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_create_table_args__isset {
  _OmniSci_create_table_args__isset() : session(false), table_name(false), row_desc(false), file_type(true), create_params(false) {}
  bool session :1;
  bool table_name :1;
  bool row_desc :1;
  bool file_type :1;
  bool create_params :1;
} _OmniSci_create_table_args__isset;

class OmniSci_create_table_args {
 public:

  OmniSci_create_table_args(const OmniSci_create_table_args&);
  OmniSci_create_table_args& operator=(const OmniSci_create_table_args&);
  OmniSci_create_table_args() noexcept
                            : session(),
                              table_name(),
                              file_type((TFileType::type)0) {
    file_type = (TFileType::type)0;

  }

  virtual ~OmniSci_create_table_args() noexcept;
  TSessionId session;
  std::string table_name;
  TRowDescriptor row_desc;
  /**
   * 
   * @see TFileType
   */
  TFileType::type file_type;
  TCreateParams create_params;

  _OmniSci_create_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_file_type(const TFileType::type val);

  void __set_create_params(const TCreateParams& val);

  bool operator == (const OmniSci_create_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(file_type == rhs.file_type))
      return false;
    if (!(create_params == rhs.create_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_create_table_pargs {
 public:


  virtual ~OmniSci_create_table_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const TRowDescriptor* row_desc;
  /**
   * 
   * @see TFileType
   */
  const TFileType::type* file_type;
  const TCreateParams* create_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_table_result__isset {
  _OmniSci_create_table_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_create_table_result__isset;

class OmniSci_create_table_result {
 public:

  OmniSci_create_table_result(const OmniSci_create_table_result&);
  OmniSci_create_table_result& operator=(const OmniSci_create_table_result&);
  OmniSci_create_table_result() noexcept {
  }

  virtual ~OmniSci_create_table_result() noexcept;
  TOmniSciException e;

  _OmniSci_create_table_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_create_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_create_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_create_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_create_table_presult__isset {
  _OmniSci_create_table_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_create_table_presult__isset;

class OmniSci_create_table_presult {
 public:


  virtual ~OmniSci_create_table_presult() noexcept;
  TOmniSciException e;

  _OmniSci_create_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_import_table_args__isset {
  _OmniSci_import_table_args__isset() : session(false), table_name(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool table_name :1;
  bool file_name :1;
  bool copy_params :1;
} _OmniSci_import_table_args__isset;

class OmniSci_import_table_args {
 public:

  OmniSci_import_table_args(const OmniSci_import_table_args&);
  OmniSci_import_table_args& operator=(const OmniSci_import_table_args&);
  OmniSci_import_table_args() noexcept
                            : session(),
                              table_name(),
                              file_name() {
  }

  virtual ~OmniSci_import_table_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::string file_name;
  TCopyParams copy_params;

  _OmniSci_import_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const OmniSci_import_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_import_table_pargs {
 public:


  virtual ~OmniSci_import_table_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_table_result__isset {
  _OmniSci_import_table_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_import_table_result__isset;

class OmniSci_import_table_result {
 public:

  OmniSci_import_table_result(const OmniSci_import_table_result&);
  OmniSci_import_table_result& operator=(const OmniSci_import_table_result&);
  OmniSci_import_table_result() noexcept {
  }

  virtual ~OmniSci_import_table_result() noexcept;
  TOmniSciException e;

  _OmniSci_import_table_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_import_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_table_presult__isset {
  _OmniSci_import_table_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_import_table_presult__isset;

class OmniSci_import_table_presult {
 public:


  virtual ~OmniSci_import_table_presult() noexcept;
  TOmniSciException e;

  _OmniSci_import_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_import_geo_table_args__isset {
  _OmniSci_import_geo_table_args__isset() : session(false), table_name(false), file_name(false), copy_params(false), row_desc(false), create_params(false) {}
  bool session :1;
  bool table_name :1;
  bool file_name :1;
  bool copy_params :1;
  bool row_desc :1;
  bool create_params :1;
} _OmniSci_import_geo_table_args__isset;

class OmniSci_import_geo_table_args {
 public:

  OmniSci_import_geo_table_args(const OmniSci_import_geo_table_args&);
  OmniSci_import_geo_table_args& operator=(const OmniSci_import_geo_table_args&);
  OmniSci_import_geo_table_args() noexcept
                                : session(),
                                  table_name(),
                                  file_name() {
  }

  virtual ~OmniSci_import_geo_table_args() noexcept;
  TSessionId session;
  std::string table_name;
  std::string file_name;
  TCopyParams copy_params;
  TRowDescriptor row_desc;
  TCreateParams create_params;

  _OmniSci_import_geo_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_create_params(const TCreateParams& val);

  bool operator == (const OmniSci_import_geo_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(create_params == rhs.create_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_geo_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_geo_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_import_geo_table_pargs {
 public:


  virtual ~OmniSci_import_geo_table_pargs() noexcept;
  const TSessionId* session;
  const std::string* table_name;
  const std::string* file_name;
  const TCopyParams* copy_params;
  const TRowDescriptor* row_desc;
  const TCreateParams* create_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_geo_table_result__isset {
  _OmniSci_import_geo_table_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_import_geo_table_result__isset;

class OmniSci_import_geo_table_result {
 public:

  OmniSci_import_geo_table_result(const OmniSci_import_geo_table_result&);
  OmniSci_import_geo_table_result& operator=(const OmniSci_import_geo_table_result&);
  OmniSci_import_geo_table_result() noexcept {
  }

  virtual ~OmniSci_import_geo_table_result() noexcept;
  TOmniSciException e;

  _OmniSci_import_geo_table_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_import_geo_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_geo_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_geo_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_geo_table_presult__isset {
  _OmniSci_import_geo_table_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_import_geo_table_presult__isset;

class OmniSci_import_geo_table_presult {
 public:


  virtual ~OmniSci_import_geo_table_presult() noexcept;
  TOmniSciException e;

  _OmniSci_import_geo_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_import_table_status_args__isset {
  _OmniSci_import_table_status_args__isset() : session(false), import_id(false) {}
  bool session :1;
  bool import_id :1;
} _OmniSci_import_table_status_args__isset;

class OmniSci_import_table_status_args {
 public:

  OmniSci_import_table_status_args(const OmniSci_import_table_status_args&);
  OmniSci_import_table_status_args& operator=(const OmniSci_import_table_status_args&);
  OmniSci_import_table_status_args() noexcept
                                   : session(),
                                     import_id() {
  }

  virtual ~OmniSci_import_table_status_args() noexcept;
  TSessionId session;
  std::string import_id;

  _OmniSci_import_table_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_import_id(const std::string& val);

  bool operator == (const OmniSci_import_table_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(import_id == rhs.import_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_table_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_table_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_import_table_status_pargs {
 public:


  virtual ~OmniSci_import_table_status_pargs() noexcept;
  const TSessionId* session;
  const std::string* import_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_table_status_result__isset {
  _OmniSci_import_table_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_import_table_status_result__isset;

class OmniSci_import_table_status_result {
 public:

  OmniSci_import_table_status_result(const OmniSci_import_table_status_result&);
  OmniSci_import_table_status_result& operator=(const OmniSci_import_table_status_result&);
  OmniSci_import_table_status_result() noexcept {
  }

  virtual ~OmniSci_import_table_status_result() noexcept;
  TImportStatus success;
  TOmniSciException e;

  _OmniSci_import_table_status_result__isset __isset;

  void __set_success(const TImportStatus& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_import_table_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_import_table_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_import_table_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_import_table_status_presult__isset {
  _OmniSci_import_table_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_import_table_status_presult__isset;

class OmniSci_import_table_status_presult {
 public:


  virtual ~OmniSci_import_table_status_presult() noexcept;
  TImportStatus* success;
  TOmniSciException e;

  _OmniSci_import_table_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_first_geo_file_in_archive_args__isset {
  _OmniSci_get_first_geo_file_in_archive_args__isset() : session(false), archive_path(false), copy_params(false) {}
  bool session :1;
  bool archive_path :1;
  bool copy_params :1;
} _OmniSci_get_first_geo_file_in_archive_args__isset;

class OmniSci_get_first_geo_file_in_archive_args {
 public:

  OmniSci_get_first_geo_file_in_archive_args(const OmniSci_get_first_geo_file_in_archive_args&);
  OmniSci_get_first_geo_file_in_archive_args& operator=(const OmniSci_get_first_geo_file_in_archive_args&);
  OmniSci_get_first_geo_file_in_archive_args() noexcept
                                             : session(),
                                               archive_path() {
  }

  virtual ~OmniSci_get_first_geo_file_in_archive_args() noexcept;
  TSessionId session;
  std::string archive_path;
  TCopyParams copy_params;

  _OmniSci_get_first_geo_file_in_archive_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_archive_path(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const OmniSci_get_first_geo_file_in_archive_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(archive_path == rhs.archive_path))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_first_geo_file_in_archive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_first_geo_file_in_archive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_first_geo_file_in_archive_pargs {
 public:


  virtual ~OmniSci_get_first_geo_file_in_archive_pargs() noexcept;
  const TSessionId* session;
  const std::string* archive_path;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_first_geo_file_in_archive_result__isset {
  _OmniSci_get_first_geo_file_in_archive_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_first_geo_file_in_archive_result__isset;

class OmniSci_get_first_geo_file_in_archive_result {
 public:

  OmniSci_get_first_geo_file_in_archive_result(const OmniSci_get_first_geo_file_in_archive_result&);
  OmniSci_get_first_geo_file_in_archive_result& operator=(const OmniSci_get_first_geo_file_in_archive_result&);
  OmniSci_get_first_geo_file_in_archive_result() noexcept
                                               : success() {
  }

  virtual ~OmniSci_get_first_geo_file_in_archive_result() noexcept;
  std::string success;
  TOmniSciException e;

  _OmniSci_get_first_geo_file_in_archive_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_first_geo_file_in_archive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_first_geo_file_in_archive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_first_geo_file_in_archive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_first_geo_file_in_archive_presult__isset {
  _OmniSci_get_first_geo_file_in_archive_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_first_geo_file_in_archive_presult__isset;

class OmniSci_get_first_geo_file_in_archive_presult {
 public:


  virtual ~OmniSci_get_first_geo_file_in_archive_presult() noexcept;
  std::string* success;
  TOmniSciException e;

  _OmniSci_get_first_geo_file_in_archive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_all_files_in_archive_args__isset {
  _OmniSci_get_all_files_in_archive_args__isset() : session(false), archive_path(false), copy_params(false) {}
  bool session :1;
  bool archive_path :1;
  bool copy_params :1;
} _OmniSci_get_all_files_in_archive_args__isset;

class OmniSci_get_all_files_in_archive_args {
 public:

  OmniSci_get_all_files_in_archive_args(const OmniSci_get_all_files_in_archive_args&);
  OmniSci_get_all_files_in_archive_args& operator=(const OmniSci_get_all_files_in_archive_args&);
  OmniSci_get_all_files_in_archive_args() noexcept
                                        : session(),
                                          archive_path() {
  }

  virtual ~OmniSci_get_all_files_in_archive_args() noexcept;
  TSessionId session;
  std::string archive_path;
  TCopyParams copy_params;

  _OmniSci_get_all_files_in_archive_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_archive_path(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const OmniSci_get_all_files_in_archive_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(archive_path == rhs.archive_path))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_all_files_in_archive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_all_files_in_archive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_all_files_in_archive_pargs {
 public:


  virtual ~OmniSci_get_all_files_in_archive_pargs() noexcept;
  const TSessionId* session;
  const std::string* archive_path;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_all_files_in_archive_result__isset {
  _OmniSci_get_all_files_in_archive_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_all_files_in_archive_result__isset;

class OmniSci_get_all_files_in_archive_result {
 public:

  OmniSci_get_all_files_in_archive_result(const OmniSci_get_all_files_in_archive_result&);
  OmniSci_get_all_files_in_archive_result& operator=(const OmniSci_get_all_files_in_archive_result&);
  OmniSci_get_all_files_in_archive_result() noexcept {
  }

  virtual ~OmniSci_get_all_files_in_archive_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_all_files_in_archive_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_all_files_in_archive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_all_files_in_archive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_all_files_in_archive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_all_files_in_archive_presult__isset {
  _OmniSci_get_all_files_in_archive_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_all_files_in_archive_presult__isset;

class OmniSci_get_all_files_in_archive_presult {
 public:


  virtual ~OmniSci_get_all_files_in_archive_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_all_files_in_archive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_layers_in_geo_file_args__isset {
  _OmniSci_get_layers_in_geo_file_args__isset() : session(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool file_name :1;
  bool copy_params :1;
} _OmniSci_get_layers_in_geo_file_args__isset;

class OmniSci_get_layers_in_geo_file_args {
 public:

  OmniSci_get_layers_in_geo_file_args(const OmniSci_get_layers_in_geo_file_args&);
  OmniSci_get_layers_in_geo_file_args& operator=(const OmniSci_get_layers_in_geo_file_args&);
  OmniSci_get_layers_in_geo_file_args() noexcept
                                      : session(),
                                        file_name() {
  }

  virtual ~OmniSci_get_layers_in_geo_file_args() noexcept;
  TSessionId session;
  std::string file_name;
  TCopyParams copy_params;

  _OmniSci_get_layers_in_geo_file_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const OmniSci_get_layers_in_geo_file_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_layers_in_geo_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_layers_in_geo_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_layers_in_geo_file_pargs {
 public:


  virtual ~OmniSci_get_layers_in_geo_file_pargs() noexcept;
  const TSessionId* session;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_layers_in_geo_file_result__isset {
  _OmniSci_get_layers_in_geo_file_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_layers_in_geo_file_result__isset;

class OmniSci_get_layers_in_geo_file_result {
 public:

  OmniSci_get_layers_in_geo_file_result(const OmniSci_get_layers_in_geo_file_result&);
  OmniSci_get_layers_in_geo_file_result& operator=(const OmniSci_get_layers_in_geo_file_result&);
  OmniSci_get_layers_in_geo_file_result() noexcept {
  }

  virtual ~OmniSci_get_layers_in_geo_file_result() noexcept;
  std::vector<TGeoFileLayerInfo>  success;
  TOmniSciException e;

  _OmniSci_get_layers_in_geo_file_result__isset __isset;

  void __set_success(const std::vector<TGeoFileLayerInfo> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_layers_in_geo_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_layers_in_geo_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_layers_in_geo_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_layers_in_geo_file_presult__isset {
  _OmniSci_get_layers_in_geo_file_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_layers_in_geo_file_presult__isset;

class OmniSci_get_layers_in_geo_file_presult {
 public:


  virtual ~OmniSci_get_layers_in_geo_file_presult() noexcept;
  std::vector<TGeoFileLayerInfo> * success;
  TOmniSciException e;

  _OmniSci_get_layers_in_geo_file_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_query_get_outer_fragment_count_args__isset {
  _OmniSci_query_get_outer_fragment_count_args__isset() : session(false), query(false) {}
  bool session :1;
  bool query :1;
} _OmniSci_query_get_outer_fragment_count_args__isset;

class OmniSci_query_get_outer_fragment_count_args {
 public:

  OmniSci_query_get_outer_fragment_count_args(const OmniSci_query_get_outer_fragment_count_args&);
  OmniSci_query_get_outer_fragment_count_args& operator=(const OmniSci_query_get_outer_fragment_count_args&);
  OmniSci_query_get_outer_fragment_count_args() noexcept
                                              : session(),
                                                query() {
  }

  virtual ~OmniSci_query_get_outer_fragment_count_args() noexcept;
  TSessionId session;
  std::string query;

  _OmniSci_query_get_outer_fragment_count_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  bool operator == (const OmniSci_query_get_outer_fragment_count_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const OmniSci_query_get_outer_fragment_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_query_get_outer_fragment_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_query_get_outer_fragment_count_pargs {
 public:


  virtual ~OmniSci_query_get_outer_fragment_count_pargs() noexcept;
  const TSessionId* session;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_query_get_outer_fragment_count_result__isset {
  _OmniSci_query_get_outer_fragment_count_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_query_get_outer_fragment_count_result__isset;

class OmniSci_query_get_outer_fragment_count_result {
 public:

  OmniSci_query_get_outer_fragment_count_result(const OmniSci_query_get_outer_fragment_count_result&);
  OmniSci_query_get_outer_fragment_count_result& operator=(const OmniSci_query_get_outer_fragment_count_result&);
  OmniSci_query_get_outer_fragment_count_result() noexcept
                                                : success(0) {
  }

  virtual ~OmniSci_query_get_outer_fragment_count_result() noexcept;
  int64_t success;
  TOmniSciException e;

  _OmniSci_query_get_outer_fragment_count_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_query_get_outer_fragment_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_query_get_outer_fragment_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_query_get_outer_fragment_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_query_get_outer_fragment_count_presult__isset {
  _OmniSci_query_get_outer_fragment_count_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_query_get_outer_fragment_count_presult__isset;

class OmniSci_query_get_outer_fragment_count_presult {
 public:


  virtual ~OmniSci_query_get_outer_fragment_count_presult() noexcept;
  int64_t* success;
  TOmniSciException e;

  _OmniSci_query_get_outer_fragment_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_check_table_consistency_args__isset {
  _OmniSci_check_table_consistency_args__isset() : session(false), table_id(false) {}
  bool session :1;
  bool table_id :1;
} _OmniSci_check_table_consistency_args__isset;

class OmniSci_check_table_consistency_args {
 public:

  OmniSci_check_table_consistency_args(const OmniSci_check_table_consistency_args&);
  OmniSci_check_table_consistency_args& operator=(const OmniSci_check_table_consistency_args&);
  OmniSci_check_table_consistency_args() noexcept
                                       : session(),
                                         table_id(0) {
  }

  virtual ~OmniSci_check_table_consistency_args() noexcept;
  TSessionId session;
  int32_t table_id;

  _OmniSci_check_table_consistency_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_id(const int32_t val);

  bool operator == (const OmniSci_check_table_consistency_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_check_table_consistency_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_check_table_consistency_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_check_table_consistency_pargs {
 public:


  virtual ~OmniSci_check_table_consistency_pargs() noexcept;
  const TSessionId* session;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_check_table_consistency_result__isset {
  _OmniSci_check_table_consistency_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_check_table_consistency_result__isset;

class OmniSci_check_table_consistency_result {
 public:

  OmniSci_check_table_consistency_result(const OmniSci_check_table_consistency_result&);
  OmniSci_check_table_consistency_result& operator=(const OmniSci_check_table_consistency_result&);
  OmniSci_check_table_consistency_result() noexcept {
  }

  virtual ~OmniSci_check_table_consistency_result() noexcept;
  TTableMeta success;
  TOmniSciException e;

  _OmniSci_check_table_consistency_result__isset __isset;

  void __set_success(const TTableMeta& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_check_table_consistency_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_check_table_consistency_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_check_table_consistency_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_check_table_consistency_presult__isset {
  _OmniSci_check_table_consistency_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_check_table_consistency_presult__isset;

class OmniSci_check_table_consistency_presult {
 public:


  virtual ~OmniSci_check_table_consistency_presult() noexcept;
  TTableMeta* success;
  TOmniSciException e;

  _OmniSci_check_table_consistency_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_start_query_args__isset {
  _OmniSci_start_query_args__isset() : leaf_session(false), parent_session(false), query_ra(false), start_time_str(false), just_explain(false), outer_fragment_indices(false) {}
  bool leaf_session :1;
  bool parent_session :1;
  bool query_ra :1;
  bool start_time_str :1;
  bool just_explain :1;
  bool outer_fragment_indices :1;
} _OmniSci_start_query_args__isset;

class OmniSci_start_query_args {
 public:

  OmniSci_start_query_args(const OmniSci_start_query_args&);
  OmniSci_start_query_args& operator=(const OmniSci_start_query_args&);
  OmniSci_start_query_args() noexcept
                           : leaf_session(),
                             parent_session(),
                             query_ra(),
                             start_time_str(),
                             just_explain(0) {
  }

  virtual ~OmniSci_start_query_args() noexcept;
  TSessionId leaf_session;
  TSessionId parent_session;
  std::string query_ra;
  std::string start_time_str;
  bool just_explain;
  std::vector<int64_t>  outer_fragment_indices;

  _OmniSci_start_query_args__isset __isset;

  void __set_leaf_session(const TSessionId& val);

  void __set_parent_session(const TSessionId& val);

  void __set_query_ra(const std::string& val);

  void __set_start_time_str(const std::string& val);

  void __set_just_explain(const bool val);

  void __set_outer_fragment_indices(const std::vector<int64_t> & val);

  bool operator == (const OmniSci_start_query_args & rhs) const
  {
    if (!(leaf_session == rhs.leaf_session))
      return false;
    if (!(parent_session == rhs.parent_session))
      return false;
    if (!(query_ra == rhs.query_ra))
      return false;
    if (!(start_time_str == rhs.start_time_str))
      return false;
    if (!(just_explain == rhs.just_explain))
      return false;
    if (!(outer_fragment_indices == rhs.outer_fragment_indices))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_start_query_pargs {
 public:


  virtual ~OmniSci_start_query_pargs() noexcept;
  const TSessionId* leaf_session;
  const TSessionId* parent_session;
  const std::string* query_ra;
  const std::string* start_time_str;
  const bool* just_explain;
  const std::vector<int64_t> * outer_fragment_indices;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_query_result__isset {
  _OmniSci_start_query_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_start_query_result__isset;

class OmniSci_start_query_result {
 public:

  OmniSci_start_query_result(const OmniSci_start_query_result&);
  OmniSci_start_query_result& operator=(const OmniSci_start_query_result&);
  OmniSci_start_query_result() noexcept {
  }

  virtual ~OmniSci_start_query_result() noexcept;
  TPendingQuery success;
  TOmniSciException e;

  _OmniSci_start_query_result__isset __isset;

  void __set_success(const TPendingQuery& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_start_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_query_presult__isset {
  _OmniSci_start_query_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_start_query_presult__isset;

class OmniSci_start_query_presult {
 public:


  virtual ~OmniSci_start_query_presult() noexcept;
  TPendingQuery* success;
  TOmniSciException e;

  _OmniSci_start_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_execute_query_step_args__isset {
  _OmniSci_execute_query_step_args__isset() : pending_query(false), subquery_id(false), start_time_str(false) {}
  bool pending_query :1;
  bool subquery_id :1;
  bool start_time_str :1;
} _OmniSci_execute_query_step_args__isset;

class OmniSci_execute_query_step_args {
 public:

  OmniSci_execute_query_step_args(const OmniSci_execute_query_step_args&);
  OmniSci_execute_query_step_args& operator=(const OmniSci_execute_query_step_args&);
  OmniSci_execute_query_step_args() noexcept
                                  : subquery_id(0),
                                    start_time_str() {
  }

  virtual ~OmniSci_execute_query_step_args() noexcept;
  TPendingQuery pending_query;
  TSubqueryId subquery_id;
  std::string start_time_str;

  _OmniSci_execute_query_step_args__isset __isset;

  void __set_pending_query(const TPendingQuery& val);

  void __set_subquery_id(const TSubqueryId val);

  void __set_start_time_str(const std::string& val);

  bool operator == (const OmniSci_execute_query_step_args & rhs) const
  {
    if (!(pending_query == rhs.pending_query))
      return false;
    if (!(subquery_id == rhs.subquery_id))
      return false;
    if (!(start_time_str == rhs.start_time_str))
      return false;
    return true;
  }
  bool operator != (const OmniSci_execute_query_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_execute_query_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_execute_query_step_pargs {
 public:


  virtual ~OmniSci_execute_query_step_pargs() noexcept;
  const TPendingQuery* pending_query;
  const TSubqueryId* subquery_id;
  const std::string* start_time_str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_execute_query_step_result__isset {
  _OmniSci_execute_query_step_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_execute_query_step_result__isset;

class OmniSci_execute_query_step_result {
 public:

  OmniSci_execute_query_step_result(const OmniSci_execute_query_step_result&);
  OmniSci_execute_query_step_result& operator=(const OmniSci_execute_query_step_result&);
  OmniSci_execute_query_step_result() noexcept {
  }

  virtual ~OmniSci_execute_query_step_result() noexcept;
  TStepResult success;
  TOmniSciException e;

  _OmniSci_execute_query_step_result__isset __isset;

  void __set_success(const TStepResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_execute_query_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_execute_query_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_execute_query_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_execute_query_step_presult__isset {
  _OmniSci_execute_query_step_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_execute_query_step_presult__isset;

class OmniSci_execute_query_step_presult {
 public:


  virtual ~OmniSci_execute_query_step_presult() noexcept;
  TStepResult* success;
  TOmniSciException e;

  _OmniSci_execute_query_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_broadcast_serialized_rows_args__isset {
  _OmniSci_broadcast_serialized_rows_args__isset() : serialized_rows(false), row_desc(false), query_id(false), subquery_id(false), is_final_subquery_result(false) {}
  bool serialized_rows :1;
  bool row_desc :1;
  bool query_id :1;
  bool subquery_id :1;
  bool is_final_subquery_result :1;
} _OmniSci_broadcast_serialized_rows_args__isset;

class OmniSci_broadcast_serialized_rows_args {
 public:

  OmniSci_broadcast_serialized_rows_args(const OmniSci_broadcast_serialized_rows_args&);
  OmniSci_broadcast_serialized_rows_args& operator=(const OmniSci_broadcast_serialized_rows_args&);
  OmniSci_broadcast_serialized_rows_args() noexcept
                                         : query_id(0),
                                           subquery_id(0),
                                           is_final_subquery_result(0) {
  }

  virtual ~OmniSci_broadcast_serialized_rows_args() noexcept;
   ::TSerializedRows serialized_rows;
  TRowDescriptor row_desc;
  TQueryId query_id;
  TSubqueryId subquery_id;
  bool is_final_subquery_result;

  _OmniSci_broadcast_serialized_rows_args__isset __isset;

  void __set_serialized_rows(const  ::TSerializedRows& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_query_id(const TQueryId val);

  void __set_subquery_id(const TSubqueryId val);

  void __set_is_final_subquery_result(const bool val);

  bool operator == (const OmniSci_broadcast_serialized_rows_args & rhs) const
  {
    if (!(serialized_rows == rhs.serialized_rows))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(query_id == rhs.query_id))
      return false;
    if (!(subquery_id == rhs.subquery_id))
      return false;
    if (!(is_final_subquery_result == rhs.is_final_subquery_result))
      return false;
    return true;
  }
  bool operator != (const OmniSci_broadcast_serialized_rows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_broadcast_serialized_rows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_broadcast_serialized_rows_pargs {
 public:


  virtual ~OmniSci_broadcast_serialized_rows_pargs() noexcept;
  const  ::TSerializedRows* serialized_rows;
  const TRowDescriptor* row_desc;
  const TQueryId* query_id;
  const TSubqueryId* subquery_id;
  const bool* is_final_subquery_result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_broadcast_serialized_rows_result__isset {
  _OmniSci_broadcast_serialized_rows_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_broadcast_serialized_rows_result__isset;

class OmniSci_broadcast_serialized_rows_result {
 public:

  OmniSci_broadcast_serialized_rows_result(const OmniSci_broadcast_serialized_rows_result&);
  OmniSci_broadcast_serialized_rows_result& operator=(const OmniSci_broadcast_serialized_rows_result&);
  OmniSci_broadcast_serialized_rows_result() noexcept {
  }

  virtual ~OmniSci_broadcast_serialized_rows_result() noexcept;
  TOmniSciException e;

  _OmniSci_broadcast_serialized_rows_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_broadcast_serialized_rows_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_broadcast_serialized_rows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_broadcast_serialized_rows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_broadcast_serialized_rows_presult__isset {
  _OmniSci_broadcast_serialized_rows_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_broadcast_serialized_rows_presult__isset;

class OmniSci_broadcast_serialized_rows_presult {
 public:


  virtual ~OmniSci_broadcast_serialized_rows_presult() noexcept;
  TOmniSciException e;

  _OmniSci_broadcast_serialized_rows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_start_render_query_args__isset {
  _OmniSci_start_render_query_args__isset() : session(false), widget_id(false), node_idx(false), vega_json(false) {}
  bool session :1;
  bool widget_id :1;
  bool node_idx :1;
  bool vega_json :1;
} _OmniSci_start_render_query_args__isset;

class OmniSci_start_render_query_args {
 public:

  OmniSci_start_render_query_args(const OmniSci_start_render_query_args&);
  OmniSci_start_render_query_args& operator=(const OmniSci_start_render_query_args&);
  OmniSci_start_render_query_args() noexcept
                                  : session(),
                                    widget_id(0),
                                    node_idx(0),
                                    vega_json() {
  }

  virtual ~OmniSci_start_render_query_args() noexcept;
  TSessionId session;
  int64_t widget_id;
  int16_t node_idx;
  std::string vega_json;

  _OmniSci_start_render_query_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_node_idx(const int16_t val);

  void __set_vega_json(const std::string& val);

  bool operator == (const OmniSci_start_render_query_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(node_idx == rhs.node_idx))
      return false;
    if (!(vega_json == rhs.vega_json))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_render_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_render_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_start_render_query_pargs {
 public:


  virtual ~OmniSci_start_render_query_pargs() noexcept;
  const TSessionId* session;
  const int64_t* widget_id;
  const int16_t* node_idx;
  const std::string* vega_json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_render_query_result__isset {
  _OmniSci_start_render_query_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_start_render_query_result__isset;

class OmniSci_start_render_query_result {
 public:

  OmniSci_start_render_query_result(const OmniSci_start_render_query_result&);
  OmniSci_start_render_query_result& operator=(const OmniSci_start_render_query_result&);
  OmniSci_start_render_query_result() noexcept {
  }

  virtual ~OmniSci_start_render_query_result() noexcept;
  TPendingRenderQuery success;
  TOmniSciException e;

  _OmniSci_start_render_query_result__isset __isset;

  void __set_success(const TPendingRenderQuery& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_start_render_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_start_render_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_start_render_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_start_render_query_presult__isset {
  _OmniSci_start_render_query_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_start_render_query_presult__isset;

class OmniSci_start_render_query_presult {
 public:


  virtual ~OmniSci_start_render_query_presult() noexcept;
  TPendingRenderQuery* success;
  TOmniSciException e;

  _OmniSci_start_render_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_execute_next_render_step_args__isset {
  _OmniSci_execute_next_render_step_args__isset() : pending_render(false), merged_data(false) {}
  bool pending_render :1;
  bool merged_data :1;
} _OmniSci_execute_next_render_step_args__isset;

class OmniSci_execute_next_render_step_args {
 public:

  OmniSci_execute_next_render_step_args(const OmniSci_execute_next_render_step_args&);
  OmniSci_execute_next_render_step_args& operator=(const OmniSci_execute_next_render_step_args&);
  OmniSci_execute_next_render_step_args() noexcept {
  }

  virtual ~OmniSci_execute_next_render_step_args() noexcept;
  TPendingRenderQuery pending_render;
  TRenderAggDataMap merged_data;

  _OmniSci_execute_next_render_step_args__isset __isset;

  void __set_pending_render(const TPendingRenderQuery& val);

  void __set_merged_data(const TRenderAggDataMap& val);

  bool operator == (const OmniSci_execute_next_render_step_args & rhs) const
  {
    if (!(pending_render == rhs.pending_render))
      return false;
    if (!(merged_data == rhs.merged_data))
      return false;
    return true;
  }
  bool operator != (const OmniSci_execute_next_render_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_execute_next_render_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_execute_next_render_step_pargs {
 public:


  virtual ~OmniSci_execute_next_render_step_pargs() noexcept;
  const TPendingRenderQuery* pending_render;
  const TRenderAggDataMap* merged_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_execute_next_render_step_result__isset {
  _OmniSci_execute_next_render_step_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_execute_next_render_step_result__isset;

class OmniSci_execute_next_render_step_result {
 public:

  OmniSci_execute_next_render_step_result(const OmniSci_execute_next_render_step_result&);
  OmniSci_execute_next_render_step_result& operator=(const OmniSci_execute_next_render_step_result&);
  OmniSci_execute_next_render_step_result() noexcept {
  }

  virtual ~OmniSci_execute_next_render_step_result() noexcept;
  TRenderStepResult success;
  TOmniSciException e;

  _OmniSci_execute_next_render_step_result__isset __isset;

  void __set_success(const TRenderStepResult& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_execute_next_render_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_execute_next_render_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_execute_next_render_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_execute_next_render_step_presult__isset {
  _OmniSci_execute_next_render_step_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_execute_next_render_step_presult__isset;

class OmniSci_execute_next_render_step_presult {
 public:


  virtual ~OmniSci_execute_next_render_step_presult() noexcept;
  TRenderStepResult* success;
  TOmniSciException e;

  _OmniSci_execute_next_render_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_insert_data_args__isset {
  _OmniSci_insert_data_args__isset() : session(false), insert_data(false) {}
  bool session :1;
  bool insert_data :1;
} _OmniSci_insert_data_args__isset;

class OmniSci_insert_data_args {
 public:

  OmniSci_insert_data_args(const OmniSci_insert_data_args&);
  OmniSci_insert_data_args& operator=(const OmniSci_insert_data_args&);
  OmniSci_insert_data_args() noexcept
                           : session() {
  }

  virtual ~OmniSci_insert_data_args() noexcept;
  TSessionId session;
  TInsertData insert_data;

  _OmniSci_insert_data_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_insert_data(const TInsertData& val);

  bool operator == (const OmniSci_insert_data_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(insert_data == rhs.insert_data))
      return false;
    return true;
  }
  bool operator != (const OmniSci_insert_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_insert_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_insert_data_pargs {
 public:


  virtual ~OmniSci_insert_data_pargs() noexcept;
  const TSessionId* session;
  const TInsertData* insert_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_insert_data_result__isset {
  _OmniSci_insert_data_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_insert_data_result__isset;

class OmniSci_insert_data_result {
 public:

  OmniSci_insert_data_result(const OmniSci_insert_data_result&);
  OmniSci_insert_data_result& operator=(const OmniSci_insert_data_result&);
  OmniSci_insert_data_result() noexcept {
  }

  virtual ~OmniSci_insert_data_result() noexcept;
  TOmniSciException e;

  _OmniSci_insert_data_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_insert_data_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_insert_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_insert_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_insert_data_presult__isset {
  _OmniSci_insert_data_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_insert_data_presult__isset;

class OmniSci_insert_data_presult {
 public:


  virtual ~OmniSci_insert_data_presult() noexcept;
  TOmniSciException e;

  _OmniSci_insert_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_checkpoint_args__isset {
  _OmniSci_checkpoint_args__isset() : session(false), table_id(false) {}
  bool session :1;
  bool table_id :1;
} _OmniSci_checkpoint_args__isset;

class OmniSci_checkpoint_args {
 public:

  OmniSci_checkpoint_args(const OmniSci_checkpoint_args&);
  OmniSci_checkpoint_args& operator=(const OmniSci_checkpoint_args&);
  OmniSci_checkpoint_args() noexcept
                          : session(),
                            table_id(0) {
  }

  virtual ~OmniSci_checkpoint_args() noexcept;
  TSessionId session;
  int32_t table_id;

  _OmniSci_checkpoint_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_id(const int32_t val);

  bool operator == (const OmniSci_checkpoint_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const OmniSci_checkpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_checkpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_checkpoint_pargs {
 public:


  virtual ~OmniSci_checkpoint_pargs() noexcept;
  const TSessionId* session;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_checkpoint_result__isset {
  _OmniSci_checkpoint_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_checkpoint_result__isset;

class OmniSci_checkpoint_result {
 public:

  OmniSci_checkpoint_result(const OmniSci_checkpoint_result&);
  OmniSci_checkpoint_result& operator=(const OmniSci_checkpoint_result&);
  OmniSci_checkpoint_result() noexcept {
  }

  virtual ~OmniSci_checkpoint_result() noexcept;
  TOmniSciException e;

  _OmniSci_checkpoint_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_checkpoint_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_checkpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_checkpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_checkpoint_presult__isset {
  _OmniSci_checkpoint_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_checkpoint_presult__isset;

class OmniSci_checkpoint_presult {
 public:


  virtual ~OmniSci_checkpoint_presult() noexcept;
  TOmniSciException e;

  _OmniSci_checkpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_roles_args__isset {
  _OmniSci_get_roles_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_roles_args__isset;

class OmniSci_get_roles_args {
 public:

  OmniSci_get_roles_args(const OmniSci_get_roles_args&);
  OmniSci_get_roles_args& operator=(const OmniSci_get_roles_args&);
  OmniSci_get_roles_args() noexcept
                         : session() {
  }

  virtual ~OmniSci_get_roles_args() noexcept;
  TSessionId session;

  _OmniSci_get_roles_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_roles_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_roles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_roles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_roles_pargs {
 public:


  virtual ~OmniSci_get_roles_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_roles_result__isset {
  _OmniSci_get_roles_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_roles_result__isset;

class OmniSci_get_roles_result {
 public:

  OmniSci_get_roles_result(const OmniSci_get_roles_result&);
  OmniSci_get_roles_result& operator=(const OmniSci_get_roles_result&);
  OmniSci_get_roles_result() noexcept {
  }

  virtual ~OmniSci_get_roles_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_roles_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_roles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_roles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_roles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_roles_presult__isset {
  _OmniSci_get_roles_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_roles_presult__isset;

class OmniSci_get_roles_presult {
 public:


  virtual ~OmniSci_get_roles_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_roles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_db_objects_for_grantee_args__isset {
  _OmniSci_get_db_objects_for_grantee_args__isset() : session(false), roleName(false) {}
  bool session :1;
  bool roleName :1;
} _OmniSci_get_db_objects_for_grantee_args__isset;

class OmniSci_get_db_objects_for_grantee_args {
 public:

  OmniSci_get_db_objects_for_grantee_args(const OmniSci_get_db_objects_for_grantee_args&);
  OmniSci_get_db_objects_for_grantee_args& operator=(const OmniSci_get_db_objects_for_grantee_args&);
  OmniSci_get_db_objects_for_grantee_args() noexcept
                                          : session(),
                                            roleName() {
  }

  virtual ~OmniSci_get_db_objects_for_grantee_args() noexcept;
  TSessionId session;
  std::string roleName;

  _OmniSci_get_db_objects_for_grantee_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_roleName(const std::string& val);

  bool operator == (const OmniSci_get_db_objects_for_grantee_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(roleName == rhs.roleName))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_db_objects_for_grantee_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_db_objects_for_grantee_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_db_objects_for_grantee_pargs {
 public:


  virtual ~OmniSci_get_db_objects_for_grantee_pargs() noexcept;
  const TSessionId* session;
  const std::string* roleName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_db_objects_for_grantee_result__isset {
  _OmniSci_get_db_objects_for_grantee_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_db_objects_for_grantee_result__isset;

class OmniSci_get_db_objects_for_grantee_result {
 public:

  OmniSci_get_db_objects_for_grantee_result(const OmniSci_get_db_objects_for_grantee_result&);
  OmniSci_get_db_objects_for_grantee_result& operator=(const OmniSci_get_db_objects_for_grantee_result&);
  OmniSci_get_db_objects_for_grantee_result() noexcept {
  }

  virtual ~OmniSci_get_db_objects_for_grantee_result() noexcept;
  std::vector<TDBObject>  success;
  TOmniSciException e;

  _OmniSci_get_db_objects_for_grantee_result__isset __isset;

  void __set_success(const std::vector<TDBObject> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_db_objects_for_grantee_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_db_objects_for_grantee_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_db_objects_for_grantee_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_db_objects_for_grantee_presult__isset {
  _OmniSci_get_db_objects_for_grantee_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_db_objects_for_grantee_presult__isset;

class OmniSci_get_db_objects_for_grantee_presult {
 public:


  virtual ~OmniSci_get_db_objects_for_grantee_presult() noexcept;
  std::vector<TDBObject> * success;
  TOmniSciException e;

  _OmniSci_get_db_objects_for_grantee_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_db_object_privs_args__isset {
  _OmniSci_get_db_object_privs_args__isset() : session(false), objectName(false), type(false) {}
  bool session :1;
  bool objectName :1;
  bool type :1;
} _OmniSci_get_db_object_privs_args__isset;

class OmniSci_get_db_object_privs_args {
 public:

  OmniSci_get_db_object_privs_args(const OmniSci_get_db_object_privs_args&);
  OmniSci_get_db_object_privs_args& operator=(const OmniSci_get_db_object_privs_args&);
  OmniSci_get_db_object_privs_args() noexcept
                                   : session(),
                                     objectName(),
                                     type(static_cast<TDBObjectType::type>(0)) {
  }

  virtual ~OmniSci_get_db_object_privs_args() noexcept;
  TSessionId session;
  std::string objectName;
  /**
   * 
   * @see TDBObjectType
   */
  TDBObjectType::type type;

  _OmniSci_get_db_object_privs_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_objectName(const std::string& val);

  void __set_type(const TDBObjectType::type val);

  bool operator == (const OmniSci_get_db_object_privs_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(objectName == rhs.objectName))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_db_object_privs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_db_object_privs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_db_object_privs_pargs {
 public:


  virtual ~OmniSci_get_db_object_privs_pargs() noexcept;
  const TSessionId* session;
  const std::string* objectName;
  /**
   * 
   * @see TDBObjectType
   */
  const TDBObjectType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_db_object_privs_result__isset {
  _OmniSci_get_db_object_privs_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_db_object_privs_result__isset;

class OmniSci_get_db_object_privs_result {
 public:

  OmniSci_get_db_object_privs_result(const OmniSci_get_db_object_privs_result&);
  OmniSci_get_db_object_privs_result& operator=(const OmniSci_get_db_object_privs_result&);
  OmniSci_get_db_object_privs_result() noexcept {
  }

  virtual ~OmniSci_get_db_object_privs_result() noexcept;
  std::vector<TDBObject>  success;
  TOmniSciException e;

  _OmniSci_get_db_object_privs_result__isset __isset;

  void __set_success(const std::vector<TDBObject> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_db_object_privs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_db_object_privs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_db_object_privs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_db_object_privs_presult__isset {
  _OmniSci_get_db_object_privs_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_db_object_privs_presult__isset;

class OmniSci_get_db_object_privs_presult {
 public:


  virtual ~OmniSci_get_db_object_privs_presult() noexcept;
  std::vector<TDBObject> * success;
  TOmniSciException e;

  _OmniSci_get_db_object_privs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_all_roles_for_user_args__isset {
  _OmniSci_get_all_roles_for_user_args__isset() : session(false), userName(false) {}
  bool session :1;
  bool userName :1;
} _OmniSci_get_all_roles_for_user_args__isset;

class OmniSci_get_all_roles_for_user_args {
 public:

  OmniSci_get_all_roles_for_user_args(const OmniSci_get_all_roles_for_user_args&);
  OmniSci_get_all_roles_for_user_args& operator=(const OmniSci_get_all_roles_for_user_args&);
  OmniSci_get_all_roles_for_user_args() noexcept
                                      : session(),
                                        userName() {
  }

  virtual ~OmniSci_get_all_roles_for_user_args() noexcept;
  TSessionId session;
  std::string userName;

  _OmniSci_get_all_roles_for_user_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_userName(const std::string& val);

  bool operator == (const OmniSci_get_all_roles_for_user_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_all_roles_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_all_roles_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_all_roles_for_user_pargs {
 public:


  virtual ~OmniSci_get_all_roles_for_user_pargs() noexcept;
  const TSessionId* session;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_all_roles_for_user_result__isset {
  _OmniSci_get_all_roles_for_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_all_roles_for_user_result__isset;

class OmniSci_get_all_roles_for_user_result {
 public:

  OmniSci_get_all_roles_for_user_result(const OmniSci_get_all_roles_for_user_result&);
  OmniSci_get_all_roles_for_user_result& operator=(const OmniSci_get_all_roles_for_user_result&);
  OmniSci_get_all_roles_for_user_result() noexcept {
  }

  virtual ~OmniSci_get_all_roles_for_user_result() noexcept;
  std::vector<std::string>  success;
  TOmniSciException e;

  _OmniSci_get_all_roles_for_user_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_all_roles_for_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_all_roles_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_all_roles_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_all_roles_for_user_presult__isset {
  _OmniSci_get_all_roles_for_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_all_roles_for_user_presult__isset;

class OmniSci_get_all_roles_for_user_presult {
 public:


  virtual ~OmniSci_get_all_roles_for_user_presult() noexcept;
  std::vector<std::string> * success;
  TOmniSciException e;

  _OmniSci_get_all_roles_for_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_has_role_args__isset {
  _OmniSci_has_role_args__isset() : session(false), granteeName(false), roleName(false) {}
  bool session :1;
  bool granteeName :1;
  bool roleName :1;
} _OmniSci_has_role_args__isset;

class OmniSci_has_role_args {
 public:

  OmniSci_has_role_args(const OmniSci_has_role_args&);
  OmniSci_has_role_args& operator=(const OmniSci_has_role_args&);
  OmniSci_has_role_args() noexcept
                        : session(),
                          granteeName(),
                          roleName() {
  }

  virtual ~OmniSci_has_role_args() noexcept;
  TSessionId session;
  std::string granteeName;
  std::string roleName;

  _OmniSci_has_role_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_granteeName(const std::string& val);

  void __set_roleName(const std::string& val);

  bool operator == (const OmniSci_has_role_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(granteeName == rhs.granteeName))
      return false;
    if (!(roleName == rhs.roleName))
      return false;
    return true;
  }
  bool operator != (const OmniSci_has_role_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_has_role_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_has_role_pargs {
 public:


  virtual ~OmniSci_has_role_pargs() noexcept;
  const TSessionId* session;
  const std::string* granteeName;
  const std::string* roleName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_has_role_result__isset {
  _OmniSci_has_role_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_has_role_result__isset;

class OmniSci_has_role_result {
 public:

  OmniSci_has_role_result(const OmniSci_has_role_result&);
  OmniSci_has_role_result& operator=(const OmniSci_has_role_result&);
  OmniSci_has_role_result() noexcept
                          : success(0) {
  }

  virtual ~OmniSci_has_role_result() noexcept;
  bool success;
  TOmniSciException e;

  _OmniSci_has_role_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_has_role_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_has_role_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_has_role_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_has_role_presult__isset {
  _OmniSci_has_role_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_has_role_presult__isset;

class OmniSci_has_role_presult {
 public:


  virtual ~OmniSci_has_role_presult() noexcept;
  bool* success;
  TOmniSciException e;

  _OmniSci_has_role_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_has_object_privilege_args__isset {
  _OmniSci_has_object_privilege_args__isset() : session(false), granteeName(false), ObjectName(false), objectType(false), permissions(false) {}
  bool session :1;
  bool granteeName :1;
  bool ObjectName :1;
  bool objectType :1;
  bool permissions :1;
} _OmniSci_has_object_privilege_args__isset;

class OmniSci_has_object_privilege_args {
 public:

  OmniSci_has_object_privilege_args(const OmniSci_has_object_privilege_args&);
  OmniSci_has_object_privilege_args& operator=(const OmniSci_has_object_privilege_args&);
  OmniSci_has_object_privilege_args() noexcept
                                    : session(),
                                      granteeName(),
                                      ObjectName(),
                                      objectType(static_cast<TDBObjectType::type>(0)) {
  }

  virtual ~OmniSci_has_object_privilege_args() noexcept;
  TSessionId session;
  std::string granteeName;
  std::string ObjectName;
  /**
   * 
   * @see TDBObjectType
   */
  TDBObjectType::type objectType;
  TDBObjectPermissions permissions;

  _OmniSci_has_object_privilege_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_granteeName(const std::string& val);

  void __set_ObjectName(const std::string& val);

  void __set_objectType(const TDBObjectType::type val);

  void __set_permissions(const TDBObjectPermissions& val);

  bool operator == (const OmniSci_has_object_privilege_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(granteeName == rhs.granteeName))
      return false;
    if (!(ObjectName == rhs.ObjectName))
      return false;
    if (!(objectType == rhs.objectType))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const OmniSci_has_object_privilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_has_object_privilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_has_object_privilege_pargs {
 public:


  virtual ~OmniSci_has_object_privilege_pargs() noexcept;
  const TSessionId* session;
  const std::string* granteeName;
  const std::string* ObjectName;
  /**
   * 
   * @see TDBObjectType
   */
  const TDBObjectType::type* objectType;
  const TDBObjectPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_has_object_privilege_result__isset {
  _OmniSci_has_object_privilege_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_has_object_privilege_result__isset;

class OmniSci_has_object_privilege_result {
 public:

  OmniSci_has_object_privilege_result(const OmniSci_has_object_privilege_result&);
  OmniSci_has_object_privilege_result& operator=(const OmniSci_has_object_privilege_result&);
  OmniSci_has_object_privilege_result() noexcept
                                      : success(0) {
  }

  virtual ~OmniSci_has_object_privilege_result() noexcept;
  bool success;
  TOmniSciException e;

  _OmniSci_has_object_privilege_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_has_object_privilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_has_object_privilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_has_object_privilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_has_object_privilege_presult__isset {
  _OmniSci_has_object_privilege_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_has_object_privilege_presult__isset;

class OmniSci_has_object_privilege_presult {
 public:


  virtual ~OmniSci_has_object_privilege_presult() noexcept;
  bool* success;
  TOmniSciException e;

  _OmniSci_has_object_privilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_set_license_key_args__isset {
  _OmniSci_set_license_key_args__isset() : session(false), key(false), nonce(true) {}
  bool session :1;
  bool key :1;
  bool nonce :1;
} _OmniSci_set_license_key_args__isset;

class OmniSci_set_license_key_args {
 public:

  OmniSci_set_license_key_args(const OmniSci_set_license_key_args&);
  OmniSci_set_license_key_args& operator=(const OmniSci_set_license_key_args&);
  OmniSci_set_license_key_args() : session(),
                                   key(),
                                   nonce("") {
  }

  virtual ~OmniSci_set_license_key_args() noexcept;
  TSessionId session;
  std::string key;
  std::string nonce;

  _OmniSci_set_license_key_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_key(const std::string& val);

  void __set_nonce(const std::string& val);

  bool operator == (const OmniSci_set_license_key_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_license_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_license_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_set_license_key_pargs {
 public:


  virtual ~OmniSci_set_license_key_pargs() noexcept;
  const TSessionId* session;
  const std::string* key;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_license_key_result__isset {
  _OmniSci_set_license_key_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_set_license_key_result__isset;

class OmniSci_set_license_key_result {
 public:

  OmniSci_set_license_key_result(const OmniSci_set_license_key_result&);
  OmniSci_set_license_key_result& operator=(const OmniSci_set_license_key_result&);
  OmniSci_set_license_key_result() noexcept {
  }

  virtual ~OmniSci_set_license_key_result() noexcept;
  TLicenseInfo success;
  TOmniSciException e;

  _OmniSci_set_license_key_result__isset __isset;

  void __set_success(const TLicenseInfo& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_set_license_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_set_license_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_set_license_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_set_license_key_presult__isset {
  _OmniSci_set_license_key_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_set_license_key_presult__isset;

class OmniSci_set_license_key_presult {
 public:


  virtual ~OmniSci_set_license_key_presult() noexcept;
  TLicenseInfo* success;
  TOmniSciException e;

  _OmniSci_set_license_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_license_claims_args__isset {
  _OmniSci_get_license_claims_args__isset() : session(false), nonce(true) {}
  bool session :1;
  bool nonce :1;
} _OmniSci_get_license_claims_args__isset;

class OmniSci_get_license_claims_args {
 public:

  OmniSci_get_license_claims_args(const OmniSci_get_license_claims_args&);
  OmniSci_get_license_claims_args& operator=(const OmniSci_get_license_claims_args&);
  OmniSci_get_license_claims_args() : session(),
                                      nonce("") {
  }

  virtual ~OmniSci_get_license_claims_args() noexcept;
  TSessionId session;
  std::string nonce;

  _OmniSci_get_license_claims_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_nonce(const std::string& val);

  bool operator == (const OmniSci_get_license_claims_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_license_claims_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_license_claims_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_license_claims_pargs {
 public:


  virtual ~OmniSci_get_license_claims_pargs() noexcept;
  const TSessionId* session;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_license_claims_result__isset {
  _OmniSci_get_license_claims_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_license_claims_result__isset;

class OmniSci_get_license_claims_result {
 public:

  OmniSci_get_license_claims_result(const OmniSci_get_license_claims_result&);
  OmniSci_get_license_claims_result& operator=(const OmniSci_get_license_claims_result&);
  OmniSci_get_license_claims_result() noexcept {
  }

  virtual ~OmniSci_get_license_claims_result() noexcept;
  TLicenseInfo success;
  TOmniSciException e;

  _OmniSci_get_license_claims_result__isset __isset;

  void __set_success(const TLicenseInfo& val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_license_claims_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_license_claims_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_license_claims_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_license_claims_presult__isset {
  _OmniSci_get_license_claims_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_license_claims_presult__isset;

class OmniSci_get_license_claims_presult {
 public:


  virtual ~OmniSci_get_license_claims_presult() noexcept;
  TLicenseInfo* success;
  TOmniSciException e;

  _OmniSci_get_license_claims_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_get_device_parameters_args__isset {
  _OmniSci_get_device_parameters_args__isset() : session(false) {}
  bool session :1;
} _OmniSci_get_device_parameters_args__isset;

class OmniSci_get_device_parameters_args {
 public:

  OmniSci_get_device_parameters_args(const OmniSci_get_device_parameters_args&);
  OmniSci_get_device_parameters_args& operator=(const OmniSci_get_device_parameters_args&);
  OmniSci_get_device_parameters_args() noexcept
                                     : session() {
  }

  virtual ~OmniSci_get_device_parameters_args() noexcept;
  TSessionId session;

  _OmniSci_get_device_parameters_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const OmniSci_get_device_parameters_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_device_parameters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_device_parameters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_get_device_parameters_pargs {
 public:


  virtual ~OmniSci_get_device_parameters_pargs() noexcept;
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_device_parameters_result__isset {
  _OmniSci_get_device_parameters_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_device_parameters_result__isset;

class OmniSci_get_device_parameters_result {
 public:

  OmniSci_get_device_parameters_result(const OmniSci_get_device_parameters_result&);
  OmniSci_get_device_parameters_result& operator=(const OmniSci_get_device_parameters_result&);
  OmniSci_get_device_parameters_result() noexcept {
  }

  virtual ~OmniSci_get_device_parameters_result() noexcept;
  std::map<std::string, std::string>  success;
  TOmniSciException e;

  _OmniSci_get_device_parameters_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_get_device_parameters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_get_device_parameters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_get_device_parameters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_get_device_parameters_presult__isset {
  _OmniSci_get_device_parameters_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _OmniSci_get_device_parameters_presult__isset;

class OmniSci_get_device_parameters_presult {
 public:


  virtual ~OmniSci_get_device_parameters_presult() noexcept;
  std::map<std::string, std::string> * success;
  TOmniSciException e;

  _OmniSci_get_device_parameters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OmniSci_register_runtime_extension_functions_args__isset {
  _OmniSci_register_runtime_extension_functions_args__isset() : session(false), udfs(false), udtfs(false), device_ir_map(false) {}
  bool session :1;
  bool udfs :1;
  bool udtfs :1;
  bool device_ir_map :1;
} _OmniSci_register_runtime_extension_functions_args__isset;

class OmniSci_register_runtime_extension_functions_args {
 public:

  OmniSci_register_runtime_extension_functions_args(const OmniSci_register_runtime_extension_functions_args&);
  OmniSci_register_runtime_extension_functions_args& operator=(const OmniSci_register_runtime_extension_functions_args&);
  OmniSci_register_runtime_extension_functions_args() noexcept
                                                    : session() {
  }

  virtual ~OmniSci_register_runtime_extension_functions_args() noexcept;
  TSessionId session;
  std::vector< ::TUserDefinedFunction>  udfs;
  std::vector< ::TUserDefinedTableFunction>  udtfs;
  std::map<std::string, std::string>  device_ir_map;

  _OmniSci_register_runtime_extension_functions_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_udfs(const std::vector< ::TUserDefinedFunction> & val);

  void __set_udtfs(const std::vector< ::TUserDefinedTableFunction> & val);

  void __set_device_ir_map(const std::map<std::string, std::string> & val);

  bool operator == (const OmniSci_register_runtime_extension_functions_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(udfs == rhs.udfs))
      return false;
    if (!(udtfs == rhs.udtfs))
      return false;
    if (!(device_ir_map == rhs.device_ir_map))
      return false;
    return true;
  }
  bool operator != (const OmniSci_register_runtime_extension_functions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_register_runtime_extension_functions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OmniSci_register_runtime_extension_functions_pargs {
 public:


  virtual ~OmniSci_register_runtime_extension_functions_pargs() noexcept;
  const TSessionId* session;
  const std::vector< ::TUserDefinedFunction> * udfs;
  const std::vector< ::TUserDefinedTableFunction> * udtfs;
  const std::map<std::string, std::string> * device_ir_map;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_register_runtime_extension_functions_result__isset {
  _OmniSci_register_runtime_extension_functions_result__isset() : e(false) {}
  bool e :1;
} _OmniSci_register_runtime_extension_functions_result__isset;

class OmniSci_register_runtime_extension_functions_result {
 public:

  OmniSci_register_runtime_extension_functions_result(const OmniSci_register_runtime_extension_functions_result&);
  OmniSci_register_runtime_extension_functions_result& operator=(const OmniSci_register_runtime_extension_functions_result&);
  OmniSci_register_runtime_extension_functions_result() noexcept {
  }

  virtual ~OmniSci_register_runtime_extension_functions_result() noexcept;
  TOmniSciException e;

  _OmniSci_register_runtime_extension_functions_result__isset __isset;

  void __set_e(const TOmniSciException& val);

  bool operator == (const OmniSci_register_runtime_extension_functions_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const OmniSci_register_runtime_extension_functions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OmniSci_register_runtime_extension_functions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OmniSci_register_runtime_extension_functions_presult__isset {
  _OmniSci_register_runtime_extension_functions_presult__isset() : e(false) {}
  bool e :1;
} _OmniSci_register_runtime_extension_functions_presult__isset;

class OmniSci_register_runtime_extension_functions_presult {
 public:


  virtual ~OmniSci_register_runtime_extension_functions_presult() noexcept;
  TOmniSciException e;

  _OmniSci_register_runtime_extension_functions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OmniSciClient : virtual public OmniSciIf {
 public:
  OmniSciClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OmniSciClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) override;
  void send_connect(const std::string& user, const std::string& passwd, const std::string& dbname);
  void recv_connect(TSessionId& _return);
  void krb5_connect(TKrb5Session& _return, const std::string& inputToken, const std::string& dbname) override;
  void send_krb5_connect(const std::string& inputToken, const std::string& dbname);
  void recv_krb5_connect(TKrb5Session& _return);
  void disconnect(const TSessionId& session) override;
  void send_disconnect(const TSessionId& session);
  void recv_disconnect();
  void switch_database(const TSessionId& session, const std::string& dbname) override;
  void send_switch_database(const TSessionId& session, const std::string& dbname);
  void recv_switch_database();
  void clone_session(TSessionId& _return, const TSessionId& session) override;
  void send_clone_session(const TSessionId& session);
  void recv_clone_session(TSessionId& _return);
  void get_server_status(TServerStatus& _return, const TSessionId& session) override;
  void send_get_server_status(const TSessionId& session);
  void recv_get_server_status(TServerStatus& _return);
  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) override;
  void send_get_status(const TSessionId& session);
  void recv_get_status(std::vector<TServerStatus> & _return);
  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) override;
  void send_get_hardware_info(const TSessionId& session);
  void recv_get_hardware_info(TClusterHardwareInfo& _return);
  void get_tables(std::vector<std::string> & _return, const TSessionId& session) override;
  void send_get_tables(const TSessionId& session);
  void recv_get_tables(std::vector<std::string> & _return);
  void get_tables_for_database(std::vector<std::string> & _return, const TSessionId& session, const std::string& database_name) override;
  void send_get_tables_for_database(const TSessionId& session, const std::string& database_name);
  void recv_get_tables_for_database(std::vector<std::string> & _return);
  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) override;
  void send_get_physical_tables(const TSessionId& session);
  void recv_get_physical_tables(std::vector<std::string> & _return);
  void get_views(std::vector<std::string> & _return, const TSessionId& session) override;
  void send_get_views(const TSessionId& session);
  void recv_get_views(std::vector<std::string> & _return);
  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) override;
  void send_get_tables_meta(const TSessionId& session);
  void recv_get_tables_meta(std::vector<TTableMeta> & _return);
  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override;
  void send_get_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_table_details(TTableDetails& _return);
  void get_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override;
  void send_get_table_details_for_database(const TSessionId& session, const std::string& table_name, const std::string& database_name);
  void recv_get_table_details_for_database(TTableDetails& _return);
  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override;
  void send_get_internal_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_internal_table_details(TTableDetails& _return);
  void get_internal_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override;
  void send_get_internal_table_details_for_database(const TSessionId& session, const std::string& table_name, const std::string& database_name);
  void recv_get_internal_table_details_for_database(TTableDetails& _return);
  void get_users(std::vector<std::string> & _return, const TSessionId& session) override;
  void send_get_users(const TSessionId& session);
  void recv_get_users(std::vector<std::string> & _return);
  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) override;
  void send_get_databases(const TSessionId& session);
  void recv_get_databases(std::vector<TDBInfo> & _return);
  void get_version(std::string& _return) override;
  void send_get_version();
  void recv_get_version(std::string& _return);
  void start_heap_profile(const TSessionId& session) override;
  void send_start_heap_profile(const TSessionId& session);
  void recv_start_heap_profile();
  void stop_heap_profile(const TSessionId& session) override;
  void send_stop_heap_profile(const TSessionId& session);
  void recv_stop_heap_profile();
  void get_heap_profile(std::string& _return, const TSessionId& session) override;
  void send_get_heap_profile(const TSessionId& session);
  void recv_get_heap_profile(std::string& _return);
  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) override;
  void send_get_memory(const TSessionId& session, const std::string& memory_level);
  void recv_get_memory(std::vector<TNodeMemoryInfo> & _return);
  void clear_cpu_memory(const TSessionId& session) override;
  void send_clear_cpu_memory(const TSessionId& session);
  void recv_clear_cpu_memory();
  void clear_gpu_memory(const TSessionId& session) override;
  void send_clear_gpu_memory(const TSessionId& session);
  void recv_clear_gpu_memory();
  void set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override;
  void send_set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label);
  void recv_set_cur_session();
  void invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override;
  void send_invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label);
  void recv_invalidate_cur_session();
  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) override;
  void send_set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  void recv_set_table_epoch();
  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) override;
  void send_set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  void recv_set_table_epoch_by_name();
  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) override;
  void send_get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t recv_get_table_epoch();
  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) override;
  void send_get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  int32_t recv_get_table_epoch_by_name();
  void get_table_epochs(std::vector<TTableEpochInfo> & _return, const TSessionId& session, const int32_t db_id, const int32_t table_id) override;
  void send_get_table_epochs(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void recv_get_table_epochs(std::vector<TTableEpochInfo> & _return);
  void set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs) override;
  void send_set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs);
  void recv_set_table_epochs();
  void get_session_info(TSessionInfo& _return, const TSessionId& session) override;
  void send_get_session_info(const TSessionId& session);
  void recv_get_session_info(TSessionInfo& _return);
  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) override;
  void send_sql_execute(const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  void recv_sql_execute(TQueryResult& _return);
  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method) override;
  void send_sql_execute_df(const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method);
  void recv_sql_execute_df(TDataFrame& _return);
  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) override;
  void send_sql_execute_gdf(const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_gdf(TDataFrame& _return);
  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) override;
  void send_deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  void recv_deallocate_df();
  void interrupt(const TSessionId& query_session, const TSessionId& interrupt_session) override;
  void send_interrupt(const TSessionId& query_session, const TSessionId& interrupt_session);
  void recv_interrupt();
  void sql_validate(TRowDescriptor& _return, const TSessionId& session, const std::string& query) override;
  void send_sql_validate(const TSessionId& session, const std::string& query);
  void recv_sql_validate(TRowDescriptor& _return);
  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) override;
  void send_get_completion_hints(const TSessionId& session, const std::string& sql, const int32_t cursor);
  void recv_get_completion_hints(std::vector< ::TCompletionHint> & _return);
  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) override;
  void send_set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  void recv_set_execution_mode();
  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) override;
  void send_render_vega(const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  void recv_render_vega(TRenderResult& _return);
  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) override;
  void send_get_result_row_for_pixel(const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  void recv_get_result_row_for_pixel(TPixelTableRowResult& _return);
  int32_t create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression) override;
  void send_create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression);
  int32_t recv_create_custom_expression();
  void get_custom_expressions(std::vector<TCustomExpression> & _return, const TSessionId& session) override;
  void send_get_custom_expressions(const TSessionId& session);
  void recv_get_custom_expressions(std::vector<TCustomExpression> & _return);
  void update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json) override;
  void send_update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json);
  void recv_update_custom_expression();
  void delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete) override;
  void send_delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete);
  void recv_delete_custom_expressions();
  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) override;
  void send_get_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard(TDashboard& _return);
  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) override;
  void send_get_dashboards(const TSessionId& session);
  void recv_get_dashboards(std::vector<TDashboard> & _return);
  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override;
  void send_create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t recv_create_dashboard();
  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override;
  void send_replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void recv_replace_dashboard();
  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) override;
  void send_delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_delete_dashboard();
  void share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override;
  void send_share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions);
  void recv_share_dashboards();
  void delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids) override;
  void send_delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids);
  void recv_delete_dashboards();
  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) override;
  void send_share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  void recv_share_dashboard();
  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) override;
  void send_unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  void recv_unshare_dashboard();
  void unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override;
  void send_unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions);
  void recv_unshare_dashboards();
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) override;
  void send_get_dashboard_grantees(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard_grantees(std::vector<TDashboardGrantees> & _return);
  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) override;
  void send_get_link_view(const TSessionId& session, const std::string& link);
  void recv_get_link_view(TFrontendView& _return);
  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) override;
  void send_create_link(const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  void recv_create_link(std::string& _return);
  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names) override;
  void send_load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names);
  void recv_load_table_binary();
  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names) override;
  void send_load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names);
  void recv_load_table_binary_columnar();
  void load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups) override;
  void send_load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups);
  void recv_load_table_binary_columnar_polys();
  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names) override;
  void send_load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names);
  void recv_load_table_binary_arrow();
  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names) override;
  void send_load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names);
  void recv_load_table();
  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override;
  void send_detect_column_types(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_detect_column_types(TDetectResult& _return);
  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) override;
  void send_create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  void recv_create_table();
  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) override;
  void send_import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  void recv_import_table();
  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) override;
  void send_import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  void recv_import_geo_table();
  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) override;
  void send_import_table_status(const TSessionId& session, const std::string& import_id);
  void recv_import_table_status(TImportStatus& _return);
  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override;
  void send_get_first_geo_file_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_first_geo_file_in_archive(std::string& _return);
  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override;
  void send_get_all_files_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_all_files_in_archive(std::vector<std::string> & _return);
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override;
  void send_get_layers_in_geo_file(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return);
  int64_t query_get_outer_fragment_count(const TSessionId& session, const std::string& query) override;
  void send_query_get_outer_fragment_count(const TSessionId& session, const std::string& query);
  int64_t recv_query_get_outer_fragment_count();
  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) override;
  void send_check_table_consistency(const TSessionId& session, const int32_t table_id);
  void recv_check_table_consistency(TTableMeta& _return);
  void start_query(TPendingQuery& _return, const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices) override;
  void send_start_query(const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices);
  void recv_start_query(TPendingQuery& _return);
  void execute_query_step(TStepResult& _return, const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str) override;
  void send_execute_query_step(const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str);
  void recv_execute_query_step(TStepResult& _return);
  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result) override;
  void send_broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result);
  void recv_broadcast_serialized_rows();
  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) override;
  void send_start_render_query(const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  void recv_start_render_query(TPendingRenderQuery& _return);
  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) override;
  void send_execute_next_render_step(const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  void recv_execute_next_render_step(TRenderStepResult& _return);
  void insert_data(const TSessionId& session, const TInsertData& insert_data) override;
  void send_insert_data(const TSessionId& session, const TInsertData& insert_data);
  void recv_insert_data();
  void checkpoint(const TSessionId& session, const int32_t table_id) override;
  void send_checkpoint(const TSessionId& session, const int32_t table_id);
  void recv_checkpoint();
  void get_roles(std::vector<std::string> & _return, const TSessionId& session) override;
  void send_get_roles(const TSessionId& session);
  void recv_get_roles(std::vector<std::string> & _return);
  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) override;
  void send_get_db_objects_for_grantee(const TSessionId& session, const std::string& roleName);
  void recv_get_db_objects_for_grantee(std::vector<TDBObject> & _return);
  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) override;
  void send_get_db_object_privs(const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  void recv_get_db_object_privs(std::vector<TDBObject> & _return);
  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) override;
  void send_get_all_roles_for_user(const TSessionId& session, const std::string& userName);
  void recv_get_all_roles_for_user(std::vector<std::string> & _return);
  bool has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName) override;
  void send_has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName);
  bool recv_has_role();
  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) override;
  void send_has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  bool recv_has_object_privilege();
  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) override;
  void send_set_license_key(const TSessionId& session, const std::string& key, const std::string& nonce);
  void recv_set_license_key(TLicenseInfo& _return);
  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) override;
  void send_get_license_claims(const TSessionId& session, const std::string& nonce);
  void recv_get_license_claims(TLicenseInfo& _return);
  void get_device_parameters(std::map<std::string, std::string> & _return, const TSessionId& session) override;
  void send_get_device_parameters(const TSessionId& session);
  void recv_get_device_parameters(std::map<std::string, std::string> & _return);
  void register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map) override;
  void send_register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map);
  void recv_register_runtime_extension_functions();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OmniSciProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<OmniSciIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (OmniSciProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_krb5_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_switch_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clone_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_server_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_hardware_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tables_for_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_physical_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_views(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tables_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_details(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_details_for_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_internal_table_details(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_internal_table_details_for_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_users(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_cpu_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_gpu_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_cur_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_invalidate_cur_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_table_epoch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_table_epoch_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_epoch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_epoch_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_epochs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_table_epochs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_session_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute_df(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute_gdf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deallocate_df(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_validate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_completion_hints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_execution_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_render_vega(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_result_row_for_pixel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_custom_expression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_custom_expressions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_custom_expression(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_custom_expressions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replace_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_share_dashboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_dashboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_share_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unshare_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unshare_dashboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboard_grantees(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_view(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary_columnar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary_columnar_polys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary_arrow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_detect_column_types(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_geo_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_table_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_first_geo_file_in_archive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_files_in_archive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_layers_in_geo_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query_get_outer_fragment_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_table_consistency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute_query_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_broadcast_serialized_rows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_render_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute_next_render_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_roles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_db_objects_for_grantee(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_db_object_privs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_roles_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_has_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_has_object_privilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_license_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_license_claims(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_device_parameters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_runtime_extension_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OmniSciProcessor(::std::shared_ptr<OmniSciIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &OmniSciProcessor::process_connect;
    processMap_["krb5_connect"] = &OmniSciProcessor::process_krb5_connect;
    processMap_["disconnect"] = &OmniSciProcessor::process_disconnect;
    processMap_["switch_database"] = &OmniSciProcessor::process_switch_database;
    processMap_["clone_session"] = &OmniSciProcessor::process_clone_session;
    processMap_["get_server_status"] = &OmniSciProcessor::process_get_server_status;
    processMap_["get_status"] = &OmniSciProcessor::process_get_status;
    processMap_["get_hardware_info"] = &OmniSciProcessor::process_get_hardware_info;
    processMap_["get_tables"] = &OmniSciProcessor::process_get_tables;
    processMap_["get_tables_for_database"] = &OmniSciProcessor::process_get_tables_for_database;
    processMap_["get_physical_tables"] = &OmniSciProcessor::process_get_physical_tables;
    processMap_["get_views"] = &OmniSciProcessor::process_get_views;
    processMap_["get_tables_meta"] = &OmniSciProcessor::process_get_tables_meta;
    processMap_["get_table_details"] = &OmniSciProcessor::process_get_table_details;
    processMap_["get_table_details_for_database"] = &OmniSciProcessor::process_get_table_details_for_database;
    processMap_["get_internal_table_details"] = &OmniSciProcessor::process_get_internal_table_details;
    processMap_["get_internal_table_details_for_database"] = &OmniSciProcessor::process_get_internal_table_details_for_database;
    processMap_["get_users"] = &OmniSciProcessor::process_get_users;
    processMap_["get_databases"] = &OmniSciProcessor::process_get_databases;
    processMap_["get_version"] = &OmniSciProcessor::process_get_version;
    processMap_["start_heap_profile"] = &OmniSciProcessor::process_start_heap_profile;
    processMap_["stop_heap_profile"] = &OmniSciProcessor::process_stop_heap_profile;
    processMap_["get_heap_profile"] = &OmniSciProcessor::process_get_heap_profile;
    processMap_["get_memory"] = &OmniSciProcessor::process_get_memory;
    processMap_["clear_cpu_memory"] = &OmniSciProcessor::process_clear_cpu_memory;
    processMap_["clear_gpu_memory"] = &OmniSciProcessor::process_clear_gpu_memory;
    processMap_["set_cur_session"] = &OmniSciProcessor::process_set_cur_session;
    processMap_["invalidate_cur_session"] = &OmniSciProcessor::process_invalidate_cur_session;
    processMap_["set_table_epoch"] = &OmniSciProcessor::process_set_table_epoch;
    processMap_["set_table_epoch_by_name"] = &OmniSciProcessor::process_set_table_epoch_by_name;
    processMap_["get_table_epoch"] = &OmniSciProcessor::process_get_table_epoch;
    processMap_["get_table_epoch_by_name"] = &OmniSciProcessor::process_get_table_epoch_by_name;
    processMap_["get_table_epochs"] = &OmniSciProcessor::process_get_table_epochs;
    processMap_["set_table_epochs"] = &OmniSciProcessor::process_set_table_epochs;
    processMap_["get_session_info"] = &OmniSciProcessor::process_get_session_info;
    processMap_["sql_execute"] = &OmniSciProcessor::process_sql_execute;
    processMap_["sql_execute_df"] = &OmniSciProcessor::process_sql_execute_df;
    processMap_["sql_execute_gdf"] = &OmniSciProcessor::process_sql_execute_gdf;
    processMap_["deallocate_df"] = &OmniSciProcessor::process_deallocate_df;
    processMap_["interrupt"] = &OmniSciProcessor::process_interrupt;
    processMap_["sql_validate"] = &OmniSciProcessor::process_sql_validate;
    processMap_["get_completion_hints"] = &OmniSciProcessor::process_get_completion_hints;
    processMap_["set_execution_mode"] = &OmniSciProcessor::process_set_execution_mode;
    processMap_["render_vega"] = &OmniSciProcessor::process_render_vega;
    processMap_["get_result_row_for_pixel"] = &OmniSciProcessor::process_get_result_row_for_pixel;
    processMap_["create_custom_expression"] = &OmniSciProcessor::process_create_custom_expression;
    processMap_["get_custom_expressions"] = &OmniSciProcessor::process_get_custom_expressions;
    processMap_["update_custom_expression"] = &OmniSciProcessor::process_update_custom_expression;
    processMap_["delete_custom_expressions"] = &OmniSciProcessor::process_delete_custom_expressions;
    processMap_["get_dashboard"] = &OmniSciProcessor::process_get_dashboard;
    processMap_["get_dashboards"] = &OmniSciProcessor::process_get_dashboards;
    processMap_["create_dashboard"] = &OmniSciProcessor::process_create_dashboard;
    processMap_["replace_dashboard"] = &OmniSciProcessor::process_replace_dashboard;
    processMap_["delete_dashboard"] = &OmniSciProcessor::process_delete_dashboard;
    processMap_["share_dashboards"] = &OmniSciProcessor::process_share_dashboards;
    processMap_["delete_dashboards"] = &OmniSciProcessor::process_delete_dashboards;
    processMap_["share_dashboard"] = &OmniSciProcessor::process_share_dashboard;
    processMap_["unshare_dashboard"] = &OmniSciProcessor::process_unshare_dashboard;
    processMap_["unshare_dashboards"] = &OmniSciProcessor::process_unshare_dashboards;
    processMap_["get_dashboard_grantees"] = &OmniSciProcessor::process_get_dashboard_grantees;
    processMap_["get_link_view"] = &OmniSciProcessor::process_get_link_view;
    processMap_["create_link"] = &OmniSciProcessor::process_create_link;
    processMap_["load_table_binary"] = &OmniSciProcessor::process_load_table_binary;
    processMap_["load_table_binary_columnar"] = &OmniSciProcessor::process_load_table_binary_columnar;
    processMap_["load_table_binary_columnar_polys"] = &OmniSciProcessor::process_load_table_binary_columnar_polys;
    processMap_["load_table_binary_arrow"] = &OmniSciProcessor::process_load_table_binary_arrow;
    processMap_["load_table"] = &OmniSciProcessor::process_load_table;
    processMap_["detect_column_types"] = &OmniSciProcessor::process_detect_column_types;
    processMap_["create_table"] = &OmniSciProcessor::process_create_table;
    processMap_["import_table"] = &OmniSciProcessor::process_import_table;
    processMap_["import_geo_table"] = &OmniSciProcessor::process_import_geo_table;
    processMap_["import_table_status"] = &OmniSciProcessor::process_import_table_status;
    processMap_["get_first_geo_file_in_archive"] = &OmniSciProcessor::process_get_first_geo_file_in_archive;
    processMap_["get_all_files_in_archive"] = &OmniSciProcessor::process_get_all_files_in_archive;
    processMap_["get_layers_in_geo_file"] = &OmniSciProcessor::process_get_layers_in_geo_file;
    processMap_["query_get_outer_fragment_count"] = &OmniSciProcessor::process_query_get_outer_fragment_count;
    processMap_["check_table_consistency"] = &OmniSciProcessor::process_check_table_consistency;
    processMap_["start_query"] = &OmniSciProcessor::process_start_query;
    processMap_["execute_query_step"] = &OmniSciProcessor::process_execute_query_step;
    processMap_["broadcast_serialized_rows"] = &OmniSciProcessor::process_broadcast_serialized_rows;
    processMap_["start_render_query"] = &OmniSciProcessor::process_start_render_query;
    processMap_["execute_next_render_step"] = &OmniSciProcessor::process_execute_next_render_step;
    processMap_["insert_data"] = &OmniSciProcessor::process_insert_data;
    processMap_["checkpoint"] = &OmniSciProcessor::process_checkpoint;
    processMap_["get_roles"] = &OmniSciProcessor::process_get_roles;
    processMap_["get_db_objects_for_grantee"] = &OmniSciProcessor::process_get_db_objects_for_grantee;
    processMap_["get_db_object_privs"] = &OmniSciProcessor::process_get_db_object_privs;
    processMap_["get_all_roles_for_user"] = &OmniSciProcessor::process_get_all_roles_for_user;
    processMap_["has_role"] = &OmniSciProcessor::process_has_role;
    processMap_["has_object_privilege"] = &OmniSciProcessor::process_has_object_privilege;
    processMap_["set_license_key"] = &OmniSciProcessor::process_set_license_key;
    processMap_["get_license_claims"] = &OmniSciProcessor::process_get_license_claims;
    processMap_["get_device_parameters"] = &OmniSciProcessor::process_get_device_parameters;
    processMap_["register_runtime_extension_functions"] = &OmniSciProcessor::process_register_runtime_extension_functions;
  }

  virtual ~OmniSciProcessor() {}
};

class OmniSciProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OmniSciProcessorFactory(const ::std::shared_ptr< OmniSciIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< OmniSciIfFactory > handlerFactory_;
};

class OmniSciMultiface : virtual public OmniSciIf {
 public:
  OmniSciMultiface(std::vector<std::shared_ptr<OmniSciIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OmniSciMultiface() {}
 protected:
  std::vector<std::shared_ptr<OmniSciIf> > ifaces_;
  OmniSciMultiface() {}
  void add(::std::shared_ptr<OmniSciIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(_return, user, passwd, dbname);
    }
    ifaces_[i]->connect(_return, user, passwd, dbname);
    return;
  }

  void krb5_connect(TKrb5Session& _return, const std::string& inputToken, const std::string& dbname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->krb5_connect(_return, inputToken, dbname);
    }
    ifaces_[i]->krb5_connect(_return, inputToken, dbname);
    return;
  }

  void disconnect(const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect(session);
    }
    ifaces_[i]->disconnect(session);
  }

  void switch_database(const TSessionId& session, const std::string& dbname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->switch_database(session, dbname);
    }
    ifaces_[i]->switch_database(session, dbname);
  }

  void clone_session(TSessionId& _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clone_session(_return, session);
    }
    ifaces_[i]->clone_session(_return, session);
    return;
  }

  void get_server_status(TServerStatus& _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_server_status(_return, session);
    }
    ifaces_[i]->get_server_status(_return, session);
    return;
  }

  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_status(_return, session);
    }
    ifaces_[i]->get_status(_return, session);
    return;
  }

  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_hardware_info(_return, session);
    }
    ifaces_[i]->get_hardware_info(_return, session);
    return;
  }

  void get_tables(std::vector<std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables(_return, session);
    }
    ifaces_[i]->get_tables(_return, session);
    return;
  }

  void get_tables_for_database(std::vector<std::string> & _return, const TSessionId& session, const std::string& database_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables_for_database(_return, session, database_name);
    }
    ifaces_[i]->get_tables_for_database(_return, session, database_name);
    return;
  }

  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_tables(_return, session);
    }
    ifaces_[i]->get_physical_tables(_return, session);
    return;
  }

  void get_views(std::vector<std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_views(_return, session);
    }
    ifaces_[i]->get_views(_return, session);
    return;
  }

  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables_meta(_return, session);
    }
    ifaces_[i]->get_tables_meta(_return, session);
    return;
  }

  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_details(_return, session, table_name);
    }
    ifaces_[i]->get_table_details(_return, session, table_name);
    return;
  }

  void get_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_details_for_database(_return, session, table_name, database_name);
    }
    ifaces_[i]->get_table_details_for_database(_return, session, table_name, database_name);
    return;
  }

  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_internal_table_details(_return, session, table_name);
    }
    ifaces_[i]->get_internal_table_details(_return, session, table_name);
    return;
  }

  void get_internal_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_internal_table_details_for_database(_return, session, table_name, database_name);
    }
    ifaces_[i]->get_internal_table_details_for_database(_return, session, table_name, database_name);
    return;
  }

  void get_users(std::vector<std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_users(_return, session);
    }
    ifaces_[i]->get_users(_return, session);
    return;
  }

  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_databases(_return, session);
    }
    ifaces_[i]->get_databases(_return, session);
    return;
  }

  void get_version(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_version(_return);
    }
    ifaces_[i]->get_version(_return);
    return;
  }

  void start_heap_profile(const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_heap_profile(session);
    }
    ifaces_[i]->start_heap_profile(session);
  }

  void stop_heap_profile(const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_heap_profile(session);
    }
    ifaces_[i]->stop_heap_profile(session);
  }

  void get_heap_profile(std::string& _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_heap_profile(_return, session);
    }
    ifaces_[i]->get_heap_profile(_return, session);
    return;
  }

  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_memory(_return, session, memory_level);
    }
    ifaces_[i]->get_memory(_return, session, memory_level);
    return;
  }

  void clear_cpu_memory(const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_cpu_memory(session);
    }
    ifaces_[i]->clear_cpu_memory(session);
  }

  void clear_gpu_memory(const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_gpu_memory(session);
    }
    ifaces_[i]->clear_gpu_memory(session);
  }

  void set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_cur_session(parent_session, leaf_session, start_time_str, label);
    }
    ifaces_[i]->set_cur_session(parent_session, leaf_session, start_time_str, label);
  }

  void invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invalidate_cur_session(parent_session, leaf_session, start_time_str, label);
    }
    ifaces_[i]->invalidate_cur_session(parent_session, leaf_session, start_time_str, label);
  }

  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_table_epoch(session, db_id, table_id, new_epoch);
    }
    ifaces_[i]->set_table_epoch(session, db_id, table_id, new_epoch);
  }

  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_table_epoch_by_name(session, table_name, new_epoch);
    }
    ifaces_[i]->set_table_epoch_by_name(session, table_name, new_epoch);
  }

  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_epoch(session, db_id, table_id);
    }
    return ifaces_[i]->get_table_epoch(session, db_id, table_id);
  }

  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_epoch_by_name(session, table_name);
    }
    return ifaces_[i]->get_table_epoch_by_name(session, table_name);
  }

  void get_table_epochs(std::vector<TTableEpochInfo> & _return, const TSessionId& session, const int32_t db_id, const int32_t table_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_epochs(_return, session, db_id, table_id);
    }
    ifaces_[i]->get_table_epochs(_return, session, db_id, table_id);
    return;
  }

  void set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_table_epochs(session, db_id, table_epochs);
    }
    ifaces_[i]->set_table_epochs(session, db_id, table_epochs);
  }

  void get_session_info(TSessionInfo& _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_session_info(_return, session);
    }
    ifaces_[i]->get_session_info(_return, session);
    return;
  }

  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute(_return, session, query, column_format, nonce, first_n, at_most_n);
    }
    ifaces_[i]->sql_execute(_return, session, query, column_format, nonce, first_n, at_most_n);
    return;
  }

  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute_df(_return, session, query, device_type, device_id, first_n, transport_method);
    }
    ifaces_[i]->sql_execute_df(_return, session, query, device_type, device_id, first_n, transport_method);
    return;
  }

  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute_gdf(_return, session, query, device_id, first_n);
    }
    ifaces_[i]->sql_execute_gdf(_return, session, query, device_id, first_n);
    return;
  }

  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deallocate_df(session, df, device_type, device_id);
    }
    ifaces_[i]->deallocate_df(session, df, device_type, device_id);
  }

  void interrupt(const TSessionId& query_session, const TSessionId& interrupt_session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt(query_session, interrupt_session);
    }
    ifaces_[i]->interrupt(query_session, interrupt_session);
  }

  void sql_validate(TRowDescriptor& _return, const TSessionId& session, const std::string& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_validate(_return, session, query);
    }
    ifaces_[i]->sql_validate(_return, session, query);
    return;
  }

  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_completion_hints(_return, session, sql, cursor);
    }
    ifaces_[i]->get_completion_hints(_return, session, sql, cursor);
    return;
  }

  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_execution_mode(session, mode);
    }
    ifaces_[i]->set_execution_mode(session, mode);
  }

  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->render_vega(_return, session, widget_id, vega_json, compression_level, nonce);
    }
    ifaces_[i]->render_vega(_return, session, widget_id, vega_json, compression_level, nonce);
    return;
  }

  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_result_row_for_pixel(_return, session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    }
    ifaces_[i]->get_result_row_for_pixel(_return, session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    return;
  }

  int32_t create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_custom_expression(session, custom_expression);
    }
    return ifaces_[i]->create_custom_expression(session, custom_expression);
  }

  void get_custom_expressions(std::vector<TCustomExpression> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_custom_expressions(_return, session);
    }
    ifaces_[i]->get_custom_expressions(_return, session);
    return;
  }

  void update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_custom_expression(session, id, expression_json);
    }
    ifaces_[i]->update_custom_expression(session, id, expression_json);
  }

  void delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_custom_expressions(session, custom_expression_ids, do_soft_delete);
    }
    ifaces_[i]->delete_custom_expressions(session, custom_expression_ids, do_soft_delete);
  }

  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboard(_return, session, dashboard_id);
    }
    ifaces_[i]->get_dashboard(_return, session, dashboard_id);
    return;
  }

  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboards(_return, session);
    }
    ifaces_[i]->get_dashboards(_return, session);
    return;
  }

  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
    }
    return ifaces_[i]->create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
  }

  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
    }
    ifaces_[i]->replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
  }

  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_dashboard(session, dashboard_id);
    }
    ifaces_[i]->delete_dashboard(session, dashboard_id);
  }

  void share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->share_dashboards(session, dashboard_ids, groups, permissions);
    }
    ifaces_[i]->share_dashboards(session, dashboard_ids, groups, permissions);
  }

  void delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_dashboards(session, dashboard_ids);
    }
    ifaces_[i]->delete_dashboards(session, dashboard_ids);
  }

  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
    }
    ifaces_[i]->share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
  }

  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unshare_dashboard(session, dashboard_id, groups, objects, permissions);
    }
    ifaces_[i]->unshare_dashboard(session, dashboard_id, groups, objects, permissions);
  }

  void unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unshare_dashboards(session, dashboard_ids, groups, permissions);
    }
    ifaces_[i]->unshare_dashboards(session, dashboard_ids, groups, permissions);
  }

  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboard_grantees(_return, session, dashboard_id);
    }
    ifaces_[i]->get_dashboard_grantees(_return, session, dashboard_id);
    return;
  }

  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_view(_return, session, link);
    }
    ifaces_[i]->get_link_view(_return, session, link);
    return;
  }

  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_link(_return, session, view_state, view_metadata);
    }
    ifaces_[i]->create_link(_return, session, view_state, view_metadata);
    return;
  }

  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary(session, table_name, rows, column_names);
    }
    ifaces_[i]->load_table_binary(session, table_name, rows, column_names);
  }

  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary_columnar(session, table_name, cols, column_names);
    }
    ifaces_[i]->load_table_binary_columnar(session, table_name, cols, column_names);
  }

  void load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary_columnar_polys(session, table_name, cols, column_names, assign_render_groups);
    }
    ifaces_[i]->load_table_binary_columnar_polys(session, table_name, cols, column_names, assign_render_groups);
  }

  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary_arrow(session, table_name, arrow_stream, use_column_names);
    }
    ifaces_[i]->load_table_binary_arrow(session, table_name, arrow_stream, use_column_names);
  }

  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table(session, table_name, rows, column_names);
    }
    ifaces_[i]->load_table(session, table_name, rows, column_names);
  }

  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->detect_column_types(_return, session, file_name, copy_params);
    }
    ifaces_[i]->detect_column_types(_return, session, file_name, copy_params);
    return;
  }

  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_table(session, table_name, row_desc, file_type, create_params);
    }
    ifaces_[i]->create_table(session, table_name, row_desc, file_type, create_params);
  }

  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_table(session, table_name, file_name, copy_params);
    }
    ifaces_[i]->import_table(session, table_name, file_name, copy_params);
  }

  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
    }
    ifaces_[i]->import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
  }

  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_table_status(_return, session, import_id);
    }
    ifaces_[i]->import_table_status(_return, session, import_id);
    return;
  }

  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_first_geo_file_in_archive(_return, session, archive_path, copy_params);
    }
    ifaces_[i]->get_first_geo_file_in_archive(_return, session, archive_path, copy_params);
    return;
  }

  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_files_in_archive(_return, session, archive_path, copy_params);
    }
    ifaces_[i]->get_all_files_in_archive(_return, session, archive_path, copy_params);
    return;
  }

  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_layers_in_geo_file(_return, session, file_name, copy_params);
    }
    ifaces_[i]->get_layers_in_geo_file(_return, session, file_name, copy_params);
    return;
  }

  int64_t query_get_outer_fragment_count(const TSessionId& session, const std::string& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query_get_outer_fragment_count(session, query);
    }
    return ifaces_[i]->query_get_outer_fragment_count(session, query);
  }

  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_table_consistency(_return, session, table_id);
    }
    ifaces_[i]->check_table_consistency(_return, session, table_id);
    return;
  }

  void start_query(TPendingQuery& _return, const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_query(_return, leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices);
    }
    ifaces_[i]->start_query(_return, leaf_session, parent_session, query_ra, start_time_str, just_explain, outer_fragment_indices);
    return;
  }

  void execute_query_step(TStepResult& _return, const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute_query_step(_return, pending_query, subquery_id, start_time_str);
    }
    ifaces_[i]->execute_query_step(_return, pending_query, subquery_id, start_time_str);
    return;
  }

  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result);
    }
    ifaces_[i]->broadcast_serialized_rows(serialized_rows, row_desc, query_id, subquery_id, is_final_subquery_result);
  }

  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_render_query(_return, session, widget_id, node_idx, vega_json);
    }
    ifaces_[i]->start_render_query(_return, session, widget_id, node_idx, vega_json);
    return;
  }

  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute_next_render_step(_return, pending_render, merged_data);
    }
    ifaces_[i]->execute_next_render_step(_return, pending_render, merged_data);
    return;
  }

  void insert_data(const TSessionId& session, const TInsertData& insert_data) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert_data(session, insert_data);
    }
    ifaces_[i]->insert_data(session, insert_data);
  }

  void checkpoint(const TSessionId& session, const int32_t table_id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkpoint(session, table_id);
    }
    ifaces_[i]->checkpoint(session, table_id);
  }

  void get_roles(std::vector<std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_roles(_return, session);
    }
    ifaces_[i]->get_roles(_return, session);
    return;
  }

  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_db_objects_for_grantee(_return, session, roleName);
    }
    ifaces_[i]->get_db_objects_for_grantee(_return, session, roleName);
    return;
  }

  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_db_object_privs(_return, session, objectName, type);
    }
    ifaces_[i]->get_db_object_privs(_return, session, objectName, type);
    return;
  }

  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_roles_for_user(_return, session, userName);
    }
    ifaces_[i]->get_all_roles_for_user(_return, session, userName);
    return;
  }

  bool has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->has_role(session, granteeName, roleName);
    }
    return ifaces_[i]->has_role(session, granteeName, roleName);
  }

  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
    }
    return ifaces_[i]->has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
  }

  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_license_key(_return, session, key, nonce);
    }
    ifaces_[i]->set_license_key(_return, session, key, nonce);
    return;
  }

  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_license_claims(_return, session, nonce);
    }
    ifaces_[i]->get_license_claims(_return, session, nonce);
    return;
  }

  void get_device_parameters(std::map<std::string, std::string> & _return, const TSessionId& session) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_device_parameters(_return, session);
    }
    ifaces_[i]->get_device_parameters(_return, session);
    return;
  }

  void register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_runtime_extension_functions(session, udfs, udtfs, device_ir_map);
    }
    ifaces_[i]->register_runtime_extension_functions(session, udfs, udtfs, device_ir_map);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class OmniSciConcurrentClient : virtual public OmniSciIf {
 public:
  OmniSciConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  OmniSciConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) override;
  int32_t send_connect(const std::string& user, const std::string& passwd, const std::string& dbname);
  void recv_connect(TSessionId& _return, const int32_t seqid);
  void krb5_connect(TKrb5Session& _return, const std::string& inputToken, const std::string& dbname) override;
  int32_t send_krb5_connect(const std::string& inputToken, const std::string& dbname);
  void recv_krb5_connect(TKrb5Session& _return, const int32_t seqid);
  void disconnect(const TSessionId& session) override;
  int32_t send_disconnect(const TSessionId& session);
  void recv_disconnect(const int32_t seqid);
  void switch_database(const TSessionId& session, const std::string& dbname) override;
  int32_t send_switch_database(const TSessionId& session, const std::string& dbname);
  void recv_switch_database(const int32_t seqid);
  void clone_session(TSessionId& _return, const TSessionId& session) override;
  int32_t send_clone_session(const TSessionId& session);
  void recv_clone_session(TSessionId& _return, const int32_t seqid);
  void get_server_status(TServerStatus& _return, const TSessionId& session) override;
  int32_t send_get_server_status(const TSessionId& session);
  void recv_get_server_status(TServerStatus& _return, const int32_t seqid);
  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) override;
  int32_t send_get_status(const TSessionId& session);
  void recv_get_status(std::vector<TServerStatus> & _return, const int32_t seqid);
  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) override;
  int32_t send_get_hardware_info(const TSessionId& session);
  void recv_get_hardware_info(TClusterHardwareInfo& _return, const int32_t seqid);
  void get_tables(std::vector<std::string> & _return, const TSessionId& session) override;
  int32_t send_get_tables(const TSessionId& session);
  void recv_get_tables(std::vector<std::string> & _return, const int32_t seqid);
  void get_tables_for_database(std::vector<std::string> & _return, const TSessionId& session, const std::string& database_name) override;
  int32_t send_get_tables_for_database(const TSessionId& session, const std::string& database_name);
  void recv_get_tables_for_database(std::vector<std::string> & _return, const int32_t seqid);
  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) override;
  int32_t send_get_physical_tables(const TSessionId& session);
  void recv_get_physical_tables(std::vector<std::string> & _return, const int32_t seqid);
  void get_views(std::vector<std::string> & _return, const TSessionId& session) override;
  int32_t send_get_views(const TSessionId& session);
  void recv_get_views(std::vector<std::string> & _return, const int32_t seqid);
  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) override;
  int32_t send_get_tables_meta(const TSessionId& session);
  void recv_get_tables_meta(std::vector<TTableMeta> & _return, const int32_t seqid);
  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override;
  int32_t send_get_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_table_details(TTableDetails& _return, const int32_t seqid);
  void get_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override;
  int32_t send_get_table_details_for_database(const TSessionId& session, const std::string& table_name, const std::string& database_name);
  void recv_get_table_details_for_database(TTableDetails& _return, const int32_t seqid);
  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) override;
  int32_t send_get_internal_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_internal_table_details(TTableDetails& _return, const int32_t seqid);
  void get_internal_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) override;
  int32_t send_get_internal_table_details_for_database(const TSessionId& session, const std::string& table_name, const std::string& database_name);
  void recv_get_internal_table_details_for_database(TTableDetails& _return, const int32_t seqid);
  void get_users(std::vector<std::string> & _return, const TSessionId& session) override;
  int32_t send_get_users(const TSessionId& session);
  void recv_get_users(std::vector<std::string> & _return, const int32_t seqid);
  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) override;
  int32_t send_get_databases(const TSessionId& session);
  void recv_get_databases(std::vector<TDBInfo> & _return, const int32_t seqid);
  void get_version(std::string& _return) override;
  int32_t send_get_version();
  void recv_get_version(std::string& _return, const int32_t seqid);
  void start_heap_profile(const TSessionId& session) override;
  int32_t send_start_heap_profile(const TSessionId& session);
  void recv_start_heap_profile(const int32_t seqid);
  void stop_heap_profile(const TSessionId& session) override;
  int32_t send_stop_heap_profile(const TSessionId& session);
  void recv_stop_heap_profile(const int32_t seqid);
  void get_heap_profile(std::string& _return, const TSessionId& session) override;
  int32_t send_get_heap_profile(const TSessionId& session);
  void recv_get_heap_profile(std::string& _return, const int32_t seqid);
  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) override;
  int32_t send_get_memory(const TSessionId& session, const std::string& memory_level);
  void recv_get_memory(std::vector<TNodeMemoryInfo> & _return, const int32_t seqid);
  void clear_cpu_memory(const TSessionId& session) override;
  int32_t send_clear_cpu_memory(const TSessionId& session);
  void recv_clear_cpu_memory(const int32_t seqid);
  void clear_gpu_memory(const TSessionId& session) override;
  int32_t send_clear_gpu_memory(const TSessionId& session);
  void recv_clear_gpu_memory(const int32_t seqid);
  void set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override;
  int32_t send_set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label);
  void recv_set_cur_session(const int32_t seqid);
  void invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) override;
  int32_t send_invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label);
  void recv_invalidate_cur_session(const int32_t seqid);
  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) override;
  int32_t send_set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  void recv_set_table_epoch(const int32_t seqid);
  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) override;
  int32_t send_set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  void recv_set_table_epoch_by_name(const int32_t seqid);
  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) override;
  int32_t send_get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t recv_get_table_epoch(const int32_t seqid);
  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) override;
  int32_t send_get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  int32_t recv_get_table_epoch_by_name(const int32_t seqid);
  void get_table_epochs(std::vector<TTableEpochInfo> & _return, const TSessionId& session, const int32_t db_id, const int32_t table_id) override;
  int32_t send_get_table_epochs(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void recv_get_table_epochs(std::vector<TTableEpochInfo> & _return, const int32_t seqid);
  void set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs) override;
  int32_t send_set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs);
  void recv_set_table_epochs(const int32_t seqid);
  void get_session_info(TSessionInfo& _return, const TSessionId& session) override;
  int32_t send_get_session_info(const TSessionId& session);
  void recv_get_session_info(TSessionInfo& _return, const int32_t seqid);
  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) override;
  int32_t send_sql_execute(const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  void recv_sql_execute(TQueryResult& _return, const int32_t seqid);
  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method) override;
  int32_t send_sql_execute_df(const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method);
  void recv_sql_execute_df(TDataFrame& _return, const int32_t seqid);
  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) override;
  int32_t send_sql_execute_gdf(const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_gdf(TDataFrame& _return, const int32_t seqid);
  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) override;
  int32_t send_deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  void recv_deallocate_df(const int32_t seqid);
  void interrupt(const TSessionId& query_session, const TSessionId& interrupt_session) override;
  int32_t send_interrupt(const TSessionId& query_session, const TSessionId& interrupt_session);
  void recv_interrupt(const int32_t seqid);
  void sql_validate(TRowDescriptor& _return, const TSessionId& session, const std::string& query) override;
  int32_t send_sql_validate(const TSessionId& session, const std::string& query);
  void recv_sql_validate(TRowDescriptor& _return, const int32_t seqid);
  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) override;
  int32_t send_get_completion_hints(const TSessionId& session, const std::string& sql, const int32_t cursor);
  void recv_get_completion_hints(std::vector< ::TCompletionHint> & _return, const int32_t seqid);
  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) override;
  int32_t send_set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  void recv_set_execution_mode(const int32_t seqid);
  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) override;
  int32_t send_render_vega(const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  void recv_render_vega(TRenderResult& _return, const int32_t seqid);
  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) override;
  int32_t send_get_result_row_for_pixel(const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  void recv_get_result_row_for_pixel(TPixelTableRowResult& _return, const int32_t seqid);
  int32_t create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression) override;
  int32_t send_create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression);
  int32_t recv_create_custom_expression(const int32_t seqid);
  void get_custom_expressions(std::vector<TCustomExpression> & _return, const TSessionId& session) override;
  int32_t send_get_custom_expressions(const TSessionId& session);
  void recv_get_custom_expressions(std::vector<TCustomExpression> & _return, const int32_t seqid);
  void update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json) override;
  int32_t send_update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json);
  void recv_update_custom_expression(const int32_t seqid);
  void delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete) override;
  int32_t send_delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete);
  void recv_delete_custom_expressions(const int32_t seqid);
  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) override;
  int32_t send_get_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard(TDashboard& _return, const int32_t seqid);
  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) override;
  int32_t send_get_dashboards(const TSessionId& session);
  void recv_get_dashboards(std::vector<TDashboard> & _return, const int32_t seqid);
  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override;
  int32_t send_create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t recv_create_dashboard(const int32_t seqid);
  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) override;
  int32_t send_replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void recv_replace_dashboard(const int32_t seqid);
  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) override;
  int32_t send_delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_delete_dashboard(const int32_t seqid);
  void share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override;
  int32_t send_share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions);
  void recv_share_dashboards(const int32_t seqid);
  void delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids) override;
  int32_t send_delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids);
  void recv_delete_dashboards(const int32_t seqid);
  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) override;
  int32_t send_share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  void recv_share_dashboard(const int32_t seqid);
  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) override;
  int32_t send_unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  void recv_unshare_dashboard(const int32_t seqid);
  void unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) override;
  int32_t send_unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions);
  void recv_unshare_dashboards(const int32_t seqid);
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) override;
  int32_t send_get_dashboard_grantees(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const int32_t seqid);
  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) override;
  int32_t send_get_link_view(const TSessionId& session, const std::string& link);
  void recv_get_link_view(TFrontendView& _return, const int32_t seqid);
  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) override;
  int32_t send_create_link(const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  void recv_create_link(std::string& _return, const int32_t seqid);
  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names) override;
  int32_t send_load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names);
  void recv_load_table_binary(const int32_t seqid);
  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names) override;
  int32_t send_load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names);
  void recv_load_table_binary_columnar(const int32_t seqid);
  void load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups) override;
  int32_t send_load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups);
  void recv_load_table_binary_columnar_polys(const int32_t seqid);
  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names) override;
  int32_t send_load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names);
  void recv_load_table_binary_arrow(const int32_t seqid);
  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names) override;
  int32_t send_load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names);
  void recv_load_table(const int32_t seqid);
  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override;
  int32_t send_detect_column_types(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_detect_column_types(TDetectResult& _return, const int32_t seqid);
  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) override;
  int32_t send_create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  void recv_create_table(const int32_t seqid);
  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) override;
  int32_t send_import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  void recv_import_table(const int32_t seqid);
  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) override;
  int32_t send_import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  void recv_import_geo_table(const int32_t seqid);
  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) override;
  int32_t send_import_table_status(const TSessionId& session, const std::string& import_id);
  void recv_import_table_status(TImportStatus& _return, const int32_t seqid);
  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override;
  int32_t send_get_first_geo_file_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_first_geo_file_in_archive(std::string& _return, const int32_t seqid);
  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) override;
  int32_t send_get_all_files_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_all_files_in_archive(std::vector<std::string> & _return, const int32_t seqid);
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) override;
  int32_t send_get_layers_in_geo_file(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const int32_t seqid);
  int64_t query_get_outer_fragment_count(const TSessionId& session, const std::string& query) override;
  int32_t send_query_get_outer_fragment_count(const TSessionId& session, const std::string& query);
  int64_t recv_query_get_outer_fragment_count(const int32_t seqid);
  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) override;
  int32_t send_check_table_consistency(const TSessionId& session, const int32_t table_id);
  void recv_check_table_consistency(TTableMeta& _return, const int32_t seqid);
  void start_query(TPendingQuery& _return, const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices) override;
  int32_t send_start_query(const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices);
  void recv_start_query(TPendingQuery& _return, const int32_t seqid);
  void execute_query_step(TStepResult& _return, const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str) override;
  int32_t send_execute_query_step(const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str);
  void recv_execute_query_step(TStepResult& _return, const int32_t seqid);
  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result) override;
  int32_t send_broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result);
  void recv_broadcast_serialized_rows(const int32_t seqid);
  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) override;
  int32_t send_start_render_query(const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  void recv_start_render_query(TPendingRenderQuery& _return, const int32_t seqid);
  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) override;
  int32_t send_execute_next_render_step(const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  void recv_execute_next_render_step(TRenderStepResult& _return, const int32_t seqid);
  void insert_data(const TSessionId& session, const TInsertData& insert_data) override;
  int32_t send_insert_data(const TSessionId& session, const TInsertData& insert_data);
  void recv_insert_data(const int32_t seqid);
  void checkpoint(const TSessionId& session, const int32_t table_id) override;
  int32_t send_checkpoint(const TSessionId& session, const int32_t table_id);
  void recv_checkpoint(const int32_t seqid);
  void get_roles(std::vector<std::string> & _return, const TSessionId& session) override;
  int32_t send_get_roles(const TSessionId& session);
  void recv_get_roles(std::vector<std::string> & _return, const int32_t seqid);
  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) override;
  int32_t send_get_db_objects_for_grantee(const TSessionId& session, const std::string& roleName);
  void recv_get_db_objects_for_grantee(std::vector<TDBObject> & _return, const int32_t seqid);
  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) override;
  int32_t send_get_db_object_privs(const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  void recv_get_db_object_privs(std::vector<TDBObject> & _return, const int32_t seqid);
  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) override;
  int32_t send_get_all_roles_for_user(const TSessionId& session, const std::string& userName);
  void recv_get_all_roles_for_user(std::vector<std::string> & _return, const int32_t seqid);
  bool has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName) override;
  int32_t send_has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName);
  bool recv_has_role(const int32_t seqid);
  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) override;
  int32_t send_has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  bool recv_has_object_privilege(const int32_t seqid);
  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) override;
  int32_t send_set_license_key(const TSessionId& session, const std::string& key, const std::string& nonce);
  void recv_set_license_key(TLicenseInfo& _return, const int32_t seqid);
  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) override;
  int32_t send_get_license_claims(const TSessionId& session, const std::string& nonce);
  void recv_get_license_claims(TLicenseInfo& _return, const int32_t seqid);
  void get_device_parameters(std::map<std::string, std::string> & _return, const TSessionId& session) override;
  int32_t send_get_device_parameters(const TSessionId& session);
  void recv_get_device_parameters(std::map<std::string, std::string> & _return, const int32_t seqid);
  void register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map) override;
  int32_t send_register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map);
  void recv_register_runtime_extension_functions(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
