// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "OmniSci.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class OmniSciHandler : virtual public OmniSciIf {
 public:
  OmniSciHandler() {
    // Your initialization goes here
  }

  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) {
    // Your implementation goes here
    printf("connect\n");
  }

  void krb5_connect(TKrb5Session& _return, const std::string& inputToken, const std::string& dbname) {
    // Your implementation goes here
    printf("krb5_connect\n");
  }

  void disconnect(const TSessionId& session) {
    // Your implementation goes here
    printf("disconnect\n");
  }

  void switch_database(const TSessionId& session, const std::string& dbname) {
    // Your implementation goes here
    printf("switch_database\n");
  }

  void clone_session(TSessionId& _return, const TSessionId& session) {
    // Your implementation goes here
    printf("clone_session\n");
  }

  void get_server_status(TServerStatus& _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_server_status\n");
  }

  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_status\n");
  }

  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_hardware_info\n");
  }

  void get_tables(std::vector<std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_tables\n");
  }

  void get_tables_for_database(std::vector<std::string> & _return, const TSessionId& session, const std::string& database_name) {
    // Your implementation goes here
    printf("get_tables_for_database\n");
  }

  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_physical_tables\n");
  }

  void get_views(std::vector<std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_views\n");
  }

  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_tables_meta\n");
  }

  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) {
    // Your implementation goes here
    printf("get_table_details\n");
  }

  void get_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) {
    // Your implementation goes here
    printf("get_table_details_for_database\n");
  }

  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) {
    // Your implementation goes here
    printf("get_internal_table_details\n");
  }

  void get_internal_table_details_for_database(TTableDetails& _return, const TSessionId& session, const std::string& table_name, const std::string& database_name) {
    // Your implementation goes here
    printf("get_internal_table_details_for_database\n");
  }

  void get_users(std::vector<std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_users\n");
  }

  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_databases\n");
  }

  void get_version(std::string& _return) {
    // Your implementation goes here
    printf("get_version\n");
  }

  void start_heap_profile(const TSessionId& session) {
    // Your implementation goes here
    printf("start_heap_profile\n");
  }

  void stop_heap_profile(const TSessionId& session) {
    // Your implementation goes here
    printf("stop_heap_profile\n");
  }

  void get_heap_profile(std::string& _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_heap_profile\n");
  }

  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) {
    // Your implementation goes here
    printf("get_memory\n");
  }

  void clear_cpu_memory(const TSessionId& session) {
    // Your implementation goes here
    printf("clear_cpu_memory\n");
  }

  void clear_gpu_memory(const TSessionId& session) {
    // Your implementation goes here
    printf("clear_gpu_memory\n");
  }

  void set_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) {
    // Your implementation goes here
    printf("set_cur_session\n");
  }

  void invalidate_cur_session(const TSessionId& parent_session, const TSessionId& leaf_session, const std::string& start_time_str, const std::string& label) {
    // Your implementation goes here
    printf("invalidate_cur_session\n");
  }

  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) {
    // Your implementation goes here
    printf("set_table_epoch\n");
  }

  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) {
    // Your implementation goes here
    printf("set_table_epoch_by_name\n");
  }

  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) {
    // Your implementation goes here
    printf("get_table_epoch\n");
  }

  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) {
    // Your implementation goes here
    printf("get_table_epoch_by_name\n");
  }

  void get_table_epochs(std::vector<TTableEpochInfo> & _return, const TSessionId& session, const int32_t db_id, const int32_t table_id) {
    // Your implementation goes here
    printf("get_table_epochs\n");
  }

  void set_table_epochs(const TSessionId& session, const int32_t db_id, const std::vector<TTableEpochInfo> & table_epochs) {
    // Your implementation goes here
    printf("set_table_epochs\n");
  }

  void get_session_info(TSessionInfo& _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_session_info\n");
  }

  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) {
    // Your implementation goes here
    printf("sql_execute\n");
  }

  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n, const TArrowTransport::type transport_method) {
    // Your implementation goes here
    printf("sql_execute_df\n");
  }

  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) {
    // Your implementation goes here
    printf("sql_execute_gdf\n");
  }

  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) {
    // Your implementation goes here
    printf("deallocate_df\n");
  }

  void interrupt(const TSessionId& query_session, const TSessionId& interrupt_session) {
    // Your implementation goes here
    printf("interrupt\n");
  }

  void sql_validate(TRowDescriptor& _return, const TSessionId& session, const std::string& query) {
    // Your implementation goes here
    printf("sql_validate\n");
  }

  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) {
    // Your implementation goes here
    printf("get_completion_hints\n");
  }

  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) {
    // Your implementation goes here
    printf("set_execution_mode\n");
  }

  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) {
    // Your implementation goes here
    printf("render_vega\n");
  }

  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) {
    // Your implementation goes here
    printf("get_result_row_for_pixel\n");
  }

  int32_t create_custom_expression(const TSessionId& session, const TCustomExpression& custom_expression) {
    // Your implementation goes here
    printf("create_custom_expression\n");
  }

  void get_custom_expressions(std::vector<TCustomExpression> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_custom_expressions\n");
  }

  void update_custom_expression(const TSessionId& session, const int32_t id, const std::string& expression_json) {
    // Your implementation goes here
    printf("update_custom_expression\n");
  }

  void delete_custom_expressions(const TSessionId& session, const std::vector<int32_t> & custom_expression_ids, const bool do_soft_delete) {
    // Your implementation goes here
    printf("delete_custom_expressions\n");
  }

  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) {
    // Your implementation goes here
    printf("get_dashboard\n");
  }

  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_dashboards\n");
  }

  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) {
    // Your implementation goes here
    printf("create_dashboard\n");
  }

  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) {
    // Your implementation goes here
    printf("replace_dashboard\n");
  }

  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) {
    // Your implementation goes here
    printf("delete_dashboard\n");
  }

  void share_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) {
    // Your implementation goes here
    printf("share_dashboards\n");
  }

  void delete_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids) {
    // Your implementation goes here
    printf("delete_dashboards\n");
  }

  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) {
    // Your implementation goes here
    printf("share_dashboard\n");
  }

  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) {
    // Your implementation goes here
    printf("unshare_dashboard\n");
  }

  void unshare_dashboards(const TSessionId& session, const std::vector<int32_t> & dashboard_ids, const std::vector<std::string> & groups, const TDashboardPermissions& permissions) {
    // Your implementation goes here
    printf("unshare_dashboards\n");
  }

  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) {
    // Your implementation goes here
    printf("get_dashboard_grantees\n");
  }

  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) {
    // Your implementation goes here
    printf("get_link_view\n");
  }

  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) {
    // Your implementation goes here
    printf("create_link\n");
  }

  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows, const std::vector<std::string> & column_names) {
    // Your implementation goes here
    printf("load_table_binary\n");
  }

  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names) {
    // Your implementation goes here
    printf("load_table_binary_columnar\n");
  }

  void load_table_binary_columnar_polys(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols, const std::vector<std::string> & column_names, const bool assign_render_groups) {
    // Your implementation goes here
    printf("load_table_binary_columnar_polys\n");
  }

  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream, const bool use_column_names) {
    // Your implementation goes here
    printf("load_table_binary_arrow\n");
  }

  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows, const std::vector<std::string> & column_names) {
    // Your implementation goes here
    printf("load_table\n");
  }

  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) {
    // Your implementation goes here
    printf("detect_column_types\n");
  }

  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) {
    // Your implementation goes here
    printf("create_table\n");
  }

  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) {
    // Your implementation goes here
    printf("import_table\n");
  }

  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) {
    // Your implementation goes here
    printf("import_geo_table\n");
  }

  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) {
    // Your implementation goes here
    printf("import_table_status\n");
  }

  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) {
    // Your implementation goes here
    printf("get_first_geo_file_in_archive\n");
  }

  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) {
    // Your implementation goes here
    printf("get_all_files_in_archive\n");
  }

  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) {
    // Your implementation goes here
    printf("get_layers_in_geo_file\n");
  }

  int64_t query_get_outer_fragment_count(const TSessionId& session, const std::string& query) {
    // Your implementation goes here
    printf("query_get_outer_fragment_count\n");
  }

  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) {
    // Your implementation goes here
    printf("check_table_consistency\n");
  }

  void start_query(TPendingQuery& _return, const TSessionId& leaf_session, const TSessionId& parent_session, const std::string& query_ra, const std::string& start_time_str, const bool just_explain, const std::vector<int64_t> & outer_fragment_indices) {
    // Your implementation goes here
    printf("start_query\n");
  }

  void execute_query_step(TStepResult& _return, const TPendingQuery& pending_query, const TSubqueryId subquery_id, const std::string& start_time_str) {
    // Your implementation goes here
    printf("execute_query_step\n");
  }

  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id, const TSubqueryId subquery_id, const bool is_final_subquery_result) {
    // Your implementation goes here
    printf("broadcast_serialized_rows\n");
  }

  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) {
    // Your implementation goes here
    printf("start_render_query\n");
  }

  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) {
    // Your implementation goes here
    printf("execute_next_render_step\n");
  }

  void insert_data(const TSessionId& session, const TInsertData& insert_data) {
    // Your implementation goes here
    printf("insert_data\n");
  }

  void checkpoint(const TSessionId& session, const int32_t table_id) {
    // Your implementation goes here
    printf("checkpoint\n");
  }

  void get_roles(std::vector<std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_roles\n");
  }

  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) {
    // Your implementation goes here
    printf("get_db_objects_for_grantee\n");
  }

  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) {
    // Your implementation goes here
    printf("get_db_object_privs\n");
  }

  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) {
    // Your implementation goes here
    printf("get_all_roles_for_user\n");
  }

  bool has_role(const TSessionId& session, const std::string& granteeName, const std::string& roleName) {
    // Your implementation goes here
    printf("has_role\n");
  }

  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) {
    // Your implementation goes here
    printf("has_object_privilege\n");
  }

  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) {
    // Your implementation goes here
    printf("set_license_key\n");
  }

  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) {
    // Your implementation goes here
    printf("get_license_claims\n");
  }

  void get_device_parameters(std::map<std::string, std::string> & _return, const TSessionId& session) {
    // Your implementation goes here
    printf("get_device_parameters\n");
  }

  void register_runtime_extension_functions(const TSessionId& session, const std::vector< ::TUserDefinedFunction> & udfs, const std::vector< ::TUserDefinedTableFunction> & udtfs, const std::map<std::string, std::string> & device_ir_map) {
    // Your implementation goes here
    printf("register_runtime_extension_functions\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<OmniSciHandler> handler(new OmniSciHandler());
  ::std::shared_ptr<TProcessor> processor(new OmniSciProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

